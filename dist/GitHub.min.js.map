{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/Gist.js","lib/GitHub.js","lib/Issue.js","lib/Markdown.js","lib/Organization.js","lib/Project.js","lib/RateLimit.js","lib/lib/Repository.js","lib/Requestable.js","lib/Search.js","lib/Team.js","lib/User.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","GitHub","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_Requestable2","Gist","id","auth","apiBase","_classCallCheck","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","__id","cb","_request","gist","_this2","then","response","data","_request204or404","_requestAllPages","revision","comment","body","_Gist","_User","_Issue","_Search","_RateLimit","_Repository","_Organization","_Team","_Markdown","_Project","arguments","undefined","__apiBase","__auth","_Gist2","default","user","_User2","organization","_Organization2","teamId","_Team2","repo","_Repository2","_getFullName","_Issue2","query","_Search2","_RateLimit2","_Markdown2","_Project2","fullname","Issue","repository","__repository","issueData","options","issue","milestone","milestoneData","labelData","label","Markdown","Organization","__name","requestOptions","_getOptionsWithDefaults","direction","username","AcceptHeader","Project","colId","position","listProjectColumns","_ref","Promise","all","map","column","cardsInColumns","cards","reduce","prev","_ref2","push","apply","_toConsumableArray","catch","err","cardId","column_id","RateLimit","_utf","_jsBase","_debug","log","_debug2","Repository","__fullname","__currentTree","branch","sha","ref","number","base","head","since","_dateToISO","until","path","treeSHA","content","postBody","_getContentObject","_utf2","encode","encoding","Buffer","toString","Blob","Base64","_typeof","JSON","stringify","baseTreeSHA","blobSHA","newTree","base_tree","tree","mode","type","baseSHA","parent","message","parents","commitSHA","force","raw","encodeURI","oldBranch","newBranch","_this3","getRef","object","createRef","_this4","getSha","deleteCommit","oldPath","newPath","_this5","oldSha","getTree","_ref2$data","createTree","_ref3","commit","_ref4","updateHead","_this6","filePath","shouldEncode","author","committer","methodHasNoBody","method","METHODS_WITH_NO_BODY","indexOf","getNextPage","split","nextUrl","link","search","match","callbackErrorOrThrow","error","hasOwnProperty","_object$response","status","statusText","_object$config","config","url","ResponseError","_axios","request","Requestable","token","password","__AcceptHeader","__authorizationHeader","newCacheBuster","Date","getTime","replace","headers","Content-Type","Accept","Authorization","visibility","affiliation","sort","per_page","date","toISOString","__getURL","__getRequestHeaders","queryParams","params","responseType","requestPromise","_axios2","keys","results","_results","thisGroup","Array","items","page","Search","defaults","__defaults","withOptions","forEach","prop","_search","Team","__teamId","owner","User","__user","endpoint","__getScopedUrl","before"],"mappings":"CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,KAAAJ,EAAAK,OAAAV,MAAA,WAAA,MAAA,SAAAW,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAhB,GAAA,GAAAqB,OAAA,uBAAAL,EAAA,IAAA,MAAAhB,GAAAsB,KAAA,mBAAAtB,EAAA,GAAAuB,GAAAV,EAAAG,IAAAf,WAAAW,GAAAI,GAAA,GAAAQ,KAAAD,EAAAtB,QAAA,SAAAU,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,GAAAF,IAAAY,EAAAA,EAAAtB,QAAAU,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAf,QAAA,IAAA,GAAAmB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAjB,EAAAD,q0BCOA0B,EAAAR,EAAA,wEAKMS,cAOH,QAAAA,GAAYC,EAAIC,EAAMC,GAASC,EAAAvB,KAAAmB,EAAA,IAAAK,GAAAC,EAAAzB,MAAAmB,EAAAO,WAAAC,OAAAC,eAAAT,IAAAJ,KAAAf,KACtBqB,EAAMC,GADgB,OAE5BE,GAAKK,KAAOT,EAFgBI,gDAW1BM,GACF,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAK6B,KAAQ,KAAMC,kCAUrDE,EAAMF,GAAI,GAAAG,GAAAjC,IACd,OAAOA,MAAK+B,SAAS,OAAQ,SAAUC,EAAMF,GACzCI,KAAK,SAACC,GAEJ,MADAF,GAAKJ,KAAOM,EAASC,KAAKhB,GACnBe,mCAUTL,GACJ,MAAO9B,MAAK+B,SAAS,SAAd,UAAkC/B,KAAK6B,KAAQ,KAAMC,gCAS1DA,GACF,MAAO9B,MAAK+B,SAAS,OAAd,UAAgC/B,KAAK6B,KAArC,SAAmD,KAAMC,kCAU5DE,EAAMF,GACV,MAAO9B,MAAK+B,SAAS,QAAd,UAAiC/B,KAAK6B,KAAQG,EAAMF,gCASzDA,GACF,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAK6B,KAApC,QAAiD,KAAMC,kCAS1DA,GACJ,MAAO9B,MAAK+B,SAAS,SAAd,UAAkC/B,KAAK6B,KAAvC,QAAoD,KAAMC,qCAS1DA,GACP,MAAO9B,MAAKqC,iBAAL,UAAgCrC,KAAK6B,KAArC,QAAkD,KAAMC,uCAStDA,GACT,MAAO9B,MAAKsC,iBAAL,UAAgCtC,KAAK6B,KAArC,WAAqD,KAAMC,uCAUzDS,EAAUT,GACnB,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAK6B,KAApC,IAA4CU,EAAY,KAAMT,wCAS3DA,GACV,MAAO9B,MAAKsC,iBAAL,UAAgCtC,KAAK6B,KAArC,YAAsD,KAAMC,sCAU3DU,EAASV,GACjB,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAK6B,KAApC,aAAqDW,EAAW,KAAMV,yCAUlEU,EAASV,GACpB,MAAO9B,MAAK+B,SAAS,OAAd,UAAgC/B,KAAK6B,KAArC,aAAuDY,KAAMD,GAAUV,uCAWrEU,EAASC,EAAMX,GACxB,MAAO9B,MAAK+B,SAAS,QAAd,UAAiC/B,KAAK6B,KAAtC,aAAuDW,GAAYC,KAAMA,GAAOX,yCAU5EU,EAASV,GACpB,MAAO9B,MAAK+B,SAAS,SAAd,UAAkC/B,KAAK6B,KAAvC,aAAwDW,EAAW,KAAMV,oBAItFrC,GAAOD,QAAU2B,kcCnLjBuB,EAAAhC,EAAA,iBACAiC,EAAAjC,EAAA,iBACAkC,EAAAlC,EAAA,kBACAmC,EAAAnC,EAAA,mBACAoC,EAAApC,EAAA,sBACAqC,EAAArC,EAAA,uBACAsC,EAAAtC,EAAA,yBACAuC,EAAAvC,EAAA,iBACAwC,EAAAxC,EAAA,qBACAyC,EAAAzC,EAAA,oBAKMT,aAOH,QAAAA,GAAYoB,GAA0C,GAApCC,GAAoC8B,UAAApC,OAAA,OAAAqC,KAAAD,UAAA,GAAAA,UAAA,GAA1B,wBAA0B7B,GAAAvB,KAAAC,GACnDD,KAAKsD,UAAYhC,EACjBtB,KAAKuD,OAASlC,gDAQTD,GACL,MAAO,IAAAoC,GAAAC,QAASrC,EAAIpB,KAAKuD,OAAQvD,KAAKsD,2CASjCI,GACL,MAAO,IAAAC,GAAAF,QAASC,EAAM1D,KAAKuD,OAAQvD,KAAKsD,mDAQ3BM,GACb,MAAO,IAAAC,GAAAJ,QAAiBG,EAAc5D,KAAKuD,OAAQvD,KAAKsD,2CAQnDQ,GACL,MAAO,IAAAC,GAAAN,QAASK,EAAQ9D,KAAKuD,OAAQvD,KAAKsD,2CASrCI,EAAMM,GACX,MAAO,IAAAC,GAAAR,QAAezD,KAAKkE,aAAaR,EAAMM,GAAOhE,KAAKuD,OAAQvD,KAAKsD,6CAShEI,EAAMM,GACb,MAAO,IAAAG,GAAAV,QAAUzD,KAAKkE,aAAaR,EAAMM,GAAOhE,KAAKuD,OAAQvD,KAAKsD,0CAQ9Dc,GACJ,MAAO,IAAAC,GAAAZ,QAAWW,EAAOpE,KAAKuD,OAAQvD,KAAKsD,kDAQ3C,MAAO,IAAAgB,GAAAb,QAAczD,KAAKuD,OAAQvD,KAAKsD,iDAQvC,MAAO,IAAAiB,GAAAd,QAAazD,KAAKuD,OAAQvD,KAAKsD,8CAQ9BlC,GACR,MAAO,IAAAoD,GAAAf,QAAYrC,EAAIpB,KAAKuD,OAAQvD,KAAKsD,gDAS/BI,EAAMM,GAChB,GAAIS,GAAWf,CAMf,OAJIM,KACDS,EAAcf,EAAd,IAAsBM,GAGlBS,UAIbhF,GAAOD,QAAUS,y+BCvIjBiB,EAAAR,EAAA,wEAKMgE,cAOH,QAAAA,GAAYC,EAAYtD,EAAMC,GAASC,EAAAvB,KAAA0E,EAAA,IAAAlD,GAAAC,EAAAzB,MAAA0E,EAAAhD,WAAAC,OAAAC,eAAA8C,IAAA3D,KAAAf,KAC9BqB,EAAMC,GADwB,OAEpCE,GAAKoD,aAAeD,EAFgBnD,uDAY3BqD,EAAW/C,GACpB,MAAO9B,MAAK+B,SAAS,OAAd,UAAgC/B,KAAK4E,aAArC,UAA4DC,EAAW/C,sCAUtEgD,EAAShD,GACjB,MAAO9B,MAAKsC,iBAAL,UAAgCtC,KAAK4E,aAArC,UAA4DE,EAAShD,2CAU/DiD,EAAOjD,GACpB,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAK4E,aAApC,WAA2DG,EAA3D,UAA2E,KAAMjD,6CAUzEiD,EAAOjD,GACtB,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAK4E,aAApC,WAA2DG,EAA3D,YAA6E,KAAMjD,2CAU7EV,EAAIU,GACjB,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAK4E,aAApC,oBAAoExD,EAAM,KAAMU,8CAWvEiD,EAAOvC,EAASV,GAChC,MAAO9B,MAAK+B,SAAS,OAAd,UAAgC/B,KAAK4E,aAArC,WAA4DG,EAA5D,aAA+EtC,KAAMD,GAAUV,4CAWxFV,EAAIoB,EAASV,GAC3B,MAAO9B,MAAK+B,SAAS,QAAd,UAAiC/B,KAAK4E,aAAtC,oBAAsExD,GAAOqB,KAAMD,GAAUV,8CAUpFV,EAAIU,GACpB,MAAO9B,MAAK+B,SAAS,SAAd,UAAkC/B,KAAK4E,aAAvC,oBAAuExD,EAAM,KAAMU,qCAWnFiD,EAAOF,EAAW/C,GACzB,MAAO9B,MAAK+B,SAAS,QAAd,UAAiC/B,KAAK4E,aAAtC,WAA6DG,EAASF,EAAW/C,oCAUlFiD,EAAOjD,GACb,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAK4E,aAApC,WAA2DG,EAAS,KAAMjD,0CAUrEgD,EAAShD,GACrB,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAK4E,aAApC,cAA+DE,EAAShD,wCAUrEkD,EAAWlD,GACrB,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAK4E,aAApC,eAA+DI,EAAa,KAAMlD,2CAU5EmD,EAAenD,GAC5B,MAAO9B,MAAK+B,SAAS,OAAd,UAAgC/B,KAAK4E,aAArC,cAAgEK,EAAenD,yCAW3EkD,EAAWC,EAAenD,GACrC,MAAO9B,MAAK+B,SAAS,QAAd,UAAiC/B,KAAK4E,aAAtC,eAAiEI,EAAaC,EAAenD,2CAUvFkD,EAAWlD,GACxB,MAAO9B,MAAK+B,SAAS,SAAd,UAAkC/B,KAAK4E,aAAvC,eAAkEI,EAAa,KAAMlD,uCAUnFoD,EAAWpD,GACpB,MAAO9B,MAAK+B,SAAS,OAAd,UAAgC/B,KAAK4E,aAArC,UAA4DM,EAAWpD,sCAUtEgD,EAAShD,GACjB,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAK4E,aAApC,UAA2DE,EAAShD,oCAUrEqD,EAAOrD,GACb,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAK4E,aAApC,WAA2DO,EAAS,KAAMrD,qCAW1EqD,EAAOD,EAAWpD,GACzB,MAAO9B,MAAK+B,SAAS,QAAd,UAAiC/B,KAAK4E,aAAtC,WAA6DO,EAASD,EAAWpD,uCAU/EqD,EAAOrD,GAChB,MAAO9B,MAAK+B,SAAS,SAAd,UAAkC/B,KAAK4E,aAAvC,WAA8DO,EAAS,KAAMrD,oBAI1FrC,GAAOD,QAAUkF,62BCnPjBxD,EAAAR,EAAA,wEAKM0E,cAOH,QAAAA,GAAY/D,EAAMC,GAAS,MAAAC,GAAAvB,KAAAoF,GAAA3D,EAAAzB,MAAAoF,EAAA1D,WAAAC,OAAAC,eAAAwD,IAAArE,KAAAf,KAClBqB,EAAMC,oDAaRwD,EAAShD,GACb,MAAO9B,MAAK+B,SAAS,OAAQ,YAAa+C,EAAShD,oBAIzDrC,GAAOD,QAAU4F,62BC/BjBlE,EAAAR,EAAA,wEAKM2E,cAOH,QAAAA,GAAYzB,EAAcvC,EAAMC,GAASC,EAAAvB,KAAAqF,EAAA,IAAA7D,GAAAC,EAAAzB,MAAAqF,EAAA3D,WAAAC,OAAAC,eAAAyD,IAAAtE,KAAAf,KAChCqB,EAAMC,GAD0B,OAEtCE,GAAK8D,OAAS1B,EAFwBpC,sDAY9BsD,EAAShD,GACjB,MAAO9B,MAAK+B,SAAS,OAAd,SAA+B/B,KAAKsF,OAApC,SAAoDR,EAAShD,oCAS9DA,GACN,GAAIyD,GAAiBvF,KAAKwF,yBAAyBC,UAAW,QAE9D,OAAOzF,MAAKsC,iBAAL,SAA+BtC,KAAKsF,OAApC,SAAoDC,EAAgBzD,oCASrE4D,EAAU5D,GAChB,MAAO9B,MAAKqC,iBAAL,SAA+BrC,KAAKsF,OAApC,YAAsDI,EAAY,KAAM5D,uCAYtEgD,EAAShD,GAClB,MAAO9B,MAAK+B,SAAS,MAAd,SAA8B/B,KAAKsF,OAAnC,WAAqDR,EAAShD,oCAS/DA,GACN,MAAO9B,MAAKsC,iBAAL,SAA+BtC,KAAKsF,OAApC,aAAoDjC,GAAWvB,sCAe9DgD,EAAShD,GACjB,MAAO9B,MAAK+B,SAAS,OAAd,SAA+B/B,KAAKsF,OAApC,SAAoDR,EAAShD,wCAS1DA,GACV,MAAO9B,MAAKsC,iBAAL,SAA+BtC,KAAKsF,OAApC,aAAwDK,aAAc,mBAAoB7D,yCAUtFgD,EAAShD,GAGpB,MAFAgD,GAAUA,MACVA,EAAQa,aAAe,kBAChB3F,KAAK+B,SAAS,OAAd,SAA+B/B,KAAKsF,OAApC,YAAuDR,EAAShD,oBAI7ErC,GAAOD,QAAU6F,q+BCjHjBnE,EAAAR,EAAA,wEAKMkF,cAOH,QAAAA,GAAYxE,EAAIC,EAAMC,GAASC,EAAAvB,KAAA4F,EAAA,IAAApE,GAAAC,EAAAzB,MAAA4F,EAAAlE,WAAAC,OAAAC,eAAAgE,IAAA7E,KAAAf,KACtBqB,EAAMC,EAAS,mBADO,OAE5BE,GAAKK,KAAOT,EAFgBI,sDAWpBM,GACR,MAAO9B,MAAK+B,SAAS,MAAd,aAAkC/B,KAAK6B,KAAQ,KAAMC,yCAUjDgD,EAAShD,GACpB,MAAO9B,MAAK+B,SAAS,QAAd,aAAoC/B,KAAK6B,KAAQiD,EAAShD,yCAStDA,GACX,MAAO9B,MAAK+B,SAAS,SAAd,aAAqC/B,KAAK6B,KAAQ,KAAMC,8CAS/CA,GAChB,MAAO9B,MAAKsC,iBAAL,aAAmCtC,KAAK6B,KAAxC,WAAwD,KAAMC,4CAUvD+D,EAAO/D,GACrB,MAAO9B,MAAK+B,SAAS,MAAd,qBAA0C8D,EAAS,KAAM/D,+CAU/CgD,EAAShD,GAC1B,MAAO9B,MAAK+B,SAAS,OAAd,aAAmC/B,KAAK6B,KAAxC,WAAwDiD,EAAShD,+CAWvD+D,EAAOf,EAAShD,GACjC,MAAO9B,MAAK+B,SAAS,QAAd,qBAA4C8D,EAASf,EAAShD,+CAUpD+D,EAAO/D,GACxB,MAAO9B,MAAK+B,SAAS,SAAd,qBAA6C8D,EAAS,KAAM/D,6CAYpD+D,EAAOC,EAAUhE,GAChC,MAAO9B,MAAK+B,SACT,OADI,qBAEiB8D,EAFjB,UAGHC,SAAUA,GACXhE,4CAUWA,GAAI,GAAAG,GAAAjC,IAClB,OAAOA,MAAK+F,qBACT7D,KAAK,SAAA8D,GAAY,GAAV5D,GAAU4D,EAAV5D,IACL,OAAO6D,SAAQC,IAAI9D,EAAK+D,IAAI,SAACC,GAC1B,MAAOnE,GAAKK,iBAAL,qBAA2C8D,EAAOhF,GAAlD,SAA8D,WAExEc,KAAK,SAACmE,GACN,GAAMC,GAAQD,EAAeE,OAAO,SAACC,EAADC,GAAkB,GAAVrE,GAAUqE,EAAVrE,IAEzC,OADAoE,GAAKE,KAALC,MAAAH,EAAAI,EAAaxE,IACNoE,MAKV,OAHI1E,IACDA,EAAG,KAAMwE,GAELA,IACPO,MAAM,SAACC,GACP,GAAIhF,EAED,WADAA,GAAGgF,EAGN,MAAMA,6CAWEjB,EAAO/D,GACpB,MAAO9B,MAAKsC,iBAAL,qBAA2CuD,EAA3C,SAA0D,KAAM/D,0CAU3DiF,EAAQjF,GACpB,MAAO9B,MAAK+B,SAAS,MAAd,2BAAgDgF,EAAU,KAAMjF,6CAWxD+D,EAAOf,EAAShD,GAC/B,MAAO9B,MAAK+B,SAAS,OAAd,qBAA2C8D,EAA3C,SAA0Df,EAAShD,6CAW3DiF,EAAQjC,EAAShD,GAChC,MAAO9B,MAAK+B,SAAS,QAAd,2BAAkDgF,EAAUjC,EAAShD,6CAU7DiF,EAAQjF,GACvB,MAAO9B,MAAK+B,SAAS,SAAd,2BAAmDgF,EAAU,KAAMjF,2CAa7DiF,EAAQjB,EAAUD,EAAO/D,GACtC,MAAO9B,MAAK+B,SACT,OADI,2BAEuBgF,EAFvB,UAGHjB,SAAUA,EAAUkB,UAAWnB,GAChC/D,oBAKTrC,GAAOD,QAAUoG,62BCpOjB1E,EAAAR,EAAA,wEAKMuG,cAOH,QAAAA,GAAY5F,EAAMC,GAAS,MAAAC,GAAAvB,KAAAiH,GAAAxF,EAAAzB,MAAAiH,EAAAvF,WAAAC,OAAAC,eAAAqF,IAAAlG,KAAAf,KAClBqB,EAAMC,0DASFQ,GACV,MAAO9B,MAAK+B,SAAS,MAAO,cAAe,KAAMD,oBAIvDrC,GAAOD,QAAUyH,ynCC3BjB/F,EAAAR,EAAA,wBACAwG,EAAAxG,EAAA,eACAyG,EAAAzG,EAAA,aAGA0G,EAAA1G,EAAA,gBACM2G,GAAM,EAAAC,EAAA7D,SAAM,qBAKZ8D,cAOH,QAAAA,GAAY9C,EAAUpD,EAAMC,GAASC,EAAAvB,KAAAuH,EAAA,IAAA/F,GAAAC,EAAAzB,MAAAuH,EAAA7F,WAAAC,OAAAC,eAAA2F,IAAAxG,KAAAf,KAC5BqB,EAAMC,GADsB,OAElCE,GAAKgG,WAAa/C,EAClBjD,EAAKiG,eACFC,OAAQ,KACRC,IAAK,MAL0BnG,kDAgB9BoG,EAAK9F,GACT,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,aAA2DI,EAAO,KAAM9F,qCAUxEgD,EAAShD,GAChB,MAAO9B,MAAK+B,SAAS,OAAd,UAAgC/B,KAAKwH,WAArC,YAA4D1C,EAAShD,qCAUrE8F,EAAK9F,GACZ,MAAO9B,MAAK+B,SAAS,SAAd,UAAkC/B,KAAKwH,WAAvC,aAA8DI,EAAO,KAAM9F,sCAS1EA,GACR,MAAO9B,MAAK+B,SAAS,SAAd,UAAkC/B,KAAKwH,WAAc,KAAM1F,oCAS5DA,GACN,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,QAAuD,KAAM1F,4CAUtDgD,EAAShD,GAEvB,MADAgD,GAAUA,MACH9E,KAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,SAAwD1C,EAAShD,0CAU5D+F,EAAQ/F,GACpB,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,UAAwDK,EAAU,KAAM/F,gDAU7D+F,EAAQ/F,GAC1B,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,UAAwDK,EAAxD,SAAwE,KAAM/F,2CAWxEgG,EAAMC,EAAMjG,GACzB,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,YAA0DM,EAA1D,MAAoEC,EAAQ,KAAMjG,wCAS/EA,GACV,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,YAA2D,KAAM1F,mCAUnE6F,EAAK7F,GACV,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,cAA4DG,EAAO,KAAM7F,EAAI,yCAU7E4F,EAAQ5F,GACf,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,aAA2DE,EAAU,KAAM5F,qCAU3E6F,EAAK7F,GACZ,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,gBAA8DG,EAAO,KAAM7F,uCAezEgD,EAAShD,GAMlB,MALAgD,GAAUA,MAEVA,EAAQkD,MAAQhI,KAAKiI,WAAWnD,EAAQkD,OACxClD,EAAQoD,MAAQlI,KAAKiI,WAAWnD,EAAQoD,OAEjClI,KAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,WAA0D1C,EAAShD,2CAU7D8F,EAAK9F,GAElB,MADA8F,GAAMA,GAAO,GACN5H,KAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,YAA0DI,EAAO,KAAM9F,kCAW1E4F,EAAQS,EAAMrG,GAElB,MADA4F,GAASA,EAAA,QAAiBA,EAAW,GAC9B1H,KAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,aAA2DW,EAAOT,EAAU,KAAM5F,wCAU/E6F,EAAK7F,GACf,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,YAA0DG,EAA1D,YAA0E,KAAM7F,mCAUlFsG,EAAStG,GACd,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,cAA4DY,EAAW,KAAMtG,sCAU5EuG,EAASvG,GACjB,GAAIwG,GAAWtI,KAAKuI,kBAAkBF,EAGtC,OADAhB,GAAI,kBAAmBiB,GAChBtI,KAAK+B,SAAS,OAAd,UAAgC/B,KAAKwH,WAArC,aAA6Dc,EAAUxG,6CAQ/DuG,GACf,GAAuB,gBAAZA,GAER,MADAhB,GAAI,uBAEDgB,QAASG,EAAA/E,QAAKgF,OAAOJ,GACrBK,SAAU,QAGT,QAAsB,KAAXC,GAA0BN,YAAmBM,GAE5D,MADAtB,GAAI,4BAEDgB,QAASA,EAAQO,SAAS,UAC1BF,SAAU,SAGT,IAAoB,mBAATG,OAAwBR,YAAmBQ,MAE1D,MADAxB,GAAI,mCAEDgB,QAASlB,EAAA2B,OAAOL,OAAOJ,GACvBK,SAAU,SAKb,MADArB,GAAA,uCAAA,KAA6CgB,EAA7C,YAAAU,EAA6CV,IAA7C,KAAyDW,KAAKC,UAAUZ,IAClE,GAAIzH,OAAM,wHAcXsI,EAAaf,EAAMgB,EAASrH,GACpC,GAAIsH,IACDC,UAAWH,EACXI,OACGnB,KAAMA,EACNR,IAAKwB,EACLI,KAAM,SACNC,KAAM,SAIZ,OAAOxJ,MAAK+B,SAAS,OAAd,UAAgC/B,KAAKwH,WAArC,aAA6D4B,EAAStH,sCAWrEwH,EAAMG,EAAS3H,GACvB,MAAO9B,MAAK+B,SAAS,OAAd,UAAgC/B,KAAKwH,WAArC,cACJ8B,KAAAA,EACAD,UAAWI,GACX3H,kCAYC4H,EAAQJ,EAAMK,EAAS7H,GAAI,GAAAG,GAAAjC,KAC3BoC,GACDuH,QAAAA,EACAL,KAAAA,EACAM,SAAUF,GAGb,OAAO1J,MAAK+B,SAAS,OAAd,UAAgC/B,KAAKwH,WAArC,eAA+DpF,EAAMN,GACxEI,KAAK,SAACC,GAEJ,MADAF,GAAKwF,cAAcE,IAAMxF,EAASC,KAAKuF,IAChCxF,uCAaLyF,EAAKiC,EAAWC,EAAOhI,GAC/B,MAAO9B,MAAK+B,SAAS,QAAd,UAAiC/B,KAAKwH,WAAtC,aAA6DI,GACjED,IAAKkC,EACLC,MAAOA,GACPhI,wCAeO+H,EAAW/E,EAAShD,GAC9B,MAAO9B,MAAK+B,SAAS,OAAd,UAAgC/B,KAAKwH,WAArC,aAA4DqC,EAAa/E,EAAShD,4CAkB3EgD,EAAShD,GACvB,MAAO9B,MAAK+B,SAAS,QAAd,UAAiC/B,KAAKwH,WAAc1C,EAAShD,sCAS5DA,GACR,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAAc,KAAM1F,2CASlDA,GACb,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,gBAA+D,KAAM1F,+CAS3DA,GACjB,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,sBAAqE,KAAM1F,4CAUpEA,GACd,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,iBAAgE,KAAM1F,0CAUjE4D,EAAU5D,GACtB,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,kBAAgE9B,EAAY,KAAM5D,uCAYhF8F,EAAKO,EAAM4B,EAAKjI,GAEzB,MADAqG,GAAOA,EAAA,GAAU6B,UAAU7B,GAAU,GAC9BnI,KAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,aAA2DW,GAC/DP,IAAAA,GACA9F,EAAIiI,qCAWAnC,EAAKmC,EAAKjI,GACjB,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,WACJI,IAAAA,GACA9F,EAAIiI,gCASLjI,GACF,MAAO9B,MAAK+B,SAAS,OAAd,UAAgC/B,KAAKwH,WAArC,SAAyD,KAAM1F,qCAS/DA,GACP,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,SAAwD,KAAM1F,wCAU3DmI,EAAWC,EAAWpI,GAAI,GAAAqI,GAAAnK,IAOpC,OANyB,kBAAdkK,KACRpI,EAAKoI,EACLA,EAAYD,EACZA,EAAY,UAGRjK,KAAKoK,OAAL,SAAqBH,GACxB/H,KAAK,SAACC,GACJ,GAAIwF,GAAMxF,EAASC,KAAKiI,OAAO1C,GAC/B,OAAOwC,GAAKG,WACT3C,IAAAA,EACAC,IAAA,cAAmBsC,GACnBpI,+CAWMgD,EAAShD,GACxB,MAAO9B,MAAK+B,SAAS,OAAd,UAAgC/B,KAAKwH,WAArC,SAAyD1C,EAAShD,6CAW1D+F,EAAQ/C,EAAShD,GAChC,MAAO9B,MAAK+B,SAAS,QAAd,UAAiC/B,KAAKwH,WAAtC,UAA0DK,EAAU/C,EAAShD,qCAS7EA,GACP,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,SAAwD,KAAM1F,mCAUhEV,EAAIU,GACT,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,UAAwDpG,EAAM,KAAMU,sCAUnEgD,EAAShD,GACjB,MAAO9B,MAAK+B,SAAS,OAAd,UAAgC/B,KAAKwH,WAArC,SAAyD1C,EAAShD,sCAWjEV,EAAI0D,EAAShD,GACrB,MAAO9B,MAAK+B,SAAS,QAAd,UAAiC/B,KAAKwH,WAAtC,UAA0DpG,EAAM0D,EAAShD,sCAUxEV,EAAIU,GACZ,MAAO9B,MAAK+B,SAAS,SAAd,UAAkC/B,KAAKwH,WAAvC,UAA2DpG,EAAM,KAAMU,oCASxEA,GACN,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,QAAuD,KAAM1F,kCAUhEV,EAAIU,GACR,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,SAAuDpG,EAAM,KAAMU,qCAUnEgD,EAAShD,GAChB,MAAO9B,MAAK+B,SAAS,OAAd,UAAgC/B,KAAKwH,WAArC,QAAwD1C,EAAShD,qCAUjEV,EAAIU,GACX,MAAO9B,MAAK+B,SAAS,SAAd,UAAkC/B,KAAKwH,WAAvC,SAA0DpG,EAAM,KAAMU,sCAWrE4F,EAAQS,EAAMrG,GAAI,GAAAyI,GAAAvK,IAC1B,OAAOA,MAAKwK,OAAO9C,EAAQS,GACvBjG,KAAK,SAACC,GACJ,GAAMsI,IACHd,QAAA,uBAAgCxB,EAAhC,IACAR,IAAKxF,EAASC,KAAKuF,IACnBD,OAAAA,EAEH,OAAO6C,GAAKxI,SAAS,SAAd,UAAkCwI,EAAK/C,WAAvC,aAA8DW,EAAQsC,EAAc3I,kCAY/F4F,EAAQgD,EAASC,EAAS7I,GAAI,GAAA8I,GAAA5K,KAC5B6K,MAAA,EACJ,OAAO7K,MAAKoK,OAAL,SAAqB1C,GACxBxF,KAAK,SAAA8D,GAAA,GAASqE,GAATrE,EAAE5D,KAAOiI,MAAT,OAAsBO,GAAKE,QAAWT,EAAO1C,IAAvB,qBAC3BzF,KAAK,SAAAuE,GAAyB,GAAAsE,GAAAtE,EAAvBrE,KAAOkH,EAAgByB,EAAhBzB,KAAM3B,EAAUoD,EAAVpD,GAClBkD,GAASlD,CACT,IAAIyB,GAAUE,EAAKnD,IAAI,SAACyB,GAOrB,MANIA,GAAIO,OAASuC,IACd9C,EAAIO,KAAOwC,GAEG,SAAb/C,EAAI4B,YACE5B,GAAID,IAEPC,GAEV,OAAOgD,GAAKI,WAAW5B,KAEzBlH,KAAK,SAAA+I,GAAA,GAAQ3B,GAAR2B,EAAE7I,IAAF,OAAkBwI,GAAKM,OAAOL,EAAQvB,EAAK3B,IAAzB,YAA0C+C,EAA1C,SAA0DC,EAA1D,OACvBzI,KAAK,SAAAiJ,GAAA,GAAQD,GAARC,EAAE/I,IAAF,OAAoBwI,GAAKQ,WAAL,SAAyB1D,EAAUwD,EAAOvD,KAAK,EAAM7F,uCAiB3E4F,EAAQS,EAAME,EAASsB,EAAS7E,EAAShD,GAAI,GAAAuJ,GAAArL,IAC7B,mBAAZ8E,KACRhD,EAAKgD,EACLA,KAEH,IAAIwG,GAAWnD,EAAO6B,UAAU7B,GAAQ,GACpCoD,GAAkC,IAAnBzG,EAAQ2D,OACvByC,GACDxD,OAAAA,EACAiC,QAAAA,EACA6B,OAAQ1G,EAAQ0G,OAChBC,UAAW3G,EAAQ2G,UACnBpD,QAASkD,EAAepE,EAAA2B,OAAOL,OAAOJ,GAAWA,EAGpD,OAAOrI,MAAKwK,OAAO9C,EAAQ4D,GACvBpJ,KAAK,SAACC,GAEJ,MADA+I,GAAOvD,IAAMxF,EAASC,KAAKuF,IACpB0D,EAAKtJ,SAAS,MAAd,UAA+BsJ,EAAK7D,WAApC,aAA2D8D,EAAYJ,EAAQpJ,IACtF,WACA,MAAOuJ,GAAKtJ,SAAS,MAAd,UAA+BsJ,EAAK7D,WAApC,aAA2D8D,EAAYJ,EAAQpJ,uCAWrFA,GACP,MAAO9B,MAAKqC,iBAAL,iBAAuCrC,KAAKwH,WAAc,KAAM1F,gCASrEA,GACF,MAAO9B,MAAK+B,SAAS,MAAd,iBAAsC/B,KAAKwH,WAAc,KAAM1F,kCASlEA,GACJ,MAAO9B,MAAK+B,SAAS,SAAd,iBAAyC/B,KAAKwH,WAAc,KAAM1F,yCAU9DgD,EAAShD,GACpB,MAAO9B,MAAK+B,SAAS,OAAd,UAAgC/B,KAAKwH,WAArC,YAA4D1C,EAAShD,yCAWjEV,EAAI0D,EAAShD,GACxB,MAAO9B,MAAK+B,SAAS,QAAd,UAAiC/B,KAAKwH,WAAtC,aAA6DpG,EAAM0D,EAAShD,wCASzEA,GACV,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,YAA2D,KAAM1F,sCAUhEV,EAAIU,GACZ,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,aAA2DpG,EAAM,KAAMU,yCAUnEV,EAAIU,GACf,MAAO9B,MAAK+B,SAAS,SAAd,UAAkC/B,KAAKwH,WAAvC,aAA8DpG,EAAM,KAAMU,4CAWnE+F,EAAQ/C,EAAShD,GAC/B,MAAO9B,MAAK+B,SAAS,MAAd,UAA+B/B,KAAKwH,WAApC,UAAwDK,EAAxD,SAAwE/C,EAAShD,wCAS9EA,GACV,MAAO9B,MAAKsC,iBAAL,UAAgCtC,KAAKwH,WAArC,aAA6D7B,aAAc,mBAAoB7D,yCAU3FgD,EAAShD,GAGpB,MAFAgD,GAAUA,MACVA,EAAQa,aAAe,kBAChB3F,KAAK+B,SAAS,OAAd,UAAgC/B,KAAKwH,WAArC,YAA4D1C,EAAShD,oBAKlFrC,GAAOD,QAAU+H,y3BCtkBjB,QAASmE,GAAgBC,GACtB,OAAiD,IAA1CC,EAAqBC,QAAQF,GAGvC,QAASG,KAEN,OAFoC1I,UAAApC,OAAA,OAAAqC,KAAAD,UAAA,GAAAA,UAAA,GAAJ,IACN2I,MAAM,WACnBxF,OAAO,SAASyF,EAASC,GACnC,OAAmC,IAA/BA,EAAKC,OAAO,eACLD,EAAKE,MAAM,eAAiB,GAGhCH,OACP3I,IAGN,QAAS+I,GAAqBtK,EAAIqG,GAC/B,MAAO,UAAiBkC,GACrB,GAAIgC,OAAA,EACJ,IAAIhC,EAAOiC,eAAe,UAAW,CAAA,GAAAC,GAC8BlC,EAAzDlI,SAAWqK,EADgBD,EAChBC,OAAQC,EADQF,EACRE,WADQC,EAC8BrC,EAAzBsC,OAAShB,EADde,EACcf,OAAQiB,EADtBF,EACsBE,IACpDjD,EAAc6C,EAAd,yBAA6Cb,EAA7C,IAAuDiB,EAAvD,MAAgEH,EAAhE,GACJJ,GAAQ,GAAIQ,GAAclD,EAASxB,EAAMkC,GACzChD,EAAOsC,EAAP,IAAkBX,KAAKC,UAAUoB,EAAOjI,WAExCiK,GAAQhC,CAEX,KAAIvI,EAKD,KADAuF,GAAI,kBACEgF,CAJNhF,GAAI,2BACJvF,EAAGuK,ycA5SZS,EAAApM,EAAA,gBACA0G,EAAA1G,EAAA,gBACAyG,EAAAzG,EAAA,aAEM2G,GAAM,EAAAC,EAAA7D,SAAM,kBAKZoJ,cAOH,QAAAA,GAAYlD,EAASxB,EAAMhG,GAAUZ,EAAAvB,KAAA6M,EAAA,IAAArL,GAAAC,EAAAzB,MAAA6M,EAAAnL,WAAAC,OAAAC,eAAAiL,IAAA9L,KAAAf,KAC5B2J,GAD4B,OAElCnI,GAAK2G,KAAOA,EACZ3G,EAAKuL,QAAU5K,EAASwK,OACxBnL,EAAKW,UAAYA,OAAgBA,UAAYA,EAC7CX,EAAKgL,OAASrK,EAASqK,OALWhL,mBAPZZ,OAmBtBoM,aAeH,QAAAA,GAAY3L,EAAMC,EAASqE,GAAcpE,EAAAvB,KAAAgN,GACtChN,KAAKsD,UAAYhC,GAAW,yBAC5BtB,KAAKuD,QACF0J,MAAO5L,EAAK4L,MACZvH,SAAUrE,EAAKqE,SACfwH,SAAU7L,EAAK6L,UAElBlN,KAAKmN,eAAiBxH,GAAgB,KAElCtE,EAAK4L,MACNjN,KAAKoN,sBAAwB,SAAW/L,EAAK4L,MACrC5L,EAAKqE,UAAYrE,EAAK6L,WAC9BlN,KAAKoN,sBAAwB,SAAWjG,EAAA2B,OAAOL,OAAOpH,EAAKqE,SAAW,IAAMrE,EAAK6L,sDAU9E/E,GACN,GAAIyE,GAAMzE,GAEkB,IAAxBA,EAAK0D,QAAQ,QACde,EAAM5M,KAAKsD,UAAY6E,EAG1B,IAAIkF,GAAiB,cAAe,GAAIC,OAAOC,SAC/C,OAAOX,GAAIY,QAAQ,kBAAmBH,+CAUrBtD,EAAKpE,GACtB,GAAI8H,IACDC,eAAgB,iCAChBC,OAAU,2BAA6BhI,GAAgB3F,KAAKmN,gBAY/D,OATIpD,KACD0D,EAAQE,QAAU,QAErBF,EAAQE,QAAU,QAEd3N,KAAKoN,wBACNK,EAAQG,cAAgB5N,KAAKoN,uBAGzBK,oDASmC,GAArBlI,GAAqBnC,UAAApC,OAAA,OAAAqC,KAAAD,UAAA,GAAAA,UAAA,KAO1C,OANMmC,GAAesI,YAActI,EAAeuI,cAC/CvI,EAAeiE,KAAOjE,EAAeiE,MAAQ,OAEhDjE,EAAewI,KAAOxI,EAAewI,MAAQ,UAC7CxI,EAAeyI,SAAWzI,EAAeyI,UAAY,MAE9CzI,qCAQC0I,GAKR,MAJIA,IAASA,YAAgBX,QAC1BW,EAAOA,EAAKC,eAGRD,mCAqBDtC,EAAQxD,EAAM/F,EAAMN,EAAIiI,GAC9B,GAAM6C,GAAM5M,KAAKmO,SAAShG,GAEpBxC,GAAgBvD,OAAYuD,YAC9BA,UACMvD,GAAKuD,YAEf,IAAM8H,GAAUzN,KAAKoO,oBAAoBrE,EAAKpE,GAE1C0I,IAE0BjM,IAAyB,gBAAhB,KAAOA,EAAP,YAAA2G,EAAO3G,KAAsBsJ,EAAgBC,KAEjF0C,EAAcjM,EACdA,MAAOiB,GAGV,IAAMsJ,IACHC,IAAKA,EACLjB,OAAQA,EACR8B,QAASA,EACTa,OAAQD,EACRjM,KAAMA,EACNmM,aAAcxE,EAAM,OAAS,OAGhC1C,GAAOsF,EAAOhB,OAAd,OAA2BgB,EAAOC,IAClC,IAAM4B,IAAiB,EAAAC,EAAAhL,SAAMkJ,GAAQ9F,MAAMuF,EAAqBtK,EAAIqG,GAgBpE,OAdIrG,IACD0M,EAAetM,KAAK,SAACC,GACdA,EAASC,MAAQT,OAAO+M,KAAKvM,EAASC,MAAMpB,OAAS,EAEtDc,EAAG,KAAMK,EAASC,KAAMD,GACE,QAAlBwK,EAAOhB,QAAoBhK,OAAO+M,KAAKvM,EAASC,MAAMpB,OAAS,EAEvEc,EAAG,KAAOK,EAASqK,OAAS,IAAMrK,GAElCL,EAAG,KAAMK,EAASC,KAAMD,KAK1BqM,2CAWOrG,EAAM/F,EAAMN,GAAoB,GAAhB6J,GAAgBvI,UAAApC,OAAA,OAAAqC,KAAAD,UAAA,GAAAA,UAAA,GAAP,KACvC,OAAOpD,MAAK+B,SAAS4J,EAAQxD,EAAM/F,GAC/BF,KAAK,SAAiBC,GAIpB,MAHIL,IACDA,EAAG,MAAM,EAAMK,IAEX,GACP,SAAiBA,GACjB,GAAiC,MAA7BA,EAASA,SAASqK,OAInB,MAHI1K,IACDA,EAAG,MAAM,EAAOK,IAEZ,CAMV,MAHIL,IACDA,EAAGK,GAEAA,6CAcEgG,EAAMrD,EAAShD,EAAI6M,GAAS,GAAA1M,GAAAjC,IAG1C,OAFA2O,GAAUA,MAEH3O,KAAK+B,SAAS,MAAOoG,EAAMrD,GAC9B5C,KAAK,SAACC,GAAa,GAAAyM,GACbC,MAAA,EACJ,IAAI1M,EAASC,eAAgB0M,OAC1BD,EAAY1M,EAASC,SACjB,CAAA,KAAID,EAASC,KAAK2M,gBAAiBD,QAEnC,CACJ,GAAInF,GAAA,mCAA6CxH,EAASC,KAAtD,oBACJ,MAAM,IAAIyK,GAAclD,EAASxB,EAAMhG,GAHvC0M,EAAY1M,EAASC,KAAK2M,OAK7BH,EAAAD,GAAQjI,KAARC,MAAAiI,EAAAhI,EAAgBiI,GAEhB,IAAM7C,GAAUF,EAAY3J,EAASsL,QAAQxB,KAC7C,OAAID,IAAmC,gBAAjBlH,GAAQkK,MAC3B3H,EAAA,sBAA0B2E,GACnB/J,EAAKK,iBAAiB0J,EAASlH,EAAShD,EAAI6M,KAGlD7M,GACDA,EAAG,KAAM6M,EAASxM,GAGrBA,EAASC,KAAOuM,EACTxM,KACP0E,MAAMuF,EAAqBtK,EAAIqG,YAI3C1I,GAAOD,QAAUwN,CAKjB,IAAMpB,IAAwB,MAAO,OAAQ;qyBC/Q7C1K,EAAAR,EAAA,wBACA0G,EAAA1G,EAAA,gBACM2G,GAAM,EAAAC,EAAA7D,SAAM,iBAKZwL,cAOH,QAAAA,GAAYC,EAAU7N,EAAMC,GAASC,EAAAvB,KAAAiP,EAAA,IAAAzN,GAAAC,EAAAzB,MAAAiP,EAAAvN,WAAAC,OAAAC,eAAAqN,IAAAlO,KAAAf,KAC5BqB,EAAMC,GADsB,OAElCE,GAAK2N,WAAa3N,EAAKgE,wBAAwB0J,GAFb1N,mDAsB7B2G,GAAwC,GAAAlG,GAAAjC,KAAlCoP,EAAkChM,UAAApC,OAAA,OAAAqC,KAAAD,UAAA,GAAAA,UAAA,MAAhBtB,EAAgBsB,UAAApC,OAAA,OAAAqC,KAAAD,UAAA,GAAAA,UAAA,OAAXC,GAC9BkC,IASJ,OARA5D,QAAO+M,KAAK1O,KAAKmP,YAAYE,QAAQ,SAACC,GACnC/J,EAAe+J,GAAQrN,EAAKkN,WAAWG,KAE1C3N,OAAO+M,KAAKU,GAAaC,QAAQ,SAACC,GAC/B/J,EAAe+J,GAAQF,EAAYE,KAGtCjI,EAAA,aAAiBc,EAAjB,iBAAuC5C,GAChCvF,KAAKsC,iBAAL,WAAiC6F,EAAQ5C,EAAgBzD,2CAUnDgD,EAAShD,GACtB,MAAO9B,MAAKuP,QAAQ,eAAgBzK,EAAShD,mCAUxCgD,EAAShD,GACd,MAAO9B,MAAKuP,QAAQ,OAAQzK,EAAShD,qCAU9BgD,EAAShD,GAChB,MAAO9B,MAAKuP,QAAQ,SAAUzK,EAAShD,oCAUjCgD,EAAShD,GACf,MAAO9B,MAAKuP,QAAQ,QAASzK,EAAShD,oBAI5CrC,GAAOD,QAAUyP,86BC9FjB/N,EAAAR,EAAA,wBACA0G,EAAA1G,EAAA,gBACM2G,GAAM,EAAAC,EAAA7D,SAAM,eAKZ+L,cAOH,QAAAA,GAAY1L,EAAQzC,EAAMC,GAASC,EAAAvB,KAAAwP,EAAA,IAAAhO,GAAAC,EAAAzB,MAAAwP,EAAA9N,WAAAC,OAAAC,eAAA4N,IAAAzO,KAAAf,KAC1BqB,EAAMC,GADoB,OAEhCE,GAAKiO,SAAW3L,EAFgBtC,mDAW3BM,GAEL,MADAuF,GAAA,iBAAqBrH,KAAKyP,UACnBzP,KAAK+B,SAAS,MAAd,UAA+B/B,KAAKyP,aAAYpM,GAAWvB,qCAS3DA,GAEP,MADAuF,GAAA,kCAAsCrH,KAAKyP,UACpCzP,KAAKsC,iBAAL,UAAgCtC,KAAKyP,SAArC,aAAuDpM,GAAWvB,oCAenEgD,EAAShD,GAEf,MADAuF,GAAA,gBAAoBrH,KAAKyP,UAClBzP,KAAK+B,SAAS,QAAd,UAAiC/B,KAAKyP,SAAY3K,EAAShD,uCAWzDgD,EAAShD,GAElB,MADAuF,GAAA,2BAA+BrH,KAAKyP,UAC7BzP,KAAKsC,iBAAL,UAAgCtC,KAAKyP,SAArC,WAAyD3K,EAAShD,yCAU9D4D,EAAU5D,GAErB,MADAuF,GAAA,8BAAkC3B,EAAlC,YAAsD1F,KAAKyP,UACpDzP,KAAK+B,SAAS,MAAd,UAA+B/B,KAAKyP,SAApC,gBAA4D/J,MAAYrC,GAAWvB,yCAa/E4D,EAAUZ,EAAShD,GAE9B,MADAuF,GAAA,eAAmB3B,EAAnB,YAAuC1F,KAAKyP,UACrCzP,KAAK+B,SAAS,MAAd,UAA+B/B,KAAKyP,SAApC,gBAA4D/J,EAAYZ,EAAShD,yCAW7E4N,EAAO1L,EAAMlC,GAExB,MADAuF,GAAA,mCAAuCrH,KAAKyP,SAA5C,aAAiEC,EAAjE,IAA0E1L,GACnEhE,KAAKqC,iBAAL,UAAgCrC,KAAKyP,SAArC,UAAuDC,EAAvD,IAAgE1L,MAAQX,GAAWvB,sCAclF4N,EAAO1L,EAAMc,EAAShD,GAE9B,MADAuF,GAAA,8CAAkDrH,KAAKyP,SAAvD,aAA4EC,EAA5E,IAAqF1L,GAC9EhE,KAAKqC,iBAAL,UAAgCrC,KAAKyP,SAArC,UAAuDC,EAAvD,IAAgE1L,EAAQc,EAAShD,EAAI,4CAWlF4N,EAAO1L,EAAMlC,GAEvB,MADAuF,GAAA,kCAAsCrH,KAAKyP,SAA3C,aAAgEC,EAAhE,IAAyE1L,GAClEhE,KAAKqC,iBAAL,UAAgCrC,KAAKyP,SAArC,UAAuDC,EAAvD,IAAgE1L,MAAQX,GAAWvB,EAAI,6CAStFA,GAER,MADAuF,GAAA,iBAAqBrH,KAAKyP,UACnBzP,KAAKqC,iBAAL,UAAgCrC,KAAKyP,aAAYpM,GAAWvB,EAAI,2BAI7ErC,GAAOD,QAAUgQ,86BCxJjBtO,EAAAR,EAAA,wBACA0G,EAAA1G,EAAA,gBACM2G,GAAM,EAAAC,EAAA7D,SAAM,eAKZkM,cAOH,QAAAA,GAAYjK,EAAUrE,EAAMC,GAASC,EAAAvB,KAAA2P,EAAA,IAAAnO,GAAAC,EAAAzB,MAAA2P,EAAAjO,WAAAC,OAAAC,eAAA+N,IAAA5O,KAAAf,KAC5BqB,EAAMC,GADsB,OAElCE,GAAKoO,OAASlK,EAFoBlE,0DAWtBqO,GACZ,GAAI7P,KAAK4P,OACN,MAAOC,GAAA,UACM7P,KAAK4P,OADX,IACqBC,EADrB,UAEM7P,KAAK4P,MAIlB,QAAQC,GACL,IAAK,GACF,MAAO,OAEV,KAAK,gBACL,IAAK,QACF,MAAA,IAAWA,CAEd,SACG,MAAA,SAAgBA,qCAYlB/K,EAAShD,GAShB,MARuB,kBAAZgD,KACRhD,EAAKgD,EACLA,MAGHA,EAAU9E,KAAKwF,wBAAwBV,GAEvCuC,EAAA,uCAA2C2B,KAAKC,UAAUnE,IACnD9E,KAAKsC,iBAAiBtC,KAAK8P,eAAe,SAAUhL,EAAShD,oCAS9DA,GACN,MAAO9B,MAAK+B,SAAS,MAAO/B,KAAK8P,eAAe,QAAS,KAAMhO,qCASxDA,GACP,MAAO9B,MAAK+B,SAAS,MAAO/B,KAAK8P,eAAe,SAAU,KAAMhO,6CAUjDgD,EAAShD,GAUxB,MATAgD,GAAUA,MACa,kBAAZA,KACRhD,EAAKgD,EACLA,MAGHA,EAAQkD,MAAQhI,KAAKiI,WAAWnD,EAAQkD,OACxClD,EAAQiL,OAAS/P,KAAKiI,WAAWnD,EAAQiL,QAElC/P,KAAK+B,SAAS,MAAO/B,KAAK8P,eAAe,iBAAkBhL,EAAShD,sCASnEA,GACR,MAAO9B,MAAK+B,SAAS,MAAO/B,KAAK8P,eAAe,IAAK,KAAMhO,4CAS7CA,GACd,GAAIyD,GAAiBvF,KAAKwF,yBAC1B,OAAOxF,MAAKsC,iBAAiBtC,KAAK8P,eAAe,WAAYvK,EAAgBzD,qCAStEA,GACP,MAAO9B,MAAK+B,SAAS,MAAO,eAAgB,KAAMD,kCAU9C4D,EAAU5D,GACd,MAAO9B,MAAK+B,SAAS,MAAd,mBAAwC/B,KAAK4P,OAAU,KAAM9N,oCAU9D4D,EAAU5D,GAChB,MAAO9B,MAAK+B,SAAS,SAAd,mBAA2C/B,KAAK4P,OAAU,KAAM9N,sCAU/DgD,EAAShD,GACjB,MAAO9B,MAAK+B,SAAS,OAAQ,cAAe+C,EAAShD,oBAI3DrC,GAAOD,QAAUmQ","file":"GitHub.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\n\r\n/**\r\n * A Gist can retrieve and modify gists.\r\n */\r\nclass Gist extends Requestable {\r\n   /**\r\n    * Create a Gist.\r\n    * @param {string} id - the id of the gist (not required when creating a gist)\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(id, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__id = id;\r\n   }\r\n\r\n   /**\r\n    * Fetch a gist.\r\n    * @see https://developer.github.com/v3/gists/#get-a-single-gist\r\n    * @param {Requestable.callback} [cb] - will receive the gist\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   read(cb) {\r\n      return this._request('GET', `/gists/${this.__id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new gist.\r\n    * @see https://developer.github.com/v3/gists/#create-a-gist\r\n    * @param {Object} gist - the data for the new gist\r\n    * @param {Requestable.callback} [cb] - will receive the new gist upon creation\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   create(gist, cb) {\r\n      return this._request('POST', '/gists', gist, cb)\r\n         .then((response) => {\r\n            this.__id = response.data.id;\r\n            return response;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Delete a gist.\r\n    * @see https://developer.github.com/v3/gists/#delete-a-gist\r\n    * @param {Requestable.callback} [cb] - will receive true if the request succeeds\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   delete(cb) {\r\n      return this._request('DELETE', `/gists/${this.__id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Fork a gist.\r\n    * @see https://developer.github.com/v3/gists/#fork-a-gist\r\n    * @param {Requestable.callback} [cb] - the function that will receive the gist\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   fork(cb) {\r\n      return this._request('POST', `/gists/${this.__id}/forks`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Update a gist.\r\n    * @see https://developer.github.com/v3/gists/#edit-a-gist\r\n    * @param {Object} gist - the new data for the gist\r\n    * @param {Requestable.callback} [cb] - the function that receives the API result\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   update(gist, cb) {\r\n      return this._request('PATCH', `/gists/${this.__id}`, gist, cb);\r\n   }\r\n\r\n   /**\r\n    * Star a gist.\r\n    * @see https://developer.github.com/v3/gists/#star-a-gist\r\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   star(cb) {\r\n      return this._request('PUT', `/gists/${this.__id}/star`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Unstar a gist.\r\n    * @see https://developer.github.com/v3/gists/#unstar-a-gist\r\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   unstar(cb) {\r\n      return this._request('DELETE', `/gists/${this.__id}/star`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Check if a gist is starred by the user.\r\n    * @see https://developer.github.com/v3/gists/#check-if-a-gist-is-starred\r\n    * @param {Requestable.callback} [cb] - will receive true if the gist is starred and false if the gist is not starred\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   isStarred(cb) {\r\n      return this._request204or404(`/gists/${this.__id}/star`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the gist's commits\r\n    * @see https://developer.github.com/v3/gists/#list-gist-commits\r\n    * @param {Requestable.callback} [cb] - will receive the array of commits\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   listCommits(cb) {\r\n      return this._requestAllPages(`/gists/${this.__id}/commits`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Fetch one of the gist's revision.\r\n    * @see https://developer.github.com/v3/gists/#get-a-specific-revision-of-a-gist\r\n    * @param {string} revision - the id of the revision\r\n    * @param {Requestable.callback} [cb] - will receive the revision\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   getRevision(revision, cb) {\r\n      return this._request('GET', `/gists/${this.__id}/${revision}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the gist's comments\r\n    * @see https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist\r\n    * @param {Requestable.callback} [cb] - will receive the array of comments\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listComments(cb) {\r\n      return this._requestAllPages(`/gists/${this.__id}/comments`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Fetch one of the gist's comments\r\n    * @see https://developer.github.com/v3/gists/comments/#get-a-single-comment\r\n    * @param {number} comment - the id of the comment\r\n    * @param {Requestable.callback} [cb] - will receive the comment\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   getComment(comment, cb) {\r\n      return this._request('GET', `/gists/${this.__id}/comments/${comment}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Comment on a gist\r\n    * @see https://developer.github.com/v3/gists/comments/#create-a-comment\r\n    * @param {string} comment - the comment to add\r\n    * @param {Requestable.callback} [cb] - the function that receives the API result\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   createComment(comment, cb) {\r\n      return this._request('POST', `/gists/${this.__id}/comments`, {body: comment}, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a comment on the gist\r\n    * @see https://developer.github.com/v3/gists/comments/#edit-a-comment\r\n    * @param {number} comment - the id of the comment\r\n    * @param {string} body - the new comment\r\n    * @param {Requestable.callback} [cb] - will receive the modified comment\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   editComment(comment, body, cb) {\r\n      return this._request('PATCH', `/gists/${this.__id}/comments/${comment}`, {body: body}, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a comment on the gist.\r\n    * @see https://developer.github.com/v3/gists/comments/#delete-a-comment\r\n    * @param {number} comment - the id of the comment\r\n    * @param {Requestable.callback} [cb] - will receive true if the request succeeds\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   deleteComment(comment, cb) {\r\n      return this._request('DELETE', `/gists/${this.__id}/comments/${comment}`, null, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = Gist;\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n/* eslint valid-jsdoc: [\"error\", {\"requireReturnDescription\": false}] */\r\n\r\nimport Gist from './Gist';\r\nimport User from './User';\r\nimport Issue from './Issue';\r\nimport Search from './Search';\r\nimport RateLimit from './RateLimit';\r\nimport Repository from './Repository';\r\nimport Organization from './Organization';\r\nimport Team from './Team';\r\nimport Markdown from './Markdown';\r\nimport Project from './Project';\r\n\r\n/**\r\n * GitHub encapsulates the functionality to create various API wrapper objects.\r\n */\r\nclass GitHub {\r\n   /**\r\n    * Create a new GitHub.\r\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to Github. If auth is\r\n    *                                  not provided requests will be made unauthenticated\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(auth, apiBase = 'https://api.github.com') {\r\n      this.__apiBase = apiBase;\r\n      this.__auth = auth || {};\r\n   }\r\n\r\n   /**\r\n    * Create a new Gist wrapper\r\n    * @param {number} [id] - the id for the gist, leave undefined when creating a new gist\r\n    * @return {Gist}\r\n    */\r\n   getGist(id) {\r\n      return new Gist(id, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new User wrapper\r\n    * @param {string} [user] - the name of the user to get information about\r\n    *                        leave undefined for the authenticated user\r\n    * @return {User}\r\n    */\r\n   getUser(user) {\r\n      return new User(user, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Organization wrapper\r\n    * @param {string} organization - the name of the organization\r\n    * @return {Organization}\r\n    */\r\n   getOrganization(organization) {\r\n      return new Organization(organization, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * create a new Team wrapper\r\n    * @param {string} teamId - the name of the team\r\n    * @return {team}\r\n    */\r\n   getTeam(teamId) {\r\n      return new Team(teamId, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Repository wrapper\r\n    * @param {string} user - the user who owns the respository\r\n    * @param {string} repo - the name of the repository\r\n    * @return {Repository}\r\n    */\r\n   getRepo(user, repo) {\r\n      return new Repository(this._getFullName(user, repo), this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Issue wrapper\r\n    * @param {string} user - the user who owns the respository\r\n    * @param {string} repo - the name of the repository\r\n    * @return {Issue}\r\n    */\r\n   getIssues(user, repo) {\r\n      return new Issue(this._getFullName(user, repo), this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Search wrapper\r\n    * @param {string} query - the query to search for\r\n    * @return {Search}\r\n    */\r\n   search(query) {\r\n      return new Search(query, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new RateLimit wrapper\r\n    * @return {RateLimit}\r\n    */\r\n   getRateLimit() {\r\n      return new RateLimit(this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Markdown wrapper\r\n    * @return {Markdown}\r\n    */\r\n   getMarkdown() {\r\n      return new Markdown(this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Project wrapper\r\n    * @param {string} id - the id of the project\r\n    * @return {Project}\r\n    */\r\n   getProject(id) {\r\n      return new Project(id, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Computes the full repository name\r\n    * @param {string} user - the username (or the full name)\r\n    * @param {string} repo - the repository name, must not be passed if `user` is the full name\r\n    * @return {string} the repository's full name\r\n    */\r\n   _getFullName(user, repo) {\r\n      let fullname = user;\r\n\r\n      if (repo) {\r\n         fullname = `${user}/${repo}`;\r\n      }\r\n\r\n      return fullname;\r\n   }\r\n}\r\n\r\nmodule.exports = GitHub;\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\n\r\n/**\r\n * Issue wraps the functionality to get issues for repositories\r\n */\r\nclass Issue extends Requestable {\r\n   /**\r\n    * Create a new Issue\r\n    * @param {string} repository - the full name of the repository (`:user/:repo`) to get issues for\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(repository, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__repository = repository;\r\n   }\r\n\r\n   /**\r\n    * Create a new issue\r\n    * @see https://developer.github.com/v3/issues/#create-an-issue\r\n    * @param {Object} issueData - the issue to create\r\n    * @param {Requestable.callback} [cb] - will receive the created issue\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createIssue(issueData, cb) {\r\n      return this._request('POST', `/repos/${this.__repository}/issues`, issueData, cb);\r\n   }\r\n\r\n   /**\r\n    * List the issues for the repository\r\n    * @see https://developer.github.com/v3/issues/#list-issues-for-a-repository\r\n    * @param {Object} options - filtering options\r\n    * @param {Requestable.callback} [cb] - will receive the array of issues\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listIssues(options, cb) {\r\n      return this._requestAllPages(`/repos/${this.__repository}/issues`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * List the events for an issue\r\n    * @see https://developer.github.com/v3/issues/events/#list-events-for-an-issue\r\n    * @param {number} issue - the issue to get events for\r\n    * @param {Requestable.callback} [cb] - will receive the list of events\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listIssueEvents(issue, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/issues/${issue}/events`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List comments on an issue\r\n    * @see https://developer.github.com/v3/issues/comments/#list-comments-on-an-issue\r\n    * @param {number} issue - the id of the issue to get comments from\r\n    * @param {Requestable.callback} [cb] - will receive the comments\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listIssueComments(issue, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/issues/${issue}/comments`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a single comment on an issue\r\n    * @see https://developer.github.com/v3/issues/comments/#get-a-single-comment\r\n    * @param {number} id - the comment id to get\r\n    * @param {Requestable.callback} [cb] - will receive the comment\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getIssueComment(id, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/issues/comments/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Comment on an issue\r\n    * @see https://developer.github.com/v3/issues/comments/#create-a-comment\r\n    * @param {number} issue - the id of the issue to comment on\r\n    * @param {string} comment - the comment to add\r\n    * @param {Requestable.callback} [cb] - will receive the created comment\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createIssueComment(issue, comment, cb) {\r\n      return this._request('POST', `/repos/${this.__repository}/issues/${issue}/comments`, {body: comment}, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a comment on an issue\r\n    * @see https://developer.github.com/v3/issues/comments/#edit-a-comment\r\n    * @param {number} id - the comment id to edit\r\n    * @param {string} comment - the comment to edit\r\n    * @param {Requestable.callback} [cb] - will receive the edited comment\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   editIssueComment(id, comment, cb) {\r\n      return this._request('PATCH', `/repos/${this.__repository}/issues/comments/${id}`, {body: comment}, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a comment on an issue\r\n    * @see https://developer.github.com/v3/issues/comments/#delete-a-comment\r\n    * @param {number} id - the comment id to delete\r\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteIssueComment(id, cb) {\r\n      return this._request('DELETE', `/repos/${this.__repository}/issues/comments/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit an issue\r\n    * @see https://developer.github.com/v3/issues/#edit-an-issue\r\n    * @param {number} issue - the issue number to edit\r\n    * @param {Object} issueData - the new issue data\r\n    * @param {Requestable.callback} [cb] - will receive the modified issue\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   editIssue(issue, issueData, cb) {\r\n      return this._request('PATCH', `/repos/${this.__repository}/issues/${issue}`, issueData, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a particular issue\r\n    * @see https://developer.github.com/v3/issues/#get-a-single-issue\r\n    * @param {number} issue - the issue number to fetch\r\n    * @param {Requestable.callback} [cb] - will receive the issue\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getIssue(issue, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/issues/${issue}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the milestones for the repository\r\n    * @see https://developer.github.com/v3/issues/milestones/#list-milestones-for-a-repository\r\n    * @param {Object} options - filtering options\r\n    * @param {Requestable.callback} [cb] - will receive the array of milestones\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listMilestones(options, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/milestones`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a milestone\r\n    * @see https://developer.github.com/v3/issues/milestones/#get-a-single-milestone\r\n    * @param {string} milestone - the id of the milestone to fetch\r\n    * @param {Requestable.callback} [cb] - will receive the milestone\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getMilestone(milestone, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/milestones/${milestone}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new milestone\r\n    * @see https://developer.github.com/v3/issues/milestones/#create-a-milestone\r\n    * @param {Object} milestoneData - the milestone definition\r\n    * @param {Requestable.callback} [cb] - will receive the milestone\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createMilestone(milestoneData, cb) {\r\n      return this._request('POST', `/repos/${this.__repository}/milestones`, milestoneData, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a milestone\r\n    * @see https://developer.github.com/v3/issues/milestones/#update-a-milestone\r\n    * @param {string} milestone - the id of the milestone to edit\r\n    * @param {Object} milestoneData - the updates to make to the milestone\r\n    * @param {Requestable.callback} [cb] - will receive the updated milestone\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   editMilestone(milestone, milestoneData, cb) {\r\n      return this._request('PATCH', `/repos/${this.__repository}/milestones/${milestone}`, milestoneData, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a milestone (this is distinct from closing a milestone)\r\n    * @see https://developer.github.com/v3/issues/milestones/#delete-a-milestone\r\n    * @param {string} milestone - the id of the milestone to delete\r\n    * @param {Requestable.callback} [cb] - will receive the status\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteMilestone(milestone, cb) {\r\n      return this._request('DELETE', `/repos/${this.__repository}/milestones/${milestone}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new label\r\n    * @see https://developer.github.com/v3/issues/labels/#create-a-label\r\n    * @param {Object} labelData - the label definition\r\n    * @param {Requestable.callback} [cb] - will receive the object representing the label\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createLabel(labelData, cb) {\r\n      return this._request('POST', `/repos/${this.__repository}/labels`, labelData, cb);\r\n   }\r\n\r\n  /**\r\n   * List the labels for the repository\r\n   * @see https://developer.github.com/v3/issues/labels/#list-all-labels-for-this-repository\r\n   * @param {Object} options - filtering options\r\n   * @param {Requestable.callback} [cb] - will receive the array of labels\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   listLabels(options, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/labels`, options, cb);\r\n   }\r\n\r\n  /**\r\n   * Get a label\r\n   * @see https://developer.github.com/v3/issues/labels/#get-a-single-label\r\n   * @param {string} label - the name of the label to fetch\r\n   * @param {Requestable.callback} [cb] - will receive the label\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   getLabel(label, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/labels/${label}`, null, cb);\r\n   }\r\n\r\n  /**\r\n   * Edit a label\r\n   * @see https://developer.github.com/v3/issues/labels/#update-a-label\r\n   * @param {string} label - the name of the label to edit\r\n   * @param {Object} labelData - the updates to make to the label\r\n   * @param {Requestable.callback} [cb] - will receive the updated label\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   editLabel(label, labelData, cb) {\r\n      return this._request('PATCH', `/repos/${this.__repository}/labels/${label}`, labelData, cb);\r\n   }\r\n\r\n  /**\r\n   * Delete a label\r\n   * @see https://developer.github.com/v3/issues/labels/#delete-a-label\r\n   * @param {string} label - the name of the label to delete\r\n   * @param {Requestable.callback} [cb] - will receive the status\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   deleteLabel(label, cb) {\r\n      return this._request('DELETE', `/repos/${this.__repository}/labels/${label}`, null, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = Issue;\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\n\r\n/**\r\n * Renders html from Markdown text\r\n */\r\nclass Markdown extends Requestable {\r\n   /**\r\n    * construct a Markdown\r\n    * @param {Requestable.auth} auth - the credentials to authenticate to GitHub\r\n    * @param {string} [apiBase] - the base Github API URL\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   constructor(auth, apiBase) {\r\n      super(auth, apiBase);\r\n   }\r\n\r\n   /**\r\n    * Render html from Markdown text.\r\n    * @see https://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document\r\n    * @param {Object} options - conversion options\r\n    * @param {string} [options.text] - the markdown text to convert\r\n    * @param {string} [options.mode=markdown] - can be either `markdown` or `gfm`\r\n    * @param {string} [options.context] - repository name if mode is gfm\r\n    * @param {Requestable.callback} [cb] - will receive the converted html\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   render(options, cb) {\r\n      return this._request('POST', '/markdown', options, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = Markdown;\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\n\r\n/**\r\n * Organization encapsulates the functionality to create repositories in organizations\r\n */\r\nclass Organization extends Requestable {\r\n   /**\r\n    * Create a new Organization\r\n    * @param {string} organization - the name of the organization\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(organization, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__name = organization;\r\n   }\r\n\r\n   /**\r\n    * Create a repository in an organization\r\n    * @see https://developer.github.com/v3/repos/#create\r\n    * @param {Object} options - the repository definition\r\n    * @param {Requestable.callback} [cb] - will receive the created repository\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createRepo(options, cb) {\r\n      return this._request('POST', `/orgs/${this.__name}/repos`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * List the repositories in an organization\r\n    * @see https://developer.github.com/v3/repos/#list-organization-repositories\r\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getRepos(cb) {\r\n      let requestOptions = this._getOptionsWithDefaults({direction: 'desc'});\r\n\r\n      return this._requestAllPages(`/orgs/${this.__name}/repos`, requestOptions, cb);\r\n   }\r\n\r\n   /**\r\n    * Query if the user is a member or not\r\n    * @param {string} username - the user in question\r\n    * @param {Requestable.callback} [cb] - will receive true if the user is a member\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   isMember(username, cb) {\r\n      return this._request204or404(`/orgs/${this.__name}/members/${username}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the users who are members of the company\r\n    * @see https://developer.github.com/v3/orgs/members/#members-list\r\n    * @param {object} options - filtering options\r\n    * @param {string} [options.filter=all] - can be either `2fa_disabled` or `all`\r\n    * @param {string} [options.role=all] - can be one of: `all`, `admin`, or `member`\r\n    * @param {Requestable.callback} [cb] - will receive the list of users\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listMembers(options, cb) {\r\n      return this._request('GET', `/orgs/${this.__name}/members`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * List the Teams in the Organization\r\n    * @see https://developer.github.com/v3/orgs/teams/#list-teams\r\n    * @param {Requestable.callback} [cb] - will receive the list of teams\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getTeams(cb) {\r\n      return this._requestAllPages(`/orgs/${this.__name}/teams`, undefined, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a team\r\n    * @see https://developer.github.com/v3/orgs/teams/#create-team\r\n    * @param {object} options - Team creation parameters\r\n    * @param {string} options.name - The name of the team\r\n    * @param {string} [options.description] - Team description\r\n    * @param {string} [options.repo_names] - Repos to add the team to\r\n    * @param {string} [options.privacy=secret] - The level of privacy the team should have. Can be either one\r\n    * of: `secret`, or `closed`\r\n    * @param {Requestable.callback} [cb] - will receive the created team\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createTeam(options, cb) {\r\n      return this._request('POST', `/orgs/${this.__name}/teams`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about all projects\r\n    * @see https://developer.github.com/v3/projects/#list-organization-projects\r\n    * @param {Requestable.callback} [cb] - will receive the list of projects\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listProjects(cb) {\r\n      return this._requestAllPages(`/orgs/${this.__name}/projects`, {AcceptHeader: 'inertia-preview'}, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new project\r\n    * @see https://developer.github.com/v3/repos/projects/#create-a-project\r\n    * @param {Object} options - the description of the project\r\n    * @param {Requestable.callback} cb - will receive the newly created project\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createProject(options, cb) {\r\n      options = options || {};\r\n      options.AcceptHeader = 'inertia-preview';\r\n      return this._request('POST', `/orgs/${this.__name}/projects`, options, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = Organization;\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\n\r\n/**\r\n * Project encapsulates the functionality to create, query, and modify cards and columns.\r\n */\r\nclass Project extends Requestable {\r\n   /**\r\n    * Create a Project.\r\n    * @param {string} id - the id of the project\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(id, auth, apiBase) {\r\n      super(auth, apiBase, 'inertia-preview');\r\n      this.__id = id;\r\n   }\r\n\r\n   /**\r\n    * Get information about a project\r\n    * @see https://developer.github.com/v3/projects/#get-a-project\r\n    * @param {Requestable.callback} cb - will receive the project information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getProject(cb) {\r\n      return this._request('GET', `/projects/${this.__id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a project\r\n    * @see https://developer.github.com/v3/projects/#update-a-project\r\n    * @param {Object} options - the description of the project\r\n    * @param {Requestable.callback} cb - will receive the modified project\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateProject(options, cb) {\r\n      return this._request('PATCH', `/projects/${this.__id}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a project\r\n    * @see https://developer.github.com/v3/projects/#delete-a-project\r\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteProject(cb) {\r\n      return this._request('DELETE', `/projects/${this.__id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about all columns of a project\r\n    * @see https://developer.github.com/v3/projects/columns/#list-project-columns\r\n    * @param {Requestable.callback} [cb] - will receive the list of columns\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listProjectColumns(cb) {\r\n      return this._requestAllPages(`/projects/${this.__id}/columns`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about a column\r\n    * @see https://developer.github.com/v3/projects/columns/#get-a-project-column\r\n    * @param {string} colId - the id of the column\r\n    * @param {Requestable.callback} cb - will receive the column information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getProjectColumn(colId, cb) {\r\n      return this._request('GET', `/projects/columns/${colId}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new column\r\n    * @see https://developer.github.com/v3/projects/columns/#create-a-project-column\r\n    * @param {Object} options - the description of the column\r\n    * @param {Requestable.callback} cb - will receive the newly created column\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createProjectColumn(options, cb) {\r\n      return this._request('POST', `/projects/${this.__id}/columns`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a column\r\n    * @see https://developer.github.com/v3/projects/columns/#update-a-project-column\r\n    * @param {string} colId - the column id\r\n    * @param {Object} options - the description of the column\r\n    * @param {Requestable.callback} cb - will receive the modified column\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateProjectColumn(colId, options, cb) {\r\n      return this._request('PATCH', `/projects/columns/${colId}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a column\r\n    * @see https://developer.github.com/v3/projects/columns/#delete-a-project-column\r\n    * @param {string} colId - the column to be deleted\r\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteProjectColumn(colId, cb) {\r\n      return this._request('DELETE', `/projects/columns/${colId}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Move a column\r\n    * @see https://developer.github.com/v3/projects/columns/#move-a-project-column\r\n    * @param {string} colId - the column to be moved\r\n    * @param {string} position - can be one of first, last, or after:<column-id>,\r\n    * where <column-id> is the id value of a column in the same project.\r\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   moveProjectColumn(colId, position, cb) {\r\n      return this._request(\r\n         'POST',\r\n         `/projects/columns/${colId}/moves`,\r\n         {position: position},\r\n         cb\r\n      );\r\n   }\r\n\r\n  /**\r\n   * Get information about all cards of a project\r\n   * @see https://developer.github.com/v3/projects/cards/#list-project-cards\r\n   * @param {Requestable.callback} [cb] - will receive the list of cards\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   listProjectCards(cb) {\r\n      return this.listProjectColumns()\r\n        .then(({data}) => {\r\n           return Promise.all(data.map((column) => {\r\n              return this._requestAllPages(`/projects/columns/${column.id}/cards`, null);\r\n           }));\r\n        }).then((cardsInColumns) => {\r\n           const cards = cardsInColumns.reduce((prev, {data}) => {\r\n              prev.push(...data);\r\n              return prev;\r\n           }, []);\r\n           if (cb) {\r\n              cb(null, cards);\r\n           }\r\n           return cards;\r\n        }).catch((err) => {\r\n           if (cb) {\r\n              cb(err);\r\n              return;\r\n           }\r\n           throw err;\r\n        });\r\n   }\r\n\r\n   /**\r\n   * Get information about all cards of a column\r\n   * @see https://developer.github.com/v3/projects/cards/#list-project-cards\r\n   * @param {string} colId - the id of the column\r\n   * @param {Requestable.callback} [cb] - will receive the list of cards\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   listColumnCards(colId, cb) {\r\n      return this._requestAllPages(`/projects/columns/${colId}/cards`, null, cb);\r\n   }\r\n\r\n   /**\r\n   * Get information about a card\r\n   * @see https://developer.github.com/v3/projects/cards/#get-a-project-card\r\n   * @param {string} cardId - the id of the card\r\n   * @param {Requestable.callback} cb - will receive the card information\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   getProjectCard(cardId, cb) {\r\n      return this._request('GET', `/projects/columns/cards/${cardId}`, null, cb);\r\n   }\r\n\r\n   /**\r\n   * Create a new card\r\n   * @see https://developer.github.com/v3/projects/cards/#create-a-project-card\r\n   * @param {string} colId - the column id\r\n   * @param {Object} options - the description of the card\r\n   * @param {Requestable.callback} cb - will receive the newly created card\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   createProjectCard(colId, options, cb) {\r\n      return this._request('POST', `/projects/columns/${colId}/cards`, options, cb);\r\n   }\r\n\r\n   /**\r\n   * Edit a card\r\n   * @see https://developer.github.com/v3/projects/cards/#update-a-project-card\r\n   * @param {string} cardId - the card id\r\n   * @param {Object} options - the description of the card\r\n   * @param {Requestable.callback} cb - will receive the modified card\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   updateProjectCard(cardId, options, cb) {\r\n      return this._request('PATCH', `/projects/columns/cards/${cardId}`, options, cb);\r\n   }\r\n\r\n   /**\r\n   * Delete a card\r\n   * @see https://developer.github.com/v3/projects/cards/#delete-a-project-card\r\n   * @param {string} cardId - the card to be deleted\r\n   * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   deleteProjectCard(cardId, cb) {\r\n      return this._request('DELETE', `/projects/columns/cards/${cardId}`, null, cb);\r\n   }\r\n\r\n   /**\r\n   * Move a card\r\n   * @see https://developer.github.com/v3/projects/cards/#move-a-project-card\r\n   * @param {string} cardId - the card to be moved\r\n   * @param {string} position - can be one of top, bottom, or after:<card-id>,\r\n   * where <card-id> is the id value of a card in the same project.\r\n   * @param {string} colId - the id value of a column in the same project.\r\n   * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   moveProjectCard(cardId, position, colId, cb) {\r\n      return this._request(\r\n         'POST',\r\n         `/projects/columns/cards/${cardId}/moves`,\r\n         {position: position, column_id: colId}, // eslint-disable-line camelcase\r\n         cb\r\n      );\r\n   }\r\n}\r\n\r\nmodule.exports = Project;\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\n\r\n/**\r\n * RateLimit allows users to query their rate-limit status\r\n */\r\nclass RateLimit extends Requestable {\r\n   /**\r\n    * construct a RateLimit\r\n    * @param {Requestable.auth} auth - the credentials to authenticate to GitHub\r\n    * @param {string} [apiBase] - the base Github API URL\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   constructor(auth, apiBase) {\r\n      super(auth, apiBase);\r\n   }\r\n\r\n   /**\r\n    * Query the current rate limit\r\n    * @see https://developer.github.com/v3/rate_limit/\r\n    * @param {Requestable.callback} [cb] - will receive the rate-limit data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getRateLimit(cb) {\r\n      return this._request('GET', '/rate_limit', null, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = RateLimit;\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\nimport Utf8 from 'utf8';\r\nimport {\r\n   Base64,\r\n} from 'js-base64';\r\nimport debug from 'debug';\r\nconst log = debug('github:repository');\r\n\r\n/**\r\n * Respository encapsulates the functionality to create, query, and modify files.\r\n */\r\nclass Repository extends Requestable {\r\n   /**\r\n    * Create a Repository.\r\n    * @param {string} fullname - the full name of the repository\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(fullname, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__fullname = fullname;\r\n      this.__currentTree = {\r\n         branch: null,\r\n         sha: null,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * Get a reference\r\n    * @see https://developer.github.com/v3/git/refs/#get-a-reference\r\n    * @param {string} ref - the reference to get\r\n    * @param {Requestable.callback} [cb] - will receive the reference's refSpec or a list of refSpecs that match `ref`\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getRef(ref, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/git/refs/${ref}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a reference\r\n    * @see https://developer.github.com/v3/git/refs/#create-a-reference\r\n    * @param {Object} options - the object describing the ref\r\n    * @param {Requestable.callback} [cb] - will receive the ref\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createRef(options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/git/refs`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a reference\r\n    * @see https://developer.github.com/v3/git/refs/#delete-a-reference\r\n    * @param {string} ref - the name of the ref to delte\r\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteRef(ref, cb) {\r\n      return this._request('DELETE', `/repos/${this.__fullname}/git/refs/${ref}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a repository\r\n    * @see https://developer.github.com/v3/repos/#delete-a-repository\r\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteRepo(cb) {\r\n      return this._request('DELETE', `/repos/${this.__fullname}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the tags on a repository\r\n    * @see https://developer.github.com/v3/repos/#list-tags\r\n    * @param {Requestable.callback} [cb] - will receive the tag data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listTags(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/tags`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the open pull requests on the repository\r\n    * @see https://developer.github.com/v3/pulls/#list-pull-requests\r\n    * @param {Object} options - options to filter the search\r\n    * @param {Requestable.callback} [cb] - will receive the list of PRs\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listPullRequests(options, cb) {\r\n      options = options || {};\r\n      return this._request('GET', `/repos/${this.__fullname}/pulls`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about a specific pull request\r\n    * @see https://developer.github.com/v3/pulls/#get-a-single-pull-request\r\n    * @param {number} number - the PR you wish to fetch\r\n    * @param {Requestable.callback} [cb] - will receive the PR from the API\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getPullRequest(number, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/pulls/${number}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the files of a specific pull request\r\n    * @see https://developer.github.com/v3/pulls/#list-pull-requests-files\r\n    * @param {number|string} number - the PR you wish to fetch\r\n    * @param {Requestable.callback} [cb] - will receive the list of files from the API\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listPullRequestFiles(number, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/pulls/${number}/files`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Compare two branches/commits/repositories\r\n    * @see https://developer.github.com/v3/repos/commits/#compare-two-commits\r\n    * @param {string} base - the base commit\r\n    * @param {string} head - the head commit\r\n    * @param {Requestable.callback} cb - will receive the comparison\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   compareBranches(base, head, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/compare/${base}...${head}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List all the branches for the repository\r\n    * @see https://developer.github.com/v3/repos/#list-branches\r\n    * @param {Requestable.callback} cb - will receive the list of branches\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listBranches(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/branches`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a raw blob from the repository\r\n    * @see https://developer.github.com/v3/git/blobs/#get-a-blob\r\n    * @param {string} sha - the sha of the blob to fetch\r\n    * @param {Requestable.callback} cb - will receive the blob from the API\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getBlob(sha, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/git/blobs/${sha}`, null, cb, 'raw');\r\n   }\r\n\r\n   /**\r\n    * Get a single branch\r\n    * @see https://developer.github.com/v3/repos/branches/#get-branch\r\n    * @param {string} branch - the name of the branch to fetch\r\n    * @param {Requestable.callback} cb - will receive the branch from the API\r\n    * @returns {Promise} - the promise for the http request\r\n    */\r\n   getBranch(branch, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/branches/${branch}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a commit from the repository\r\n    * @see https://developer.github.com/v3/repos/commits/#get-a-single-commit\r\n    * @param {string} sha - the sha for the commit to fetch\r\n    * @param {Requestable.callback} cb - will receive the commit data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getCommit(sha, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/git/commits/${sha}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the commits on a repository, optionally filtering by path, author or time range\r\n    * @see https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository\r\n    * @param {Object} [options] - the filtering options for commits\r\n    * @param {string} [options.sha] - the SHA or branch to start from\r\n    * @param {string} [options.path] - the path to search on\r\n    * @param {string} [options.author] - the commit author\r\n    * @param {(Date|string)} [options.since] - only commits after this date will be returned\r\n    * @param {(Date|string)} [options.until] - only commits before this date will be returned\r\n    * @param {Requestable.callback} cb - will receive the list of commits found matching the criteria\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listCommits(options, cb) {\r\n      options = options || {};\r\n\r\n      options.since = this._dateToISO(options.since);\r\n      options.until = this._dateToISO(options.until);\r\n\r\n      return this._request('GET', `/repos/${this.__fullname}/commits`, options, cb);\r\n   }\r\n\r\n    /**\r\n     * Gets a single commit information for a repository\r\n     * @see https://developer.github.com/v3/repos/commits/#get-a-single-commit\r\n     * @param {string} ref - the reference for the commit-ish\r\n     * @param {Requestable.callback} cb - will receive the commit information\r\n     * @return {Promise} - the promise for the http request\r\n     */\r\n   getSingleCommit(ref, cb) {\r\n      ref = ref || '';\r\n      return this._request('GET', `/repos/${this.__fullname}/commits/${ref}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get tha sha for a particular object in the repository. This is a convenience function\r\n    * @see https://developer.github.com/v3/repos/contents/#get-contents\r\n    * @param {string} [branch] - the branch to look in, or the repository's default branch if omitted\r\n    * @param {string} path - the path of the file or directory\r\n    * @param {Requestable.callback} cb - will receive a description of the requested object, including a `SHA` property\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getSha(branch, path, cb) {\r\n      branch = branch ? `?ref=${branch}` : '';\r\n      return this._request('GET', `/repos/${this.__fullname}/contents/${path}${branch}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the commit statuses for a particular sha, branch, or tag\r\n    * @see https://developer.github.com/v3/repos/statuses/#list-statuses-for-a-specific-ref\r\n    * @param {string} sha - the sha, branch, or tag to get statuses for\r\n    * @param {Requestable.callback} cb - will receive the list of statuses\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listStatuses(sha, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/commits/${sha}/statuses`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a description of a git tree\r\n    * @see https://developer.github.com/v3/git/trees/#get-a-tree\r\n    * @param {string} treeSHA - the SHA of the tree to fetch\r\n    * @param {Requestable.callback} cb - will receive the callback data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getTree(treeSHA, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/git/trees/${treeSHA}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a blob\r\n    * @see https://developer.github.com/v3/git/blobs/#create-a-blob\r\n    * @param {(string|Buffer|Blob)} content - the content to add to the repository\r\n    * @param {Requestable.callback} cb - will receive the details of the created blob\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createBlob(content, cb) {\r\n      let postBody = this._getContentObject(content);\r\n\r\n      log('sending content', postBody);\r\n      return this._request('POST', `/repos/${this.__fullname}/git/blobs`, postBody, cb);\r\n   }\r\n\r\n   /**\r\n    * Get the object that represents the provided content\r\n    * @param {string|Buffer|Blob} content - the content to send to the server\r\n    * @return {Object} the representation of `content` for the GitHub API\r\n    */\r\n   _getContentObject(content) {\r\n      if (typeof content === 'string') {\r\n         log('contet is a string');\r\n         return {\r\n            content: Utf8.encode(content),\r\n            encoding: 'utf-8',\r\n         };\r\n\r\n      } else if (typeof Buffer !== 'undefined' && content instanceof Buffer) {\r\n         log('We appear to be in Node');\r\n         return {\r\n            content: content.toString('base64'),\r\n            encoding: 'base64',\r\n         };\r\n\r\n      } else if (typeof Blob !== 'undefined' && content instanceof Blob) {\r\n         log('We appear to be in the browser');\r\n         return {\r\n            content: Base64.encode(content),\r\n            encoding: 'base64',\r\n         };\r\n\r\n      } else { // eslint-disable-line\r\n         log(`Not sure what this content is: ${typeof content}, ${JSON.stringify(content)}`);\r\n         throw new Error('Unknown content passed to postBlob. Must be string or Buffer (node) or Blob (web)');\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Update a tree in Git\r\n    * @see https://developer.github.com/v3/git/trees/#create-a-tree\r\n    * @param {string} baseTreeSHA - the SHA of the tree to update\r\n    * @param {string} path - the path for the new file\r\n    * @param {string} blobSHA - the SHA for the blob to put at `path`\r\n    * @param {Requestable.callback} cb - will receive the new tree that is created\r\n    * @return {Promise} - the promise for the http request\r\n    * @deprecated use {@link Repository#createTree} instead\r\n    */\r\n   updateTree(baseTreeSHA, path, blobSHA, cb) {\r\n      let newTree = {\r\n         base_tree: baseTreeSHA, // eslint-disable-line\r\n         tree: [{\r\n            path: path,\r\n            sha: blobSHA,\r\n            mode: '100644',\r\n            type: 'blob',\r\n         }],\r\n      };\r\n\r\n      return this._request('POST', `/repos/${this.__fullname}/git/trees`, newTree, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new tree in git\r\n    * @see https://developer.github.com/v3/git/trees/#create-a-tree\r\n    * @param {Object} tree - the tree to create\r\n    * @param {string} baseSHA - the root sha of the tree\r\n    * @param {Requestable.callback} cb - will receive the new tree that is created\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createTree(tree, baseSHA, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/git/trees`, {\r\n         tree,\r\n         base_tree: baseSHA, // eslint-disable-line camelcase\r\n      }, cb);\r\n   }\r\n\r\n   /**\r\n    * Add a commit to the repository\r\n    * @see https://developer.github.com/v3/git/commits/#create-a-commit\r\n    * @param {string} parent - the SHA of the parent commit\r\n    * @param {string} tree - the SHA of the tree for this commit\r\n    * @param {string} message - the commit message\r\n    * @param {Requestable.callback} cb - will receive the commit that is created\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   commit(parent, tree, message, cb) {\r\n      let data = {\r\n         message,\r\n         tree,\r\n         parents: [parent],\r\n      };\r\n\r\n      return this._request('POST', `/repos/${this.__fullname}/git/commits`, data, cb)\r\n         .then((response) => {\r\n            this.__currentTree.sha = response.data.sha; // Update latest commit\r\n            return response;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Update a ref\r\n    * @see https://developer.github.com/v3/git/refs/#update-a-reference\r\n    * @param {string} ref - the ref to update\r\n    * @param {string} commitSHA - the SHA to point the reference to\r\n    * @param {boolean} force - indicates whether to force or ensure a fast-forward update\r\n    * @param {Requestable.callback} cb - will receive the updated ref back\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateHead(ref, commitSHA, force, cb) {\r\n      return this._request('PATCH', `/repos/${this.__fullname}/git/refs/${ref}`, {\r\n         sha: commitSHA,\r\n         force: force,\r\n      }, cb);\r\n   }\r\n\r\n   /**\r\n    * Update commit status\r\n    * @see https://developer.github.com/v3/repos/statuses/\r\n    * @param {string} commitSHA - the SHA of the commit that should be updated\r\n    * @param {object} options - Commit status parameters\r\n    * @param {string} options.state - The state of the status. Can be one of: pending, success, error, or failure.\r\n    * @param {string} [options.target_url] - The target URL to associate with this status.\r\n    * @param {string} [options.description] - A short description of the status.\r\n    * @param {string} [options.context] - A string label to differentiate this status among CI systems.\r\n    * @param {Requestable.callback} cb - will receive the updated commit back\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateStatus(commitSHA, options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/statuses/${commitSHA}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Update repository information\r\n    * @see https://developer.github.com/v3/repos/#edit\r\n    * @param {object} options - New parameters that will be set to the repository\r\n    * @param {string} options.name - Name of the repository\r\n    * @param {string} [options.description] - A short description of the repository\r\n    * @param {string} [options.homepage] - A URL with more information about the repository\r\n    * @param {boolean} [options.private] - Either true to make the repository private, or false to make it public.\r\n    * @param {boolean} [options.has_issues] - Either true to enable issues for this repository, false to disable them.\r\n    * @param {boolean} [options.has_wiki] - Either true to enable the wiki for this repository, false to disable it.\r\n    * @param {boolean} [options.has_downloads] - Either true to enable downloads, false to disable them.\r\n    * @param {string} [options.default_branch] - Updates the default branch for this repository.\r\n    * @param {Requestable.callback} cb - will receive the updated repository back\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateRepository(options, cb) {\r\n      return this._request('PATCH', `/repos/${this.__fullname}`, options, cb);\r\n   }\r\n\r\n  /**\r\n    * Get information about the repository\r\n    * @see https://developer.github.com/v3/repos/#get\r\n    * @param {Requestable.callback} cb - will receive the information about the repository\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getDetails(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the contributors to the repository\r\n    * @see https://developer.github.com/v3/repos/#list-contributors\r\n    * @param {Requestable.callback} cb - will receive the list of contributors\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getContributors(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/contributors`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the contributor stats to the repository\r\n    * @see https://developer.github.com/v3/repos/#list-contributors\r\n    * @param {Requestable.callback} cb - will receive the list of contributors\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getContributorStats(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/stats/contributors`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the users who are collaborators on the repository. The currently authenticated user must have\r\n    * push access to use this method\r\n    * @see https://developer.github.com/v3/repos/collaborators/#list-collaborators\r\n    * @param {Requestable.callback} cb - will receive the list of collaborators\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getCollaborators(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/collaborators`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Check if a user is a collaborator on the repository\r\n    * @see https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-collaborator\r\n    * @param {string} username - the user to check\r\n    * @param {Requestable.callback} cb - will receive true if the user is a collaborator and false if they are not\r\n    * @return {Promise} - the promise for the http request {Boolean} [description]\r\n    */\r\n   isCollaborator(username, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/collaborators/${username}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get the contents of a repository\r\n    * @see https://developer.github.com/v3/repos/contents/#get-contents\r\n    * @param {string} ref - the ref to check\r\n    * @param {string} path - the path containing the content to fetch\r\n    * @param {boolean} raw - `true` if the results should be returned raw instead of GitHub's normalized format\r\n    * @param {Requestable.callback} cb - will receive the fetched data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getContents(ref, path, raw, cb) {\r\n      path = path ? `${encodeURI(path)}` : '';\r\n      return this._request('GET', `/repos/${this.__fullname}/contents/${path}`, {\r\n         ref,\r\n      }, cb, raw);\r\n   }\r\n\r\n   /**\r\n    * Get the README of a repository\r\n    * @see https://developer.github.com/v3/repos/contents/#get-the-readme\r\n    * @param {string} ref - the ref to check\r\n    * @param {boolean} raw - `true` if the results should be returned raw instead of GitHub's normalized format\r\n    * @param {Requestable.callback} cb - will receive the fetched data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getReadme(ref, raw, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/readme`, {\r\n         ref,\r\n      }, cb, raw);\r\n   }\r\n\r\n   /**\r\n    * Fork a repository\r\n    * @see https://developer.github.com/v3/repos/forks/#create-a-fork\r\n    * @param {Requestable.callback} cb - will receive the information about the newly created fork\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   fork(cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/forks`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List a repository's forks\r\n    * @see https://developer.github.com/v3/repos/forks/#list-forks\r\n    * @param {Requestable.callback} cb - will receive the list of repositories forked from this one\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listForks(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/forks`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new branch from an existing branch.\r\n    * @param {string} [oldBranch=master] - the name of the existing branch\r\n    * @param {string} newBranch - the name of the new branch\r\n    * @param {Requestable.callback} cb - will receive the commit data for the head of the new branch\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createBranch(oldBranch, newBranch, cb) {\r\n      if (typeof newBranch === 'function') {\r\n         cb = newBranch;\r\n         newBranch = oldBranch;\r\n         oldBranch = 'master';\r\n      }\r\n\r\n      return this.getRef(`heads/${oldBranch}`)\r\n         .then((response) => {\r\n            let sha = response.data.object.sha;\r\n            return this.createRef({\r\n               sha,\r\n               ref: `refs/heads/${newBranch}`,\r\n            }, cb);\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Create a new pull request\r\n    * @see https://developer.github.com/v3/pulls/#create-a-pull-request\r\n    * @param {Object} options - the pull request description\r\n    * @param {Requestable.callback} cb - will receive the new pull request\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createPullRequest(options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/pulls`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Update a pull request\r\n    * @see https://developer.github.com/v3/pulls/#update-a-pull-request\r\n    * @param {number|string} number - the number of the pull request to update\r\n    * @param {Object} options - the pull request description\r\n    * @param {Requestable.callback} [cb] - will receive the pull request information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updatePullRequest(number, options, cb) {\r\n      return this._request('PATCH', `/repos/${this.__fullname}/pulls/${number}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * List the hooks for the repository\r\n    * @see https://developer.github.com/v3/repos/hooks/#list-hooks\r\n    * @param {Requestable.callback} cb - will receive the list of hooks\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listHooks(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/hooks`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a hook for the repository\r\n    * @see https://developer.github.com/v3/repos/hooks/#get-single-hook\r\n    * @param {number} id - the id of the webook\r\n    * @param {Requestable.callback} cb - will receive the details of the webook\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getHook(id, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/hooks/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Add a new hook to the repository\r\n    * @see https://developer.github.com/v3/repos/hooks/#create-a-hook\r\n    * @param {Object} options - the configuration describing the new hook\r\n    * @param {Requestable.callback} cb - will receive the new webhook\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createHook(options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/hooks`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit an existing webhook\r\n    * @see https://developer.github.com/v3/repos/hooks/#edit-a-hook\r\n    * @param {number} id - the id of the webhook\r\n    * @param {Object} options - the new description of the webhook\r\n    * @param {Requestable.callback} cb - will receive the updated webhook\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateHook(id, options, cb) {\r\n      return this._request('PATCH', `/repos/${this.__fullname}/hooks/${id}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a webhook\r\n    * @see https://developer.github.com/v3/repos/hooks/#delete-a-hook\r\n    * @param {number} id - the id of the webhook to be deleted\r\n    * @param {Requestable.callback} cb - will receive true if the call is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteHook(id, cb) {\r\n      return this._request('DELETE', `/repos/${this.__fullname}/hooks/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the deploy keys for the repository\r\n    * @see https://developer.github.com/v3/repos/keys/#list-deploy-keys\r\n    * @param {Requestable.callback} cb - will receive the list of deploy keys\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listKeys(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/keys`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a deploy key for the repository\r\n    * @see https://developer.github.com/v3/repos/keys/#get-a-deploy-key\r\n    * @param {number} id - the id of the deploy key\r\n    * @param {Requestable.callback} cb - will receive the details of the deploy key\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getKey(id, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/keys/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Add a new deploy key to the repository\r\n    * @see https://developer.github.com/v3/repos/keys/#add-a-new-deploy-key\r\n    * @param {Object} options - the configuration describing the new deploy key\r\n    * @param {Requestable.callback} cb - will receive the new deploy key\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createKey(options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/keys`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a deploy key\r\n    * @see https://developer.github.com/v3/repos/keys/#remove-a-deploy-key\r\n    * @param {number} id - the id of the deploy key to be deleted\r\n    * @param {Requestable.callback} cb - will receive true if the call is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteKey(id, cb) {\r\n      return this._request('DELETE', `/repos/${this.__fullname}/keys/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a file from a branch\r\n    * @see https://developer.github.com/v3/repos/contents/#delete-a-file\r\n    * @param {string} branch - the branch to delete from, or the default branch if not specified\r\n    * @param {string} path - the path of the file to remove\r\n    * @param {Requestable.callback} cb - will receive the commit in which the delete occurred\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteFile(branch, path, cb) {\r\n      return this.getSha(branch, path)\r\n         .then((response) => {\r\n            const deleteCommit = {\r\n               message: `Delete the file at '${path}'`,\r\n               sha: response.data.sha,\r\n               branch,\r\n            };\r\n            return this._request('DELETE', `/repos/${this.__fullname}/contents/${path}`, deleteCommit, cb);\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Change all references in a repo from oldPath to new_path\r\n    * @param {string} branch - the branch to carry out the reference change, or the default branch if not specified\r\n    * @param {string} oldPath - original path\r\n    * @param {string} newPath - new reference path\r\n    * @param {Requestable.callback} cb - will receive the commit in which the move occurred\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   move(branch, oldPath, newPath, cb) {\r\n      let oldSha;\r\n      return this.getRef(`heads/${branch}`)\r\n         .then(({data: {object}}) => this.getTree(`${object.sha}?recursive=true`))\r\n         .then(({data: {tree, sha}}) => {\r\n            oldSha = sha;\r\n            let newTree = tree.map((ref) => {\r\n               if (ref.path === oldPath) {\r\n                  ref.path = newPath;\r\n               }\r\n               if (ref.type === 'tree') {\r\n                  delete ref.sha;\r\n               }\r\n               return ref;\r\n            });\r\n            return this.createTree(newTree);\r\n         })\r\n         .then(({data: tree}) => this.commit(oldSha, tree.sha, `Renamed '${oldPath}' to '${newPath}'`))\r\n         .then(({data: commit}) => this.updateHead(`heads/${branch}`, commit.sha, true, cb));\r\n   }\r\n\r\n   /**\r\n    * Write a file to the repository\r\n    * @see https://developer.github.com/v3/repos/contents/#update-a-file\r\n    * @param {string} branch - the name of the branch\r\n    * @param {string} path - the path for the file\r\n    * @param {string} content - the contents of the file\r\n    * @param {string} message - the commit message\r\n    * @param {Object} [options] - commit options\r\n    * @param {Object} [options.author] - the author of the commit\r\n    * @param {Object} [options.commiter] - the committer\r\n    * @param {boolean} [options.encode] - true if the content should be base64 encoded\r\n    * @param {Requestable.callback} cb - will receive the new commit\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   writeFile(branch, path, content, message, options, cb) {\r\n      if (typeof options === 'function') {\r\n         cb = options;\r\n         options = {};\r\n      }\r\n      let filePath = path ? encodeURI(path) : '';\r\n      let shouldEncode = options.encode !== false;\r\n      let commit = {\r\n         branch,\r\n         message,\r\n         author: options.author,\r\n         committer: options.committer,\r\n         content: shouldEncode ? Base64.encode(content) : content,\r\n      };\r\n\r\n      return this.getSha(branch, filePath)\r\n         .then((response) => {\r\n            commit.sha = response.data.sha;\r\n            return this._request('PUT', `/repos/${this.__fullname}/contents/${filePath}`, commit, cb);\r\n         }, () => {\r\n            return this._request('PUT', `/repos/${this.__fullname}/contents/${filePath}`, commit, cb);\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Check if a repository is starred by you\r\n    * @see https://developer.github.com/v3/activity/starring/#check-if-you-are-starring-a-repository\r\n    * @param {Requestable.callback} cb - will receive true if the repository is starred and false if the repository\r\n    *                                  is not starred\r\n    * @return {Promise} - the promise for the http request {Boolean} [description]\r\n    */\r\n   isStarred(cb) {\r\n      return this._request204or404(`/user/starred/${this.__fullname}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Star a repository\r\n    * @see https://developer.github.com/v3/activity/starring/#star-a-repository\r\n    * @param {Requestable.callback} cb - will receive true if the repository is starred\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   star(cb) {\r\n      return this._request('PUT', `/user/starred/${this.__fullname}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Unstar a repository\r\n    * @see https://developer.github.com/v3/activity/starring/#unstar-a-repository\r\n    * @param {Requestable.callback} cb - will receive true if the repository is unstarred\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   unstar(cb) {\r\n      return this._request('DELETE', `/user/starred/${this.__fullname}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new release\r\n    * @see https://developer.github.com/v3/repos/releases/#create-a-release\r\n    * @param {Object} options - the description of the release\r\n    * @param {Requestable.callback} cb - will receive the newly created release\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createRelease(options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/releases`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a release\r\n    * @see https://developer.github.com/v3/repos/releases/#edit-a-release\r\n    * @param {string} id - the id of the release\r\n    * @param {Object} options - the description of the release\r\n    * @param {Requestable.callback} cb - will receive the modified release\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateRelease(id, options, cb) {\r\n      return this._request('PATCH', `/repos/${this.__fullname}/releases/${id}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about all releases\r\n    * @see https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository\r\n    * @param {Requestable.callback} cb - will receive the release information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listReleases(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/releases`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about a release\r\n    * @see https://developer.github.com/v3/repos/releases/#get-a-single-release\r\n    * @param {string} id - the id of the release\r\n    * @param {Requestable.callback} cb - will receive the release information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getRelease(id, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/releases/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a release\r\n    * @see https://developer.github.com/v3/repos/releases/#delete-a-release\r\n    * @param {string} id - the release to be deleted\r\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteRelease(id, cb) {\r\n      return this._request('DELETE', `/repos/${this.__fullname}/releases/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Merge a pull request\r\n    * @see https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button\r\n    * @param {number|string} number - the number of the pull request to merge\r\n    * @param {Object} options - the merge options for the pull request\r\n    * @param {Requestable.callback} [cb] - will receive the merge information if the operation is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   mergePullRequest(number, options, cb) {\r\n      return this._request('PUT', `/repos/${this.__fullname}/pulls/${number}/merge`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about all projects\r\n    * @see https://developer.github.com/v3/projects/#list-repository-projects\r\n    * @param {Requestable.callback} [cb] - will receive the list of projects\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listProjects(cb) {\r\n      return this._requestAllPages(`/repos/${this.__fullname}/projects`, {AcceptHeader: 'inertia-preview'}, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new project\r\n    * @see https://developer.github.com/v3/projects/#create-a-repository-project\r\n    * @param {Object} options - the description of the project\r\n    * @param {Requestable.callback} cb - will receive the newly created project\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createProject(options, cb) {\r\n      options = options || {};\r\n      options.AcceptHeader = 'inertia-preview';\r\n      return this._request('POST', `/repos/${this.__fullname}/projects`, options, cb);\r\n   }\r\n\r\n}\r\n\r\nmodule.exports = Repository;\r\n","/**\r\n * @file\r\n * @copyright  2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport axios from 'axios';\r\nimport debug from 'debug';\r\nimport {Base64} from 'js-base64';\r\n\r\nconst log = debug('github:request');\r\n\r\n/**\r\n * The error structure returned when a network call fails\r\n */\r\nclass ResponseError extends Error {\r\n   /**\r\n    * Construct a new ResponseError\r\n    * @param {string} message - an message to return instead of the the default error message\r\n    * @param {string} path - the requested path\r\n    * @param {Object} response - the object returned by Axios\r\n    */\r\n   constructor(message, path, response) {\r\n      super(message);\r\n      this.path = path;\r\n      this.request = response.config;\r\n      this.response = (response || {}).response || response;\r\n      this.status = response.status;\r\n   }\r\n}\r\n\r\n/**\r\n * Requestable wraps the logic for making http requests to the API\r\n */\r\nclass Requestable {\r\n   /**\r\n    * Either a username and password or an oauth token for Github\r\n    * @typedef {Object} Requestable.auth\r\n    * @prop {string} [username] - the Github username\r\n    * @prop {string} [password] - the user's password\r\n    * @prop {token} [token] - an OAuth token\r\n    */\r\n   /**\r\n    * Initialize the http internals.\r\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to Github. If auth is\r\n    *                                  not provided request will be made unauthenticated\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    * @param {string} [AcceptHeader=v3] - the accept header for the requests\r\n    */\r\n   constructor(auth, apiBase, AcceptHeader) {\r\n      this.__apiBase = apiBase || 'https://api.github.com';\r\n      this.__auth = {\r\n         token: auth.token,\r\n         username: auth.username,\r\n         password: auth.password,\r\n      };\r\n      this.__AcceptHeader = AcceptHeader || 'v3';\r\n\r\n      if (auth.token) {\r\n         this.__authorizationHeader = 'token ' + auth.token;\r\n      } else if (auth.username && auth.password) {\r\n         this.__authorizationHeader = 'Basic ' + Base64.encode(auth.username + ':' + auth.password);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Compute the URL to use to make a request.\r\n    * @private\r\n    * @param {string} path - either a URL relative to the API base or an absolute URL\r\n    * @return {string} - the URL to use\r\n    */\r\n   __getURL(path) {\r\n      let url = path;\r\n\r\n      if (path.indexOf('//') === -1) {\r\n         url = this.__apiBase + path;\r\n      }\r\n\r\n      let newCacheBuster = 'timestamp=' + new Date().getTime();\r\n      return url.replace(/(timestamp=\\d+)/, newCacheBuster);\r\n   }\r\n\r\n   /**\r\n    * Compute the headers required for an API request.\r\n    * @private\r\n    * @param {boolean} raw - if the request should be treated as JSON or as a raw request\r\n    * @param {string} AcceptHeader - the accept header for the request\r\n    * @return {Object} - the headers to use in the request\r\n    */\r\n   __getRequestHeaders(raw, AcceptHeader) {\r\n      let headers = {\r\n         'Content-Type': 'application/json;charset=UTF-8',\r\n         'Accept': 'application/vnd.github.' + (AcceptHeader || this.__AcceptHeader),\r\n      };\r\n\r\n      if (raw) {\r\n         headers.Accept += '.raw';\r\n      }\r\n      headers.Accept += '+json';\r\n\r\n      if (this.__authorizationHeader) {\r\n         headers.Authorization = this.__authorizationHeader;\r\n      }\r\n\r\n      return headers;\r\n   }\r\n\r\n   /**\r\n    * Sets the default options for API requests\r\n    * @protected\r\n    * @param {Object} [requestOptions={}] - the current options for the request\r\n    * @return {Object} - the options to pass to the request\r\n    */\r\n   _getOptionsWithDefaults(requestOptions = {}) {\r\n      if (!(requestOptions.visibility || requestOptions.affiliation)) {\r\n         requestOptions.type = requestOptions.type || 'all';\r\n      }\r\n      requestOptions.sort = requestOptions.sort || 'updated';\r\n      requestOptions.per_page = requestOptions.per_page || '100'; // eslint-disable-line\r\n\r\n      return requestOptions;\r\n   }\r\n\r\n   /**\r\n    * if a `Date` is passed to this function it will be converted to an ISO string\r\n    * @param {*} date - the object to attempt to cooerce into an ISO date string\r\n    * @return {string} - the ISO representation of `date` or whatever was passed in if it was not a date\r\n    */\r\n   _dateToISO(date) {\r\n      if (date && (date instanceof Date)) {\r\n         date = date.toISOString();\r\n      }\r\n\r\n      return date;\r\n   }\r\n\r\n   /**\r\n    * A function that receives the result of the API request.\r\n    * @callback Requestable.callback\r\n    * @param {Requestable.Error} error - the error returned by the API or `null`\r\n    * @param {(Object|true)} result - the data returned by the API or `true` if the API returns `204 No Content`\r\n    * @param {Object} request - the raw {@linkcode https://github.com/mzabriskie/axios#response-schema Response}\r\n    */\r\n   /**\r\n    * Make a request.\r\n    * @param {string} method - the method for the request (GET, PUT, POST, DELETE)\r\n    * @param {string} path - the path for the request\r\n    * @param {*} [data] - the data to send to the server. For HTTP methods that don't have a body the data\r\n    *                   will be sent as query parameters\r\n    * @param {Requestable.callback} [cb] - the callback for the request\r\n    * @param {boolean} [raw=false] - if the request should be sent as raw. If this is a falsy value then the\r\n    *                              request will be made as JSON\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   _request(method, path, data, cb, raw) {\r\n      const url = this.__getURL(path);\r\n\r\n      const AcceptHeader = (data || {}).AcceptHeader;\r\n      if (AcceptHeader) {\r\n         delete data.AcceptHeader;\r\n      }\r\n      const headers = this.__getRequestHeaders(raw, AcceptHeader);\r\n\r\n      let queryParams = {};\r\n\r\n      const shouldUseDataAsParams = data && (typeof data === 'object') && methodHasNoBody(method);\r\n      if (shouldUseDataAsParams) {\r\n         queryParams = data;\r\n         data = undefined;\r\n      }\r\n\r\n      const config = {\r\n         url: url,\r\n         method: method,\r\n         headers: headers,\r\n         params: queryParams,\r\n         data: data,\r\n         responseType: raw ? 'text' : 'json',\r\n      };\r\n\r\n      log(`${config.method} to ${config.url}`);\r\n      const requestPromise = axios(config).catch(callbackErrorOrThrow(cb, path));\r\n\r\n      if (cb) {\r\n         requestPromise.then((response) => {\r\n            if (response.data && Object.keys(response.data).length > 0) {\r\n               // When data has results\r\n               cb(null, response.data, response);\r\n            } else if (config.method !== 'GET' && Object.keys(response.data).length < 1) {\r\n               // True when successful submit a request and receive a empty object\r\n               cb(null, (response.status < 300), response);\r\n            } else {\r\n               cb(null, response.data, response);\r\n            }\r\n         });\r\n      }\r\n\r\n      return requestPromise;\r\n   }\r\n\r\n   /**\r\n    * Make a request to an endpoint the returns 204 when true and 404 when false\r\n    * @param {string} path - the path to request\r\n    * @param {Object} data - any query parameters for the request\r\n    * @param {Requestable.callback} cb - the callback that will receive `true` or `false`\r\n    * @param {method} [method=GET] - HTTP Method to use\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   _request204or404(path, data, cb, method = 'GET') {\r\n      return this._request(method, path, data)\r\n         .then(function success(response) {\r\n            if (cb) {\r\n               cb(null, true, response);\r\n            }\r\n            return true;\r\n         }, function failure(response) {\r\n            if (response.response.status === 404) {\r\n               if (cb) {\r\n                  cb(null, false, response);\r\n               }\r\n               return false;\r\n            }\r\n\r\n            if (cb) {\r\n               cb(response);\r\n            }\r\n            throw response;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Make a request and fetch all the available data. Github will paginate responses so for queries\r\n    * that might span multiple pages this method is preferred to {@link Requestable#request}\r\n    * @param {string} path - the path to request\r\n    * @param {Object} options - the query parameters to include\r\n    * @param {Requestable.callback} [cb] - the function to receive the data. The returned data will always be an array.\r\n    * @param {Object[]} results - the partial results. This argument is intended for interal use only.\r\n    * @return {Promise} - a promise which will resolve when all pages have been fetched\r\n    * @deprecated This will be folded into {@link Requestable#_request} in the 2.0 release.\r\n    */\r\n   _requestAllPages(path, options, cb, results) {\r\n      results = results || [];\r\n\r\n      return this._request('GET', path, options)\r\n         .then((response) => {\r\n            let thisGroup;\r\n            if (response.data instanceof Array) {\r\n               thisGroup = response.data;\r\n            } else if (response.data.items instanceof Array) {\r\n               thisGroup = response.data.items;\r\n            } else {\r\n               let message = `cannot figure out how to append ${response.data} to the result set`;\r\n               throw new ResponseError(message, path, response);\r\n            }\r\n            results.push(...thisGroup);\r\n\r\n            const nextUrl = getNextPage(response.headers.link);\r\n            if (nextUrl && typeof options.page !== 'number') {\r\n               log(`getting next page: ${nextUrl}`);\r\n               return this._requestAllPages(nextUrl, options, cb, results);\r\n            }\r\n\r\n            if (cb) {\r\n               cb(null, results, response);\r\n            }\r\n\r\n            response.data = results;\r\n            return response;\r\n         }).catch(callbackErrorOrThrow(cb, path));\r\n   }\r\n}\r\n\r\nmodule.exports = Requestable;\r\n\r\n// ////////////////////////// //\r\n//  Private helper functions  //\r\n// ////////////////////////// //\r\nconst METHODS_WITH_NO_BODY = ['GET', 'HEAD', 'DELETE'];\r\nfunction methodHasNoBody(method) {\r\n   return METHODS_WITH_NO_BODY.indexOf(method) !== -1;\r\n}\r\n\r\nfunction getNextPage(linksHeader = '') {\r\n   const links = linksHeader.split(/\\s*,\\s*/); // splits and strips the urls\r\n   return links.reduce(function(nextUrl, link) {\r\n      if (link.search(/rel=\"next\"/) !== -1) {\r\n         return (link.match(/<(.*)>/) || [])[1];\r\n      }\r\n\r\n      return nextUrl;\r\n   }, undefined);\r\n}\r\n\r\nfunction callbackErrorOrThrow(cb, path) {\r\n   return function handler(object) {\r\n      let error;\r\n      if (object.hasOwnProperty('config')) {\r\n         const {response: {status, statusText}, config: {method, url}} = object;\r\n         let message = (`${status} error making request ${method} ${url}: \"${statusText}\"`);\r\n         error = new ResponseError(message, path, object);\r\n         log(`${message} ${JSON.stringify(object.data)}`);\r\n      } else {\r\n         error = object;\r\n      }\r\n      if (cb) {\r\n         log('going to error callback');\r\n         cb(error);\r\n      } else {\r\n         log('throwing error');\r\n         throw error;\r\n      }\r\n   };\r\n}\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\nimport debug from 'debug';\r\nconst log = debug('github:search');\r\n\r\n/**\r\n * Wrap the Search API\r\n */\r\nclass Search extends Requestable {\r\n   /**\r\n    * Create a Search\r\n    * @param {Object} defaults - defaults for the search\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(defaults, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__defaults = this._getOptionsWithDefaults(defaults);\r\n   }\r\n\r\n   /**\r\n    * Available search options\r\n    * @see https://developer.github.com/v3/search/#parameters\r\n    * @typedef {Object} Search.Params\r\n    * @param {string} q - the query to make\r\n    * @param {string} sort - the sort field, one of `stars`, `forks`, or `updated`.\r\n    *                      Default is [best match](https://developer.github.com/v3/search/#ranking-search-results)\r\n    * @param {string} order - the ordering, either `asc` or `desc`\r\n    */\r\n   /**\r\n    * Perform a search on the GitHub API\r\n    * @private\r\n    * @param {string} path - the scope of the search\r\n    * @param {Search.Params} [withOptions] - additional parameters for the search\r\n    * @param {Requestable.callback} [cb] - will receive the results of the search\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   _search(path, withOptions = {}, cb = undefined) {\r\n      let requestOptions = {};\r\n      Object.keys(this.__defaults).forEach((prop) => {\r\n         requestOptions[prop] = this.__defaults[prop];\r\n      });\r\n      Object.keys(withOptions).forEach((prop) => {\r\n         requestOptions[prop] = withOptions[prop];\r\n      });\r\n\r\n      log(`searching ${path} with options:`, requestOptions);\r\n      return this._requestAllPages(`/search/${path}`, requestOptions, cb);\r\n   }\r\n\r\n   /**\r\n    * Search for repositories\r\n    * @see https://developer.github.com/v3/search/#search-repositories\r\n    * @param {Search.Params} [options] - additional parameters for the search\r\n    * @param {Requestable.callback} [cb] - will receive the results of the search\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   forRepositories(options, cb) {\r\n      return this._search('repositories', options, cb);\r\n   }\r\n\r\n   /**\r\n    * Search for code\r\n    * @see https://developer.github.com/v3/search/#search-code\r\n    * @param {Search.Params} [options] - additional parameters for the search\r\n    * @param {Requestable.callback} [cb] - will receive the results of the search\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   forCode(options, cb) {\r\n      return this._search('code', options, cb);\r\n   }\r\n\r\n   /**\r\n    * Search for issues\r\n    * @see https://developer.github.com/v3/search/#search-issues\r\n    * @param {Search.Params} [options] - additional parameters for the search\r\n    * @param {Requestable.callback} [cb] - will receive the results of the search\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   forIssues(options, cb) {\r\n      return this._search('issues', options, cb);\r\n   }\r\n\r\n   /**\r\n    * Search for users\r\n    * @see https://developer.github.com/v3/search/#search-users\r\n    * @param {Search.Params} [options] - additional parameters for the search\r\n    * @param {Requestable.callback} [cb] - will receive the results of the search\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   forUsers(options, cb) {\r\n      return this._search('users', options, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = Search;\r\n","/**\r\n * @file\r\n * @copyright  2016 Matt Smith (Development Seed)\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\nimport debug from 'debug';\r\nconst log = debug('github:team');\r\n\r\n/**\r\n * A Team allows scoping of API requests to a particular Github Organization Team.\r\n */\r\nclass Team extends Requestable {\r\n   /**\r\n    * Create a Team.\r\n    * @param {string} [teamId] - the id for the team\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(teamId, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__teamId = teamId;\r\n   }\r\n\r\n   /**\r\n    * Get Team information\r\n    * @see https://developer.github.com/v3/orgs/teams/#get-team\r\n    * @param {Requestable.callback} [cb] - will receive the team\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getTeam(cb) {\r\n      log(`Fetching Team ${this.__teamId}`);\r\n      return this._request('Get', `/teams/${this.__teamId}`, undefined, cb);\r\n   }\r\n\r\n   /**\r\n    * List the Team's repositories\r\n    * @see https://developer.github.com/v3/orgs/teams/#list-team-repos\r\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listRepos(cb) {\r\n      log(`Fetching repositories for Team ${this.__teamId}`);\r\n      return this._requestAllPages(`/teams/${this.__teamId}/repos`, undefined, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit Team information\r\n    * @see https://developer.github.com/v3/orgs/teams/#edit-team\r\n    * @param {object} options - Parameters for team edit\r\n    * @param {string} options.name - The name of the team\r\n    * @param {string} [options.description] - Team description\r\n    * @param {string} [options.repo_names] - Repos to add the team to\r\n    * @param {string} [options.privacy=secret] - The level of privacy the team should have. Can be either one\r\n    * of: `secret`, or `closed`\r\n    * @param {Requestable.callback} [cb] - will receive the updated team\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   editTeam(options, cb) {\r\n      log(`Editing Team ${this.__teamId}`);\r\n      return this._request('PATCH', `/teams/${this.__teamId}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * List the users who are members of the Team\r\n    * @see https://developer.github.com/v3/orgs/teams/#list-team-members\r\n    * @param {object} options - Parameters for listing team users\r\n    * @param {string} [options.role=all] - can be one of: `all`, `maintainer`, or `member`\r\n    * @param {Requestable.callback} [cb] - will receive the list of users\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listMembers(options, cb) {\r\n      log(`Getting members of Team ${this.__teamId}`);\r\n      return this._requestAllPages(`/teams/${this.__teamId}/members`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get Team membership status for a user\r\n    * @see https://developer.github.com/v3/orgs/teams/#get-team-membership\r\n    * @param {string} username - can be one of: `all`, `maintainer`, or `member`\r\n    * @param {Requestable.callback} [cb] - will receive the membership status of a user\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getMembership(username, cb) {\r\n      log(`Getting membership of user ${username} in Team ${this.__teamId}`);\r\n      return this._request('GET', `/teams/${this.__teamId}/memberships/${username}`, undefined, cb);\r\n   }\r\n\r\n   /**\r\n    * Add a member to the Team\r\n    * @see https://developer.github.com/v3/orgs/teams/#add-team-membership\r\n    * @param {string} username - can be one of: `all`, `maintainer`, or `member`\r\n    * @param {object} options - Parameters for adding a team member\r\n    * @param {string} [options.role=member] - The role that this user should have in the team. Can be one\r\n    * of: `member`, or `maintainer`\r\n    * @param {Requestable.callback} [cb] - will receive the membership status of added user\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   addMembership(username, options, cb) {\r\n      log(`Adding user ${username} to Team ${this.__teamId}`);\r\n      return this._request('PUT', `/teams/${this.__teamId}/memberships/${username}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get repo management status for team\r\n    * @see https://developer.github.com/v3/orgs/teams/#remove-team-membership\r\n    * @param {string} owner - Organization name\r\n    * @param {string} repo - Repo name\r\n    * @param {Requestable.callback} [cb] - will receive the membership status of added user\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   isManagedRepo(owner, repo, cb) {\r\n      log(`Getting repo management by Team ${this.__teamId} for repo ${owner}/${repo}`);\r\n      return this._request204or404(`/teams/${this.__teamId}/repos/${owner}/${repo}`, undefined, cb);\r\n   }\r\n\r\n   /**\r\n    * Add or Update repo management status for team\r\n    * @see https://developer.github.com/v3/orgs/teams/#add-or-update-team-repository\r\n    * @param {string} owner - Organization name\r\n    * @param {string} repo - Repo name\r\n    * @param {object} options - Parameters for adding or updating repo management for the team\r\n    * @param {string} [options.permission] - The permission to grant the team on this repository. Can be one\r\n    * of: `pull`, `push`, or `admin`\r\n    * @param {Requestable.callback} [cb] - will receive the membership status of added user\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   manageRepo(owner, repo, options, cb) {\r\n      log(`Adding or Updating repo management by Team ${this.__teamId} for repo ${owner}/${repo}`);\r\n      return this._request204or404(`/teams/${this.__teamId}/repos/${owner}/${repo}`, options, cb, 'PUT');\r\n   }\r\n\r\n   /**\r\n    * Remove repo management status for team\r\n    * @see https://developer.github.com/v3/orgs/teams/#remove-team-repository\r\n    * @param {string} owner - Organization name\r\n    * @param {string} repo - Repo name\r\n    * @param {Requestable.callback} [cb] - will receive the membership status of added user\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   unmanageRepo(owner, repo, cb) {\r\n      log(`Remove repo management by Team ${this.__teamId} for repo ${owner}/${repo}`);\r\n      return this._request204or404(`/teams/${this.__teamId}/repos/${owner}/${repo}`, undefined, cb, 'DELETE');\r\n   }\r\n\r\n   /**\r\n    * Delete Team\r\n    * @see https://developer.github.com/v3/orgs/teams/#delete-team\r\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteTeam(cb) {\r\n      log(`Deleting Team ${this.__teamId}`);\r\n      return this._request204or404(`/teams/${this.__teamId}`, undefined, cb, 'DELETE');\r\n   }\r\n}\r\n\r\nmodule.exports = Team;\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\nimport debug from 'debug';\r\nconst log = debug('github:user');\r\n\r\n/**\r\n * A User allows scoping of API requests to a particular Github user.\r\n */\r\nclass User extends Requestable {\r\n   /**\r\n    * Create a User.\r\n    * @param {string} [username] - the user to use for user-scoped queries\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(username, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__user = username;\r\n   }\r\n\r\n   /**\r\n    * Get the url for the request. (dependent on if we're requesting for the authenticated user or not)\r\n    * @private\r\n    * @param {string} endpoint - the endpoint being requested\r\n    * @return {string} - the resolved endpoint\r\n    */\r\n   __getScopedUrl(endpoint) {\r\n      if (this.__user) {\r\n         return endpoint ?\r\n            `/users/${this.__user}/${endpoint}` :\r\n            `/users/${this.__user}`\r\n            ;\r\n\r\n      } else { // eslint-disable-line\r\n         switch (endpoint) {\r\n            case '':\r\n               return '/user';\r\n\r\n            case 'notifications':\r\n            case 'gists':\r\n               return `/${endpoint}`;\r\n\r\n            default:\r\n               return `/user/${endpoint}`;\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * List the user's repositories\r\n    * @see https://developer.github.com/v3/repos/#list-user-repositories\r\n    * @param {Object} [options={}] - any options to refine the search\r\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listRepos(options, cb) {\r\n      if (typeof options === 'function') {\r\n         cb = options;\r\n         options = {};\r\n      }\r\n\r\n      options = this._getOptionsWithDefaults(options);\r\n\r\n      log(`Fetching repositories with options: ${JSON.stringify(options)}`);\r\n      return this._requestAllPages(this.__getScopedUrl('repos'), options, cb);\r\n   }\r\n\r\n   /**\r\n    * List the orgs that the user belongs to\r\n    * @see https://developer.github.com/v3/orgs/#list-user-organizations\r\n    * @param {Requestable.callback} [cb] - will receive the list of organizations\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listOrgs(cb) {\r\n      return this._request('GET', this.__getScopedUrl('orgs'), null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the user's gists\r\n    * @see https://developer.github.com/v3/gists/#list-a-users-gists\r\n    * @param {Requestable.callback} [cb] - will receive the list of gists\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listGists(cb) {\r\n      return this._request('GET', this.__getScopedUrl('gists'), null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the user's notifications\r\n    * @see https://developer.github.com/v3/activity/notifications/#list-your-notifications\r\n    * @param {Object} [options={}] - any options to refine the search\r\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listNotifications(options, cb) {\r\n      options = options || {};\r\n      if (typeof options === 'function') {\r\n         cb = options;\r\n         options = {};\r\n      }\r\n\r\n      options.since = this._dateToISO(options.since);\r\n      options.before = this._dateToISO(options.before);\r\n\r\n      return this._request('GET', this.__getScopedUrl('notifications'), options, cb);\r\n   }\r\n\r\n   /**\r\n    * Show the user's profile\r\n    * @see https://developer.github.com/v3/users/#get-a-single-user\r\n    * @param {Requestable.callback} [cb] - will receive the user's information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getProfile(cb) {\r\n      return this._request('GET', this.__getScopedUrl(''), null, cb);\r\n   }\r\n\r\n   /**\r\n    * Gets the list of starred repositories for the user\r\n    * @see https://developer.github.com/v3/activity/starring/#list-repositories-being-starred\r\n    * @param {Requestable.callback} [cb] - will receive the list of starred repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listStarredRepos(cb) {\r\n      let requestOptions = this._getOptionsWithDefaults();\r\n      return this._requestAllPages(this.__getScopedUrl('starred'), requestOptions, cb);\r\n   }\r\n\r\n   /**\r\n    * List email addresses for a user\r\n    * @see https://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user\r\n    * @param {Requestable.callback} [cb] - will receive the list of emails\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getEmails(cb) {\r\n      return this._request('GET', '/user/emails', null, cb);\r\n   }\r\n\r\n   /**\r\n    * Have the authenticated user follow this user\r\n    * @see https://developer.github.com/v3/users/followers/#follow-a-user\r\n    * @param {string} username - the user to follow\r\n    * @param {Requestable.callback} [cb] - will receive true if the request succeeds\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   follow(username, cb) {\r\n      return this._request('PUT', `/user/following/${this.__user}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Have the currently authenticated user unfollow this user\r\n    * @see https://developer.github.com/v3/users/followers/#follow-a-user\r\n    * @param {string} username - the user to unfollow\r\n    * @param {Requestable.callback} [cb] - receives true if the request succeeds\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   unfollow(username, cb) {\r\n      return this._request('DELETE', `/user/following/${this.__user}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new repository for the currently authenticated user\r\n    * @see https://developer.github.com/v3/repos/#create\r\n    * @param {object} options - the repository definition\r\n    * @param {Requestable.callback} [cb] - will receive the API response\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createRepo(options, cb) {\r\n      return this._request('POST', '/user/repos', options, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = User;\r\n"]}