{"version":3,"names":[],"mappings":"","sources":["Team.js"],"sourcesContent":["/**\r\n * @file\r\n * @copyright  2016 Matt Smith (Development Seed)\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\nimport debug from 'debug';\r\nconst log = debug('github:team');\r\n\r\n/**\r\n * A Team allows scoping of API requests to a particular Github Organization Team.\r\n */\r\nclass Team extends Requestable {\r\n   /**\r\n    * Create a Team.\r\n    * @param {string} [teamId] - the id for the team\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(teamId, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__teamId = teamId;\r\n   }\r\n\r\n   /**\r\n    * Get Team information\r\n    * @see https://developer.github.com/v3/orgs/teams/#get-team\r\n    * @param {Requestable.callback} [cb] - will receive the team\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getTeam(cb) {\r\n      log(`Fetching Team ${this.__teamId}`);\r\n      return this._request('Get', `/teams/${this.__teamId}`, undefined, cb);\r\n   }\r\n\r\n   /**\r\n    * List the Team's repositories\r\n    * @see https://developer.github.com/v3/orgs/teams/#list-team-repos\r\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listRepos(cb) {\r\n      log(`Fetching repositories for Team ${this.__teamId}`);\r\n      return this._requestAllPages(`/teams/${this.__teamId}/repos`, undefined, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit Team information\r\n    * @see https://developer.github.com/v3/orgs/teams/#edit-team\r\n    * @param {object} options - Parameters for team edit\r\n    * @param {string} options.name - The name of the team\r\n    * @param {string} [options.description] - Team description\r\n    * @param {string} [options.repo_names] - Repos to add the team to\r\n    * @param {string} [options.privacy=secret] - The level of privacy the team should have. Can be either one\r\n    * of: `secret`, or `closed`\r\n    * @param {Requestable.callback} [cb] - will receive the updated team\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   editTeam(options, cb) {\r\n      log(`Editing Team ${this.__teamId}`);\r\n      return this._request('PATCH', `/teams/${this.__teamId}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * List the users who are members of the Team\r\n    * @see https://developer.github.com/v3/orgs/teams/#list-team-members\r\n    * @param {object} options - Parameters for listing team users\r\n    * @param {string} [options.role=all] - can be one of: `all`, `maintainer`, or `member`\r\n    * @param {Requestable.callback} [cb] - will receive the list of users\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listMembers(options, cb) {\r\n      log(`Getting members of Team ${this.__teamId}`);\r\n      return this._requestAllPages(`/teams/${this.__teamId}/members`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get Team membership status for a user\r\n    * @see https://developer.github.com/v3/orgs/teams/#get-team-membership\r\n    * @param {string} username - can be one of: `all`, `maintainer`, or `member`\r\n    * @param {Requestable.callback} [cb] - will receive the membership status of a user\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getMembership(username, cb) {\r\n      log(`Getting membership of user ${username} in Team ${this.__teamId}`);\r\n      return this._request('GET', `/teams/${this.__teamId}/memberships/${username}`, undefined, cb);\r\n   }\r\n\r\n   /**\r\n    * Add a member to the Team\r\n    * @see https://developer.github.com/v3/orgs/teams/#add-team-membership\r\n    * @param {string} username - can be one of: `all`, `maintainer`, or `member`\r\n    * @param {object} options - Parameters for adding a team member\r\n    * @param {string} [options.role=member] - The role that this user should have in the team. Can be one\r\n    * of: `member`, or `maintainer`\r\n    * @param {Requestable.callback} [cb] - will receive the membership status of added user\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   addMembership(username, options, cb) {\r\n      log(`Adding user ${username} to Team ${this.__teamId}`);\r\n      return this._request('PUT', `/teams/${this.__teamId}/memberships/${username}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get repo management status for team\r\n    * @see https://developer.github.com/v3/orgs/teams/#remove-team-membership\r\n    * @param {string} owner - Organization name\r\n    * @param {string} repo - Repo name\r\n    * @param {Requestable.callback} [cb] - will receive the membership status of added user\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   isManagedRepo(owner, repo, cb) {\r\n      log(`Getting repo management by Team ${this.__teamId} for repo ${owner}/${repo}`);\r\n      return this._request204or404(`/teams/${this.__teamId}/repos/${owner}/${repo}`, undefined, cb);\r\n   }\r\n\r\n   /**\r\n    * Add or Update repo management status for team\r\n    * @see https://developer.github.com/v3/orgs/teams/#add-or-update-team-repository\r\n    * @param {string} owner - Organization name\r\n    * @param {string} repo - Repo name\r\n    * @param {object} options - Parameters for adding or updating repo management for the team\r\n    * @param {string} [options.permission] - The permission to grant the team on this repository. Can be one\r\n    * of: `pull`, `push`, or `admin`\r\n    * @param {Requestable.callback} [cb] - will receive the membership status of added user\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   manageRepo(owner, repo, options, cb) {\r\n      log(`Adding or Updating repo management by Team ${this.__teamId} for repo ${owner}/${repo}`);\r\n      return this._request204or404(`/teams/${this.__teamId}/repos/${owner}/${repo}`, options, cb, 'PUT');\r\n   }\r\n\r\n   /**\r\n    * Remove repo management status for team\r\n    * @see https://developer.github.com/v3/orgs/teams/#remove-team-repository\r\n    * @param {string} owner - Organization name\r\n    * @param {string} repo - Repo name\r\n    * @param {Requestable.callback} [cb] - will receive the membership status of added user\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   unmanageRepo(owner, repo, cb) {\r\n      log(`Remove repo management by Team ${this.__teamId} for repo ${owner}/${repo}`);\r\n      return this._request204or404(`/teams/${this.__teamId}/repos/${owner}/${repo}`, undefined, cb, 'DELETE');\r\n   }\r\n\r\n   /**\r\n    * Delete Team\r\n    * @see https://developer.github.com/v3/orgs/teams/#delete-team\r\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteTeam(cb) {\r\n      log(`Deleting Team ${this.__teamId}`);\r\n      return this._request204or404(`/teams/${this.__teamId}`, undefined, cb, 'DELETE');\r\n   }\r\n}\r\n\r\nmodule.exports = Team;\r\n"],"file":"Team.js"}