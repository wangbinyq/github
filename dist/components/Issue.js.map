{"version":3,"names":[],"mappings":"","sources":["Issue.js"],"sourcesContent":["/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\n\r\n/**\r\n * Issue wraps the functionality to get issues for repositories\r\n */\r\nclass Issue extends Requestable {\r\n   /**\r\n    * Create a new Issue\r\n    * @param {string} repository - the full name of the repository (`:user/:repo`) to get issues for\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(repository, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__repository = repository;\r\n   }\r\n\r\n   /**\r\n    * Create a new issue\r\n    * @see https://developer.github.com/v3/issues/#create-an-issue\r\n    * @param {Object} issueData - the issue to create\r\n    * @param {Requestable.callback} [cb] - will receive the created issue\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createIssue(issueData, cb) {\r\n      return this._request('POST', `/repos/${this.__repository}/issues`, issueData, cb);\r\n   }\r\n\r\n   /**\r\n    * List the issues for the repository\r\n    * @see https://developer.github.com/v3/issues/#list-issues-for-a-repository\r\n    * @param {Object} options - filtering options\r\n    * @param {Requestable.callback} [cb] - will receive the array of issues\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listIssues(options, cb) {\r\n      return this._requestAllPages(`/repos/${this.__repository}/issues`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * List the events for an issue\r\n    * @see https://developer.github.com/v3/issues/events/#list-events-for-an-issue\r\n    * @param {number} issue - the issue to get events for\r\n    * @param {Requestable.callback} [cb] - will receive the list of events\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listIssueEvents(issue, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/issues/${issue}/events`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List comments on an issue\r\n    * @see https://developer.github.com/v3/issues/comments/#list-comments-on-an-issue\r\n    * @param {number} issue - the id of the issue to get comments from\r\n    * @param {Requestable.callback} [cb] - will receive the comments\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listIssueComments(issue, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/issues/${issue}/comments`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a single comment on an issue\r\n    * @see https://developer.github.com/v3/issues/comments/#get-a-single-comment\r\n    * @param {number} id - the comment id to get\r\n    * @param {Requestable.callback} [cb] - will receive the comment\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getIssueComment(id, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/issues/comments/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Comment on an issue\r\n    * @see https://developer.github.com/v3/issues/comments/#create-a-comment\r\n    * @param {number} issue - the id of the issue to comment on\r\n    * @param {string} comment - the comment to add\r\n    * @param {Requestable.callback} [cb] - will receive the created comment\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createIssueComment(issue, comment, cb) {\r\n      return this._request('POST', `/repos/${this.__repository}/issues/${issue}/comments`, {body: comment}, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a comment on an issue\r\n    * @see https://developer.github.com/v3/issues/comments/#edit-a-comment\r\n    * @param {number} id - the comment id to edit\r\n    * @param {string} comment - the comment to edit\r\n    * @param {Requestable.callback} [cb] - will receive the edited comment\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   editIssueComment(id, comment, cb) {\r\n      return this._request('PATCH', `/repos/${this.__repository}/issues/comments/${id}`, {body: comment}, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a comment on an issue\r\n    * @see https://developer.github.com/v3/issues/comments/#delete-a-comment\r\n    * @param {number} id - the comment id to delete\r\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteIssueComment(id, cb) {\r\n      return this._request('DELETE', `/repos/${this.__repository}/issues/comments/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit an issue\r\n    * @see https://developer.github.com/v3/issues/#edit-an-issue\r\n    * @param {number} issue - the issue number to edit\r\n    * @param {Object} issueData - the new issue data\r\n    * @param {Requestable.callback} [cb] - will receive the modified issue\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   editIssue(issue, issueData, cb) {\r\n      return this._request('PATCH', `/repos/${this.__repository}/issues/${issue}`, issueData, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a particular issue\r\n    * @see https://developer.github.com/v3/issues/#get-a-single-issue\r\n    * @param {number} issue - the issue number to fetch\r\n    * @param {Requestable.callback} [cb] - will receive the issue\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getIssue(issue, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/issues/${issue}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the milestones for the repository\r\n    * @see https://developer.github.com/v3/issues/milestones/#list-milestones-for-a-repository\r\n    * @param {Object} options - filtering options\r\n    * @param {Requestable.callback} [cb] - will receive the array of milestones\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listMilestones(options, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/milestones`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a milestone\r\n    * @see https://developer.github.com/v3/issues/milestones/#get-a-single-milestone\r\n    * @param {string} milestone - the id of the milestone to fetch\r\n    * @param {Requestable.callback} [cb] - will receive the milestone\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getMilestone(milestone, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/milestones/${milestone}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new milestone\r\n    * @see https://developer.github.com/v3/issues/milestones/#create-a-milestone\r\n    * @param {Object} milestoneData - the milestone definition\r\n    * @param {Requestable.callback} [cb] - will receive the milestone\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createMilestone(milestoneData, cb) {\r\n      return this._request('POST', `/repos/${this.__repository}/milestones`, milestoneData, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a milestone\r\n    * @see https://developer.github.com/v3/issues/milestones/#update-a-milestone\r\n    * @param {string} milestone - the id of the milestone to edit\r\n    * @param {Object} milestoneData - the updates to make to the milestone\r\n    * @param {Requestable.callback} [cb] - will receive the updated milestone\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   editMilestone(milestone, milestoneData, cb) {\r\n      return this._request('PATCH', `/repos/${this.__repository}/milestones/${milestone}`, milestoneData, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a milestone (this is distinct from closing a milestone)\r\n    * @see https://developer.github.com/v3/issues/milestones/#delete-a-milestone\r\n    * @param {string} milestone - the id of the milestone to delete\r\n    * @param {Requestable.callback} [cb] - will receive the status\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteMilestone(milestone, cb) {\r\n      return this._request('DELETE', `/repos/${this.__repository}/milestones/${milestone}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new label\r\n    * @see https://developer.github.com/v3/issues/labels/#create-a-label\r\n    * @param {Object} labelData - the label definition\r\n    * @param {Requestable.callback} [cb] - will receive the object representing the label\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createLabel(labelData, cb) {\r\n      return this._request('POST', `/repos/${this.__repository}/labels`, labelData, cb);\r\n   }\r\n\r\n  /**\r\n   * List the labels for the repository\r\n   * @see https://developer.github.com/v3/issues/labels/#list-all-labels-for-this-repository\r\n   * @param {Object} options - filtering options\r\n   * @param {Requestable.callback} [cb] - will receive the array of labels\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   listLabels(options, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/labels`, options, cb);\r\n   }\r\n\r\n  /**\r\n   * Get a label\r\n   * @see https://developer.github.com/v3/issues/labels/#get-a-single-label\r\n   * @param {string} label - the name of the label to fetch\r\n   * @param {Requestable.callback} [cb] - will receive the label\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   getLabel(label, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/labels/${label}`, null, cb);\r\n   }\r\n\r\n  /**\r\n   * Edit a label\r\n   * @see https://developer.github.com/v3/issues/labels/#update-a-label\r\n   * @param {string} label - the name of the label to edit\r\n   * @param {Object} labelData - the updates to make to the label\r\n   * @param {Requestable.callback} [cb] - will receive the updated label\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   editLabel(label, labelData, cb) {\r\n      return this._request('PATCH', `/repos/${this.__repository}/labels/${label}`, labelData, cb);\r\n   }\r\n\r\n  /**\r\n   * Delete a label\r\n   * @see https://developer.github.com/v3/issues/labels/#delete-a-label\r\n   * @param {string} label - the name of the label to delete\r\n   * @param {Requestable.callback} [cb] - will receive the status\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   deleteLabel(label, cb) {\r\n      return this._request('DELETE', `/repos/${this.__repository}/labels/${label}`, null, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = Issue;\r\n"],"file":"Issue.js"}