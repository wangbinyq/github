{"version":3,"names":[],"mappings":"","sources":["Project.js"],"sourcesContent":["/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\n\r\n/**\r\n * Project encapsulates the functionality to create, query, and modify cards and columns.\r\n */\r\nclass Project extends Requestable {\r\n   /**\r\n    * Create a Project.\r\n    * @param {string} id - the id of the project\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(id, auth, apiBase) {\r\n      super(auth, apiBase, 'inertia-preview');\r\n      this.__id = id;\r\n   }\r\n\r\n   /**\r\n    * Get information about a project\r\n    * @see https://developer.github.com/v3/projects/#get-a-project\r\n    * @param {Requestable.callback} cb - will receive the project information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getProject(cb) {\r\n      return this._request('GET', `/projects/${this.__id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a project\r\n    * @see https://developer.github.com/v3/projects/#update-a-project\r\n    * @param {Object} options - the description of the project\r\n    * @param {Requestable.callback} cb - will receive the modified project\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateProject(options, cb) {\r\n      return this._request('PATCH', `/projects/${this.__id}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a project\r\n    * @see https://developer.github.com/v3/projects/#delete-a-project\r\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteProject(cb) {\r\n      return this._request('DELETE', `/projects/${this.__id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about all columns of a project\r\n    * @see https://developer.github.com/v3/projects/columns/#list-project-columns\r\n    * @param {Requestable.callback} [cb] - will receive the list of columns\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listProjectColumns(cb) {\r\n      return this._requestAllPages(`/projects/${this.__id}/columns`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about a column\r\n    * @see https://developer.github.com/v3/projects/columns/#get-a-project-column\r\n    * @param {string} colId - the id of the column\r\n    * @param {Requestable.callback} cb - will receive the column information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getProjectColumn(colId, cb) {\r\n      return this._request('GET', `/projects/columns/${colId}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new column\r\n    * @see https://developer.github.com/v3/projects/columns/#create-a-project-column\r\n    * @param {Object} options - the description of the column\r\n    * @param {Requestable.callback} cb - will receive the newly created column\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createProjectColumn(options, cb) {\r\n      return this._request('POST', `/projects/${this.__id}/columns`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a column\r\n    * @see https://developer.github.com/v3/projects/columns/#update-a-project-column\r\n    * @param {string} colId - the column id\r\n    * @param {Object} options - the description of the column\r\n    * @param {Requestable.callback} cb - will receive the modified column\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateProjectColumn(colId, options, cb) {\r\n      return this._request('PATCH', `/projects/columns/${colId}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a column\r\n    * @see https://developer.github.com/v3/projects/columns/#delete-a-project-column\r\n    * @param {string} colId - the column to be deleted\r\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteProjectColumn(colId, cb) {\r\n      return this._request('DELETE', `/projects/columns/${colId}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Move a column\r\n    * @see https://developer.github.com/v3/projects/columns/#move-a-project-column\r\n    * @param {string} colId - the column to be moved\r\n    * @param {string} position - can be one of first, last, or after:<column-id>,\r\n    * where <column-id> is the id value of a column in the same project.\r\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   moveProjectColumn(colId, position, cb) {\r\n      return this._request(\r\n         'POST',\r\n         `/projects/columns/${colId}/moves`,\r\n         {position: position},\r\n         cb\r\n      );\r\n   }\r\n\r\n  /**\r\n   * Get information about all cards of a project\r\n   * @see https://developer.github.com/v3/projects/cards/#list-project-cards\r\n   * @param {Requestable.callback} [cb] - will receive the list of cards\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   listProjectCards(cb) {\r\n      return this.listProjectColumns()\r\n        .then(({data}) => {\r\n           return Promise.all(data.map((column) => {\r\n              return this._requestAllPages(`/projects/columns/${column.id}/cards`, null);\r\n           }));\r\n        }).then((cardsInColumns) => {\r\n           const cards = cardsInColumns.reduce((prev, {data}) => {\r\n              prev.push(...data);\r\n              return prev;\r\n           }, []);\r\n           if (cb) {\r\n              cb(null, cards);\r\n           }\r\n           return cards;\r\n        }).catch((err) => {\r\n           if (cb) {\r\n              cb(err);\r\n              return;\r\n           }\r\n           throw err;\r\n        });\r\n   }\r\n\r\n   /**\r\n   * Get information about all cards of a column\r\n   * @see https://developer.github.com/v3/projects/cards/#list-project-cards\r\n   * @param {string} colId - the id of the column\r\n   * @param {Requestable.callback} [cb] - will receive the list of cards\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   listColumnCards(colId, cb) {\r\n      return this._requestAllPages(`/projects/columns/${colId}/cards`, null, cb);\r\n   }\r\n\r\n   /**\r\n   * Get information about a card\r\n   * @see https://developer.github.com/v3/projects/cards/#get-a-project-card\r\n   * @param {string} cardId - the id of the card\r\n   * @param {Requestable.callback} cb - will receive the card information\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   getProjectCard(cardId, cb) {\r\n      return this._request('GET', `/projects/columns/cards/${cardId}`, null, cb);\r\n   }\r\n\r\n   /**\r\n   * Create a new card\r\n   * @see https://developer.github.com/v3/projects/cards/#create-a-project-card\r\n   * @param {string} colId - the column id\r\n   * @param {Object} options - the description of the card\r\n   * @param {Requestable.callback} cb - will receive the newly created card\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   createProjectCard(colId, options, cb) {\r\n      return this._request('POST', `/projects/columns/${colId}/cards`, options, cb);\r\n   }\r\n\r\n   /**\r\n   * Edit a card\r\n   * @see https://developer.github.com/v3/projects/cards/#update-a-project-card\r\n   * @param {string} cardId - the card id\r\n   * @param {Object} options - the description of the card\r\n   * @param {Requestable.callback} cb - will receive the modified card\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   updateProjectCard(cardId, options, cb) {\r\n      return this._request('PATCH', `/projects/columns/cards/${cardId}`, options, cb);\r\n   }\r\n\r\n   /**\r\n   * Delete a card\r\n   * @see https://developer.github.com/v3/projects/cards/#delete-a-project-card\r\n   * @param {string} cardId - the card to be deleted\r\n   * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   deleteProjectCard(cardId, cb) {\r\n      return this._request('DELETE', `/projects/columns/cards/${cardId}`, null, cb);\r\n   }\r\n\r\n   /**\r\n   * Move a card\r\n   * @see https://developer.github.com/v3/projects/cards/#move-a-project-card\r\n   * @param {string} cardId - the card to be moved\r\n   * @param {string} position - can be one of top, bottom, or after:<card-id>,\r\n   * where <card-id> is the id value of a card in the same project.\r\n   * @param {string} colId - the id value of a column in the same project.\r\n   * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   moveProjectCard(cardId, position, colId, cb) {\r\n      return this._request(\r\n         'POST',\r\n         `/projects/columns/cards/${cardId}/moves`,\r\n         {position: position, column_id: colId}, // eslint-disable-line camelcase\r\n         cb\r\n      );\r\n   }\r\n}\r\n\r\nmodule.exports = Project;\r\n"],"file":"Project.js"}