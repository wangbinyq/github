{"version":3,"names":[],"mappings":"","sources":["GitHub.js"],"sourcesContent":["/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n/* eslint valid-jsdoc: [\"error\", {\"requireReturnDescription\": false}] */\r\n\r\nimport Gist from './Gist';\r\nimport User from './User';\r\nimport Issue from './Issue';\r\nimport Search from './Search';\r\nimport RateLimit from './RateLimit';\r\nimport Repository from './Repository';\r\nimport Organization from './Organization';\r\nimport Team from './Team';\r\nimport Markdown from './Markdown';\r\nimport Project from './Project';\r\n\r\n/**\r\n * GitHub encapsulates the functionality to create various API wrapper objects.\r\n */\r\nclass GitHub {\r\n   /**\r\n    * Create a new GitHub.\r\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to Github. If auth is\r\n    *                                  not provided requests will be made unauthenticated\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(auth, apiBase = 'https://api.github.com') {\r\n      this.__apiBase = apiBase;\r\n      this.__auth = auth || {};\r\n   }\r\n\r\n   /**\r\n    * Create a new Gist wrapper\r\n    * @param {number} [id] - the id for the gist, leave undefined when creating a new gist\r\n    * @return {Gist}\r\n    */\r\n   getGist(id) {\r\n      return new Gist(id, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new User wrapper\r\n    * @param {string} [user] - the name of the user to get information about\r\n    *                        leave undefined for the authenticated user\r\n    * @return {User}\r\n    */\r\n   getUser(user) {\r\n      return new User(user, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Organization wrapper\r\n    * @param {string} organization - the name of the organization\r\n    * @return {Organization}\r\n    */\r\n   getOrganization(organization) {\r\n      return new Organization(organization, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * create a new Team wrapper\r\n    * @param {string} teamId - the name of the team\r\n    * @return {team}\r\n    */\r\n   getTeam(teamId) {\r\n      return new Team(teamId, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Repository wrapper\r\n    * @param {string} user - the user who owns the respository\r\n    * @param {string} repo - the name of the repository\r\n    * @return {Repository}\r\n    */\r\n   getRepo(user, repo) {\r\n      return new Repository(this._getFullName(user, repo), this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Issue wrapper\r\n    * @param {string} user - the user who owns the respository\r\n    * @param {string} repo - the name of the repository\r\n    * @return {Issue}\r\n    */\r\n   getIssues(user, repo) {\r\n      return new Issue(this._getFullName(user, repo), this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Search wrapper\r\n    * @param {string} query - the query to search for\r\n    * @return {Search}\r\n    */\r\n   search(query) {\r\n      return new Search(query, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new RateLimit wrapper\r\n    * @return {RateLimit}\r\n    */\r\n   getRateLimit() {\r\n      return new RateLimit(this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Markdown wrapper\r\n    * @return {Markdown}\r\n    */\r\n   getMarkdown() {\r\n      return new Markdown(this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Project wrapper\r\n    * @param {string} id - the id of the project\r\n    * @return {Project}\r\n    */\r\n   getProject(id) {\r\n      return new Project(id, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Computes the full repository name\r\n    * @param {string} user - the username (or the full name)\r\n    * @param {string} repo - the repository name, must not be passed if `user` is the full name\r\n    * @return {string} the repository's full name\r\n    */\r\n   _getFullName(user, repo) {\r\n      let fullname = user;\r\n\r\n      if (repo) {\r\n         fullname = `${user}/${repo}`;\r\n      }\r\n\r\n      return fullname;\r\n   }\r\n}\r\n\r\nmodule.exports = GitHub;\r\n"],"file":"GitHub.js"}