{"version":3,"names":[],"mappings":"","sources":["Repository.js"],"sourcesContent":["/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\nimport Utf8 from 'utf8';\r\nimport {\r\n   Base64,\r\n} from 'js-base64';\r\nimport debug from 'debug';\r\nconst log = debug('github:repository');\r\n\r\n/**\r\n * Respository encapsulates the functionality to create, query, and modify files.\r\n */\r\nclass Repository extends Requestable {\r\n   /**\r\n    * Create a Repository.\r\n    * @param {string} fullname - the full name of the repository\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(fullname, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__fullname = fullname;\r\n      this.__currentTree = {\r\n         branch: null,\r\n         sha: null,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * Get a reference\r\n    * @see https://developer.github.com/v3/git/refs/#get-a-reference\r\n    * @param {string} ref - the reference to get\r\n    * @param {Requestable.callback} [cb] - will receive the reference's refSpec or a list of refSpecs that match `ref`\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getRef(ref, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/git/refs/${ref}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a reference\r\n    * @see https://developer.github.com/v3/git/refs/#create-a-reference\r\n    * @param {Object} options - the object describing the ref\r\n    * @param {Requestable.callback} [cb] - will receive the ref\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createRef(options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/git/refs`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a reference\r\n    * @see https://developer.github.com/v3/git/refs/#delete-a-reference\r\n    * @param {string} ref - the name of the ref to delte\r\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteRef(ref, cb) {\r\n      return this._request('DELETE', `/repos/${this.__fullname}/git/refs/${ref}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a repository\r\n    * @see https://developer.github.com/v3/repos/#delete-a-repository\r\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteRepo(cb) {\r\n      return this._request('DELETE', `/repos/${this.__fullname}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the tags on a repository\r\n    * @see https://developer.github.com/v3/repos/#list-tags\r\n    * @param {Requestable.callback} [cb] - will receive the tag data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listTags(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/tags`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the open pull requests on the repository\r\n    * @see https://developer.github.com/v3/pulls/#list-pull-requests\r\n    * @param {Object} options - options to filter the search\r\n    * @param {Requestable.callback} [cb] - will receive the list of PRs\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listPullRequests(options, cb) {\r\n      options = options || {};\r\n      return this._request('GET', `/repos/${this.__fullname}/pulls`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about a specific pull request\r\n    * @see https://developer.github.com/v3/pulls/#get-a-single-pull-request\r\n    * @param {number} number - the PR you wish to fetch\r\n    * @param {Requestable.callback} [cb] - will receive the PR from the API\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getPullRequest(number, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/pulls/${number}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the files of a specific pull request\r\n    * @see https://developer.github.com/v3/pulls/#list-pull-requests-files\r\n    * @param {number|string} number - the PR you wish to fetch\r\n    * @param {Requestable.callback} [cb] - will receive the list of files from the API\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listPullRequestFiles(number, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/pulls/${number}/files`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Compare two branches/commits/repositories\r\n    * @see https://developer.github.com/v3/repos/commits/#compare-two-commits\r\n    * @param {string} base - the base commit\r\n    * @param {string} head - the head commit\r\n    * @param {Requestable.callback} cb - will receive the comparison\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   compareBranches(base, head, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/compare/${base}...${head}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List all the branches for the repository\r\n    * @see https://developer.github.com/v3/repos/#list-branches\r\n    * @param {Requestable.callback} cb - will receive the list of branches\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listBranches(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/branches`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a raw blob from the repository\r\n    * @see https://developer.github.com/v3/git/blobs/#get-a-blob\r\n    * @param {string} sha - the sha of the blob to fetch\r\n    * @param {Requestable.callback} cb - will receive the blob from the API\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getBlob(sha, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/git/blobs/${sha}`, null, cb, 'raw');\r\n   }\r\n\r\n   /**\r\n    * Get a single branch\r\n    * @see https://developer.github.com/v3/repos/branches/#get-branch\r\n    * @param {string} branch - the name of the branch to fetch\r\n    * @param {Requestable.callback} cb - will receive the branch from the API\r\n    * @returns {Promise} - the promise for the http request\r\n    */\r\n   getBranch(branch, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/branches/${branch}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a commit from the repository\r\n    * @see https://developer.github.com/v3/repos/commits/#get-a-single-commit\r\n    * @param {string} sha - the sha for the commit to fetch\r\n    * @param {Requestable.callback} cb - will receive the commit data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getCommit(sha, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/git/commits/${sha}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the commits on a repository, optionally filtering by path, author or time range\r\n    * @see https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository\r\n    * @param {Object} [options] - the filtering options for commits\r\n    * @param {string} [options.sha] - the SHA or branch to start from\r\n    * @param {string} [options.path] - the path to search on\r\n    * @param {string} [options.author] - the commit author\r\n    * @param {(Date|string)} [options.since] - only commits after this date will be returned\r\n    * @param {(Date|string)} [options.until] - only commits before this date will be returned\r\n    * @param {Requestable.callback} cb - will receive the list of commits found matching the criteria\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listCommits(options, cb) {\r\n      options = options || {};\r\n\r\n      options.since = this._dateToISO(options.since);\r\n      options.until = this._dateToISO(options.until);\r\n\r\n      return this._request('GET', `/repos/${this.__fullname}/commits`, options, cb);\r\n   }\r\n\r\n    /**\r\n     * Gets a single commit information for a repository\r\n     * @see https://developer.github.com/v3/repos/commits/#get-a-single-commit\r\n     * @param {string} ref - the reference for the commit-ish\r\n     * @param {Requestable.callback} cb - will receive the commit information\r\n     * @return {Promise} - the promise for the http request\r\n     */\r\n   getSingleCommit(ref, cb) {\r\n      ref = ref || '';\r\n      return this._request('GET', `/repos/${this.__fullname}/commits/${ref}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get tha sha for a particular object in the repository. This is a convenience function\r\n    * @see https://developer.github.com/v3/repos/contents/#get-contents\r\n    * @param {string} [branch] - the branch to look in, or the repository's default branch if omitted\r\n    * @param {string} path - the path of the file or directory\r\n    * @param {Requestable.callback} cb - will receive a description of the requested object, including a `SHA` property\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getSha(branch, path, cb) {\r\n      branch = branch ? `?ref=${branch}` : '';\r\n      return this._request('GET', `/repos/${this.__fullname}/contents/${path}${branch}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the commit statuses for a particular sha, branch, or tag\r\n    * @see https://developer.github.com/v3/repos/statuses/#list-statuses-for-a-specific-ref\r\n    * @param {string} sha - the sha, branch, or tag to get statuses for\r\n    * @param {Requestable.callback} cb - will receive the list of statuses\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listStatuses(sha, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/commits/${sha}/statuses`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a description of a git tree\r\n    * @see https://developer.github.com/v3/git/trees/#get-a-tree\r\n    * @param {string} treeSHA - the SHA of the tree to fetch\r\n    * @param {Requestable.callback} cb - will receive the callback data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getTree(treeSHA, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/git/trees/${treeSHA}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a blob\r\n    * @see https://developer.github.com/v3/git/blobs/#create-a-blob\r\n    * @param {(string|Buffer|Blob)} content - the content to add to the repository\r\n    * @param {Requestable.callback} cb - will receive the details of the created blob\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createBlob(content, cb) {\r\n      let postBody = this._getContentObject(content);\r\n\r\n      log('sending content', postBody);\r\n      return this._request('POST', `/repos/${this.__fullname}/git/blobs`, postBody, cb);\r\n   }\r\n\r\n   /**\r\n    * Get the object that represents the provided content\r\n    * @param {string|Buffer|Blob} content - the content to send to the server\r\n    * @return {Object} the representation of `content` for the GitHub API\r\n    */\r\n   _getContentObject(content) {\r\n      if (typeof content === 'string') {\r\n         log('contet is a string');\r\n         return {\r\n            content: Utf8.encode(content),\r\n            encoding: 'utf-8',\r\n         };\r\n\r\n      } else if (typeof Buffer !== 'undefined' && content instanceof Buffer) {\r\n         log('We appear to be in Node');\r\n         return {\r\n            content: content.toString('base64'),\r\n            encoding: 'base64',\r\n         };\r\n\r\n      } else if (typeof Blob !== 'undefined' && content instanceof Blob) {\r\n         log('We appear to be in the browser');\r\n         return {\r\n            content: Base64.encode(content),\r\n            encoding: 'base64',\r\n         };\r\n\r\n      } else { // eslint-disable-line\r\n         log(`Not sure what this content is: ${typeof content}, ${JSON.stringify(content)}`);\r\n         throw new Error('Unknown content passed to postBlob. Must be string or Buffer (node) or Blob (web)');\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Update a tree in Git\r\n    * @see https://developer.github.com/v3/git/trees/#create-a-tree\r\n    * @param {string} baseTreeSHA - the SHA of the tree to update\r\n    * @param {string} path - the path for the new file\r\n    * @param {string} blobSHA - the SHA for the blob to put at `path`\r\n    * @param {Requestable.callback} cb - will receive the new tree that is created\r\n    * @return {Promise} - the promise for the http request\r\n    * @deprecated use {@link Repository#createTree} instead\r\n    */\r\n   updateTree(baseTreeSHA, path, blobSHA, cb) {\r\n      let newTree = {\r\n         base_tree: baseTreeSHA, // eslint-disable-line\r\n         tree: [{\r\n            path: path,\r\n            sha: blobSHA,\r\n            mode: '100644',\r\n            type: 'blob',\r\n         }],\r\n      };\r\n\r\n      return this._request('POST', `/repos/${this.__fullname}/git/trees`, newTree, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new tree in git\r\n    * @see https://developer.github.com/v3/git/trees/#create-a-tree\r\n    * @param {Object} tree - the tree to create\r\n    * @param {string} baseSHA - the root sha of the tree\r\n    * @param {Requestable.callback} cb - will receive the new tree that is created\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createTree(tree, baseSHA, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/git/trees`, {\r\n         tree,\r\n         base_tree: baseSHA, // eslint-disable-line camelcase\r\n      }, cb);\r\n   }\r\n\r\n   /**\r\n    * Add a commit to the repository\r\n    * @see https://developer.github.com/v3/git/commits/#create-a-commit\r\n    * @param {string} parent - the SHA of the parent commit\r\n    * @param {string} tree - the SHA of the tree for this commit\r\n    * @param {string} message - the commit message\r\n    * @param {Requestable.callback} cb - will receive the commit that is created\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   commit(parent, tree, message, cb) {\r\n      let data = {\r\n         message,\r\n         tree,\r\n         parents: [parent],\r\n      };\r\n\r\n      return this._request('POST', `/repos/${this.__fullname}/git/commits`, data, cb)\r\n         .then((response) => {\r\n            this.__currentTree.sha = response.data.sha; // Update latest commit\r\n            return response;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Update a ref\r\n    * @see https://developer.github.com/v3/git/refs/#update-a-reference\r\n    * @param {string} ref - the ref to update\r\n    * @param {string} commitSHA - the SHA to point the reference to\r\n    * @param {boolean} force - indicates whether to force or ensure a fast-forward update\r\n    * @param {Requestable.callback} cb - will receive the updated ref back\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateHead(ref, commitSHA, force, cb) {\r\n      return this._request('PATCH', `/repos/${this.__fullname}/git/refs/${ref}`, {\r\n         sha: commitSHA,\r\n         force: force,\r\n      }, cb);\r\n   }\r\n\r\n   /**\r\n    * Update commit status\r\n    * @see https://developer.github.com/v3/repos/statuses/\r\n    * @param {string} commitSHA - the SHA of the commit that should be updated\r\n    * @param {object} options - Commit status parameters\r\n    * @param {string} options.state - The state of the status. Can be one of: pending, success, error, or failure.\r\n    * @param {string} [options.target_url] - The target URL to associate with this status.\r\n    * @param {string} [options.description] - A short description of the status.\r\n    * @param {string} [options.context] - A string label to differentiate this status among CI systems.\r\n    * @param {Requestable.callback} cb - will receive the updated commit back\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateStatus(commitSHA, options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/statuses/${commitSHA}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Update repository information\r\n    * @see https://developer.github.com/v3/repos/#edit\r\n    * @param {object} options - New parameters that will be set to the repository\r\n    * @param {string} options.name - Name of the repository\r\n    * @param {string} [options.description] - A short description of the repository\r\n    * @param {string} [options.homepage] - A URL with more information about the repository\r\n    * @param {boolean} [options.private] - Either true to make the repository private, or false to make it public.\r\n    * @param {boolean} [options.has_issues] - Either true to enable issues for this repository, false to disable them.\r\n    * @param {boolean} [options.has_wiki] - Either true to enable the wiki for this repository, false to disable it.\r\n    * @param {boolean} [options.has_downloads] - Either true to enable downloads, false to disable them.\r\n    * @param {string} [options.default_branch] - Updates the default branch for this repository.\r\n    * @param {Requestable.callback} cb - will receive the updated repository back\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateRepository(options, cb) {\r\n      return this._request('PATCH', `/repos/${this.__fullname}`, options, cb);\r\n   }\r\n\r\n  /**\r\n    * Get information about the repository\r\n    * @see https://developer.github.com/v3/repos/#get\r\n    * @param {Requestable.callback} cb - will receive the information about the repository\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getDetails(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the contributors to the repository\r\n    * @see https://developer.github.com/v3/repos/#list-contributors\r\n    * @param {Requestable.callback} cb - will receive the list of contributors\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getContributors(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/contributors`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the contributor stats to the repository\r\n    * @see https://developer.github.com/v3/repos/#list-contributors\r\n    * @param {Requestable.callback} cb - will receive the list of contributors\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getContributorStats(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/stats/contributors`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the users who are collaborators on the repository. The currently authenticated user must have\r\n    * push access to use this method\r\n    * @see https://developer.github.com/v3/repos/collaborators/#list-collaborators\r\n    * @param {Requestable.callback} cb - will receive the list of collaborators\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getCollaborators(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/collaborators`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Check if a user is a collaborator on the repository\r\n    * @see https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-collaborator\r\n    * @param {string} username - the user to check\r\n    * @param {Requestable.callback} cb - will receive true if the user is a collaborator and false if they are not\r\n    * @return {Promise} - the promise for the http request {Boolean} [description]\r\n    */\r\n   isCollaborator(username, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/collaborators/${username}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get the contents of a repository\r\n    * @see https://developer.github.com/v3/repos/contents/#get-contents\r\n    * @param {string} ref - the ref to check\r\n    * @param {string} path - the path containing the content to fetch\r\n    * @param {boolean} raw - `true` if the results should be returned raw instead of GitHub's normalized format\r\n    * @param {Requestable.callback} cb - will receive the fetched data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getContents(ref, path, raw, cb) {\r\n      path = path ? `${encodeURI(path)}` : '';\r\n      return this._request('GET', `/repos/${this.__fullname}/contents/${path}`, {\r\n         ref,\r\n      }, cb, raw);\r\n   }\r\n\r\n   /**\r\n    * Get the README of a repository\r\n    * @see https://developer.github.com/v3/repos/contents/#get-the-readme\r\n    * @param {string} ref - the ref to check\r\n    * @param {boolean} raw - `true` if the results should be returned raw instead of GitHub's normalized format\r\n    * @param {Requestable.callback} cb - will receive the fetched data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getReadme(ref, raw, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/readme`, {\r\n         ref,\r\n      }, cb, raw);\r\n   }\r\n\r\n   /**\r\n    * Fork a repository\r\n    * @see https://developer.github.com/v3/repos/forks/#create-a-fork\r\n    * @param {Requestable.callback} cb - will receive the information about the newly created fork\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   fork(cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/forks`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List a repository's forks\r\n    * @see https://developer.github.com/v3/repos/forks/#list-forks\r\n    * @param {Requestable.callback} cb - will receive the list of repositories forked from this one\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listForks(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/forks`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new branch from an existing branch.\r\n    * @param {string} [oldBranch=master] - the name of the existing branch\r\n    * @param {string} newBranch - the name of the new branch\r\n    * @param {Requestable.callback} cb - will receive the commit data for the head of the new branch\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createBranch(oldBranch, newBranch, cb) {\r\n      if (typeof newBranch === 'function') {\r\n         cb = newBranch;\r\n         newBranch = oldBranch;\r\n         oldBranch = 'master';\r\n      }\r\n\r\n      return this.getRef(`heads/${oldBranch}`)\r\n         .then((response) => {\r\n            let sha = response.data.object.sha;\r\n            return this.createRef({\r\n               sha,\r\n               ref: `refs/heads/${newBranch}`,\r\n            }, cb);\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Create a new pull request\r\n    * @see https://developer.github.com/v3/pulls/#create-a-pull-request\r\n    * @param {Object} options - the pull request description\r\n    * @param {Requestable.callback} cb - will receive the new pull request\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createPullRequest(options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/pulls`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Update a pull request\r\n    * @see https://developer.github.com/v3/pulls/#update-a-pull-request\r\n    * @param {number|string} number - the number of the pull request to update\r\n    * @param {Object} options - the pull request description\r\n    * @param {Requestable.callback} [cb] - will receive the pull request information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updatePullRequest(number, options, cb) {\r\n      return this._request('PATCH', `/repos/${this.__fullname}/pulls/${number}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * List the hooks for the repository\r\n    * @see https://developer.github.com/v3/repos/hooks/#list-hooks\r\n    * @param {Requestable.callback} cb - will receive the list of hooks\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listHooks(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/hooks`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a hook for the repository\r\n    * @see https://developer.github.com/v3/repos/hooks/#get-single-hook\r\n    * @param {number} id - the id of the webook\r\n    * @param {Requestable.callback} cb - will receive the details of the webook\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getHook(id, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/hooks/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Add a new hook to the repository\r\n    * @see https://developer.github.com/v3/repos/hooks/#create-a-hook\r\n    * @param {Object} options - the configuration describing the new hook\r\n    * @param {Requestable.callback} cb - will receive the new webhook\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createHook(options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/hooks`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit an existing webhook\r\n    * @see https://developer.github.com/v3/repos/hooks/#edit-a-hook\r\n    * @param {number} id - the id of the webhook\r\n    * @param {Object} options - the new description of the webhook\r\n    * @param {Requestable.callback} cb - will receive the updated webhook\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateHook(id, options, cb) {\r\n      return this._request('PATCH', `/repos/${this.__fullname}/hooks/${id}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a webhook\r\n    * @see https://developer.github.com/v3/repos/hooks/#delete-a-hook\r\n    * @param {number} id - the id of the webhook to be deleted\r\n    * @param {Requestable.callback} cb - will receive true if the call is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteHook(id, cb) {\r\n      return this._request('DELETE', `/repos/${this.__fullname}/hooks/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the deploy keys for the repository\r\n    * @see https://developer.github.com/v3/repos/keys/#list-deploy-keys\r\n    * @param {Requestable.callback} cb - will receive the list of deploy keys\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listKeys(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/keys`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a deploy key for the repository\r\n    * @see https://developer.github.com/v3/repos/keys/#get-a-deploy-key\r\n    * @param {number} id - the id of the deploy key\r\n    * @param {Requestable.callback} cb - will receive the details of the deploy key\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getKey(id, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/keys/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Add a new deploy key to the repository\r\n    * @see https://developer.github.com/v3/repos/keys/#add-a-new-deploy-key\r\n    * @param {Object} options - the configuration describing the new deploy key\r\n    * @param {Requestable.callback} cb - will receive the new deploy key\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createKey(options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/keys`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a deploy key\r\n    * @see https://developer.github.com/v3/repos/keys/#remove-a-deploy-key\r\n    * @param {number} id - the id of the deploy key to be deleted\r\n    * @param {Requestable.callback} cb - will receive true if the call is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteKey(id, cb) {\r\n      return this._request('DELETE', `/repos/${this.__fullname}/keys/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a file from a branch\r\n    * @see https://developer.github.com/v3/repos/contents/#delete-a-file\r\n    * @param {string} branch - the branch to delete from, or the default branch if not specified\r\n    * @param {string} path - the path of the file to remove\r\n    * @param {Requestable.callback} cb - will receive the commit in which the delete occurred\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteFile(branch, path, cb) {\r\n      return this.getSha(branch, path)\r\n         .then((response) => {\r\n            const deleteCommit = {\r\n               message: `Delete the file at '${path}'`,\r\n               sha: response.data.sha,\r\n               branch,\r\n            };\r\n            return this._request('DELETE', `/repos/${this.__fullname}/contents/${path}`, deleteCommit, cb);\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Change all references in a repo from oldPath to new_path\r\n    * @param {string} branch - the branch to carry out the reference change, or the default branch if not specified\r\n    * @param {string} oldPath - original path\r\n    * @param {string} newPath - new reference path\r\n    * @param {Requestable.callback} cb - will receive the commit in which the move occurred\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   move(branch, oldPath, newPath, cb) {\r\n      let oldSha;\r\n      return this.getRef(`heads/${branch}`)\r\n         .then(({data: {object}}) => this.getTree(`${object.sha}?recursive=true`))\r\n         .then(({data: {tree, sha}}) => {\r\n            oldSha = sha;\r\n            let newTree = tree.map((ref) => {\r\n               if (ref.path === oldPath) {\r\n                  ref.path = newPath;\r\n               }\r\n               if (ref.type === 'tree') {\r\n                  delete ref.sha;\r\n               }\r\n               return ref;\r\n            });\r\n            return this.createTree(newTree);\r\n         })\r\n         .then(({data: tree}) => this.commit(oldSha, tree.sha, `Renamed '${oldPath}' to '${newPath}'`))\r\n         .then(({data: commit}) => this.updateHead(`heads/${branch}`, commit.sha, true, cb));\r\n   }\r\n\r\n   /**\r\n    * Write a file to the repository\r\n    * @see https://developer.github.com/v3/repos/contents/#update-a-file\r\n    * @param {string} branch - the name of the branch\r\n    * @param {string} path - the path for the file\r\n    * @param {string} content - the contents of the file\r\n    * @param {string} message - the commit message\r\n    * @param {Object} [options] - commit options\r\n    * @param {Object} [options.author] - the author of the commit\r\n    * @param {Object} [options.commiter] - the committer\r\n    * @param {boolean} [options.encode] - true if the content should be base64 encoded\r\n    * @param {Requestable.callback} cb - will receive the new commit\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   writeFile(branch, path, content, message, options, cb) {\r\n      if (typeof options === 'function') {\r\n         cb = options;\r\n         options = {};\r\n      }\r\n      let filePath = path ? encodeURI(path) : '';\r\n      let shouldEncode = options.encode !== false;\r\n      let commit = {\r\n         branch,\r\n         message,\r\n         author: options.author,\r\n         committer: options.committer,\r\n         content: shouldEncode ? Base64.encode(content) : content,\r\n      };\r\n\r\n      return this.getSha(branch, filePath)\r\n         .then((response) => {\r\n            commit.sha = response.data.sha;\r\n            return this._request('PUT', `/repos/${this.__fullname}/contents/${filePath}`, commit, cb);\r\n         }, () => {\r\n            return this._request('PUT', `/repos/${this.__fullname}/contents/${filePath}`, commit, cb);\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Check if a repository is starred by you\r\n    * @see https://developer.github.com/v3/activity/starring/#check-if-you-are-starring-a-repository\r\n    * @param {Requestable.callback} cb - will receive true if the repository is starred and false if the repository\r\n    *                                  is not starred\r\n    * @return {Promise} - the promise for the http request {Boolean} [description]\r\n    */\r\n   isStarred(cb) {\r\n      return this._request204or404(`/user/starred/${this.__fullname}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Star a repository\r\n    * @see https://developer.github.com/v3/activity/starring/#star-a-repository\r\n    * @param {Requestable.callback} cb - will receive true if the repository is starred\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   star(cb) {\r\n      return this._request('PUT', `/user/starred/${this.__fullname}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Unstar a repository\r\n    * @see https://developer.github.com/v3/activity/starring/#unstar-a-repository\r\n    * @param {Requestable.callback} cb - will receive true if the repository is unstarred\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   unstar(cb) {\r\n      return this._request('DELETE', `/user/starred/${this.__fullname}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new release\r\n    * @see https://developer.github.com/v3/repos/releases/#create-a-release\r\n    * @param {Object} options - the description of the release\r\n    * @param {Requestable.callback} cb - will receive the newly created release\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createRelease(options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/releases`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a release\r\n    * @see https://developer.github.com/v3/repos/releases/#edit-a-release\r\n    * @param {string} id - the id of the release\r\n    * @param {Object} options - the description of the release\r\n    * @param {Requestable.callback} cb - will receive the modified release\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateRelease(id, options, cb) {\r\n      return this._request('PATCH', `/repos/${this.__fullname}/releases/${id}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about all releases\r\n    * @see https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository\r\n    * @param {Requestable.callback} cb - will receive the release information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listReleases(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/releases`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about a release\r\n    * @see https://developer.github.com/v3/repos/releases/#get-a-single-release\r\n    * @param {string} id - the id of the release\r\n    * @param {Requestable.callback} cb - will receive the release information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getRelease(id, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/releases/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a release\r\n    * @see https://developer.github.com/v3/repos/releases/#delete-a-release\r\n    * @param {string} id - the release to be deleted\r\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteRelease(id, cb) {\r\n      return this._request('DELETE', `/repos/${this.__fullname}/releases/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Merge a pull request\r\n    * @see https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button\r\n    * @param {number|string} number - the number of the pull request to merge\r\n    * @param {Object} options - the merge options for the pull request\r\n    * @param {Requestable.callback} [cb] - will receive the merge information if the operation is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   mergePullRequest(number, options, cb) {\r\n      return this._request('PUT', `/repos/${this.__fullname}/pulls/${number}/merge`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about all projects\r\n    * @see https://developer.github.com/v3/projects/#list-repository-projects\r\n    * @param {Requestable.callback} [cb] - will receive the list of projects\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listProjects(cb) {\r\n      return this._requestAllPages(`/repos/${this.__fullname}/projects`, {AcceptHeader: 'inertia-preview'}, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new project\r\n    * @see https://developer.github.com/v3/projects/#create-a-repository-project\r\n    * @param {Object} options - the description of the project\r\n    * @param {Requestable.callback} cb - will receive the newly created project\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createProject(options, cb) {\r\n      options = options || {};\r\n      options.AcceptHeader = 'inertia-preview';\r\n      return this._request('POST', `/repos/${this.__fullname}/projects`, options, cb);\r\n   }\r\n\r\n}\r\n\r\nmodule.exports = Repository;\r\n"],"file":"Repository.js"}