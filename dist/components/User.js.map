{"version":3,"names":[],"mappings":"","sources":["User.js"],"sourcesContent":["/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\nimport debug from 'debug';\r\nconst log = debug('github:user');\r\n\r\n/**\r\n * A User allows scoping of API requests to a particular Github user.\r\n */\r\nclass User extends Requestable {\r\n   /**\r\n    * Create a User.\r\n    * @param {string} [username] - the user to use for user-scoped queries\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(username, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__user = username;\r\n   }\r\n\r\n   /**\r\n    * Get the url for the request. (dependent on if we're requesting for the authenticated user or not)\r\n    * @private\r\n    * @param {string} endpoint - the endpoint being requested\r\n    * @return {string} - the resolved endpoint\r\n    */\r\n   __getScopedUrl(endpoint) {\r\n      if (this.__user) {\r\n         return endpoint ?\r\n            `/users/${this.__user}/${endpoint}` :\r\n            `/users/${this.__user}`\r\n            ;\r\n\r\n      } else { // eslint-disable-line\r\n         switch (endpoint) {\r\n            case '':\r\n               return '/user';\r\n\r\n            case 'notifications':\r\n            case 'gists':\r\n               return `/${endpoint}`;\r\n\r\n            default:\r\n               return `/user/${endpoint}`;\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * List the user's repositories\r\n    * @see https://developer.github.com/v3/repos/#list-user-repositories\r\n    * @param {Object} [options={}] - any options to refine the search\r\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listRepos(options, cb) {\r\n      if (typeof options === 'function') {\r\n         cb = options;\r\n         options = {};\r\n      }\r\n\r\n      options = this._getOptionsWithDefaults(options);\r\n\r\n      log(`Fetching repositories with options: ${JSON.stringify(options)}`);\r\n      return this._requestAllPages(this.__getScopedUrl('repos'), options, cb);\r\n   }\r\n\r\n   /**\r\n    * List the orgs that the user belongs to\r\n    * @see https://developer.github.com/v3/orgs/#list-user-organizations\r\n    * @param {Requestable.callback} [cb] - will receive the list of organizations\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listOrgs(cb) {\r\n      return this._request('GET', this.__getScopedUrl('orgs'), null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the user's gists\r\n    * @see https://developer.github.com/v3/gists/#list-a-users-gists\r\n    * @param {Requestable.callback} [cb] - will receive the list of gists\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listGists(cb) {\r\n      return this._request('GET', this.__getScopedUrl('gists'), null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the user's notifications\r\n    * @see https://developer.github.com/v3/activity/notifications/#list-your-notifications\r\n    * @param {Object} [options={}] - any options to refine the search\r\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listNotifications(options, cb) {\r\n      options = options || {};\r\n      if (typeof options === 'function') {\r\n         cb = options;\r\n         options = {};\r\n      }\r\n\r\n      options.since = this._dateToISO(options.since);\r\n      options.before = this._dateToISO(options.before);\r\n\r\n      return this._request('GET', this.__getScopedUrl('notifications'), options, cb);\r\n   }\r\n\r\n   /**\r\n    * Show the user's profile\r\n    * @see https://developer.github.com/v3/users/#get-a-single-user\r\n    * @param {Requestable.callback} [cb] - will receive the user's information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getProfile(cb) {\r\n      return this._request('GET', this.__getScopedUrl(''), null, cb);\r\n   }\r\n\r\n   /**\r\n    * Gets the list of starred repositories for the user\r\n    * @see https://developer.github.com/v3/activity/starring/#list-repositories-being-starred\r\n    * @param {Requestable.callback} [cb] - will receive the list of starred repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listStarredRepos(cb) {\r\n      let requestOptions = this._getOptionsWithDefaults();\r\n      return this._requestAllPages(this.__getScopedUrl('starred'), requestOptions, cb);\r\n   }\r\n\r\n   /**\r\n    * List email addresses for a user\r\n    * @see https://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user\r\n    * @param {Requestable.callback} [cb] - will receive the list of emails\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getEmails(cb) {\r\n      return this._request('GET', '/user/emails', null, cb);\r\n   }\r\n\r\n   /**\r\n    * Have the authenticated user follow this user\r\n    * @see https://developer.github.com/v3/users/followers/#follow-a-user\r\n    * @param {string} username - the user to follow\r\n    * @param {Requestable.callback} [cb] - will receive true if the request succeeds\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   follow(username, cb) {\r\n      return this._request('PUT', `/user/following/${this.__user}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Have the currently authenticated user unfollow this user\r\n    * @see https://developer.github.com/v3/users/followers/#follow-a-user\r\n    * @param {string} username - the user to unfollow\r\n    * @param {Requestable.callback} [cb] - receives true if the request succeeds\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   unfollow(username, cb) {\r\n      return this._request('DELETE', `/user/following/${this.__user}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new repository for the currently authenticated user\r\n    * @see https://developer.github.com/v3/repos/#create\r\n    * @param {object} options - the repository definition\r\n    * @param {Requestable.callback} [cb] - will receive the API response\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createRepo(options, cb) {\r\n      return this._request('POST', '/user/repos', options, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = User;\r\n"],"file":"User.js"}