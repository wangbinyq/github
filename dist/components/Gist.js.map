{"version":3,"names":[],"mappings":"","sources":["Gist.js"],"sourcesContent":["/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\n\r\n/**\r\n * A Gist can retrieve and modify gists.\r\n */\r\nclass Gist extends Requestable {\r\n   /**\r\n    * Create a Gist.\r\n    * @param {string} id - the id of the gist (not required when creating a gist)\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(id, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__id = id;\r\n   }\r\n\r\n   /**\r\n    * Fetch a gist.\r\n    * @see https://developer.github.com/v3/gists/#get-a-single-gist\r\n    * @param {Requestable.callback} [cb] - will receive the gist\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   read(cb) {\r\n      return this._request('GET', `/gists/${this.__id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new gist.\r\n    * @see https://developer.github.com/v3/gists/#create-a-gist\r\n    * @param {Object} gist - the data for the new gist\r\n    * @param {Requestable.callback} [cb] - will receive the new gist upon creation\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   create(gist, cb) {\r\n      return this._request('POST', '/gists', gist, cb)\r\n         .then((response) => {\r\n            this.__id = response.data.id;\r\n            return response;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Delete a gist.\r\n    * @see https://developer.github.com/v3/gists/#delete-a-gist\r\n    * @param {Requestable.callback} [cb] - will receive true if the request succeeds\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   delete(cb) {\r\n      return this._request('DELETE', `/gists/${this.__id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Fork a gist.\r\n    * @see https://developer.github.com/v3/gists/#fork-a-gist\r\n    * @param {Requestable.callback} [cb] - the function that will receive the gist\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   fork(cb) {\r\n      return this._request('POST', `/gists/${this.__id}/forks`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Update a gist.\r\n    * @see https://developer.github.com/v3/gists/#edit-a-gist\r\n    * @param {Object} gist - the new data for the gist\r\n    * @param {Requestable.callback} [cb] - the function that receives the API result\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   update(gist, cb) {\r\n      return this._request('PATCH', `/gists/${this.__id}`, gist, cb);\r\n   }\r\n\r\n   /**\r\n    * Star a gist.\r\n    * @see https://developer.github.com/v3/gists/#star-a-gist\r\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   star(cb) {\r\n      return this._request('PUT', `/gists/${this.__id}/star`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Unstar a gist.\r\n    * @see https://developer.github.com/v3/gists/#unstar-a-gist\r\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   unstar(cb) {\r\n      return this._request('DELETE', `/gists/${this.__id}/star`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Check if a gist is starred by the user.\r\n    * @see https://developer.github.com/v3/gists/#check-if-a-gist-is-starred\r\n    * @param {Requestable.callback} [cb] - will receive true if the gist is starred and false if the gist is not starred\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   isStarred(cb) {\r\n      return this._request204or404(`/gists/${this.__id}/star`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the gist's commits\r\n    * @see https://developer.github.com/v3/gists/#list-gist-commits\r\n    * @param {Requestable.callback} [cb] - will receive the array of commits\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   listCommits(cb) {\r\n      return this._requestAllPages(`/gists/${this.__id}/commits`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Fetch one of the gist's revision.\r\n    * @see https://developer.github.com/v3/gists/#get-a-specific-revision-of-a-gist\r\n    * @param {string} revision - the id of the revision\r\n    * @param {Requestable.callback} [cb] - will receive the revision\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   getRevision(revision, cb) {\r\n      return this._request('GET', `/gists/${this.__id}/${revision}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the gist's comments\r\n    * @see https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist\r\n    * @param {Requestable.callback} [cb] - will receive the array of comments\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listComments(cb) {\r\n      return this._requestAllPages(`/gists/${this.__id}/comments`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Fetch one of the gist's comments\r\n    * @see https://developer.github.com/v3/gists/comments/#get-a-single-comment\r\n    * @param {number} comment - the id of the comment\r\n    * @param {Requestable.callback} [cb] - will receive the comment\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   getComment(comment, cb) {\r\n      return this._request('GET', `/gists/${this.__id}/comments/${comment}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Comment on a gist\r\n    * @see https://developer.github.com/v3/gists/comments/#create-a-comment\r\n    * @param {string} comment - the comment to add\r\n    * @param {Requestable.callback} [cb] - the function that receives the API result\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   createComment(comment, cb) {\r\n      return this._request('POST', `/gists/${this.__id}/comments`, {body: comment}, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a comment on the gist\r\n    * @see https://developer.github.com/v3/gists/comments/#edit-a-comment\r\n    * @param {number} comment - the id of the comment\r\n    * @param {string} body - the new comment\r\n    * @param {Requestable.callback} [cb] - will receive the modified comment\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   editComment(comment, body, cb) {\r\n      return this._request('PATCH', `/gists/${this.__id}/comments/${comment}`, {body: body}, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a comment on the gist.\r\n    * @see https://developer.github.com/v3/gists/comments/#delete-a-comment\r\n    * @param {number} comment - the id of the comment\r\n    * @param {Requestable.callback} [cb] - will receive true if the request succeeds\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   deleteComment(comment, cb) {\r\n      return this._request('DELETE', `/gists/${this.__id}/comments/${comment}`, null, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = Gist;\r\n"],"file":"Gist.js"}