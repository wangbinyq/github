{"version":3,"sources":["node_modules/browser-pack/_prelude.js","lib/Gist.js","lib/GitHub.js","lib/Issue.js","lib/Markdown.js","lib/Organization.js","lib/Project.js","lib/RateLimit.js","lib/lib/Repository.js","lib/Requestable.js","lib/Search.js","lib/Team.js","lib/User.js"],"names":[],"mappings":"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","file":"GitHub.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\n\r\n/**\r\n * A Gist can retrieve and modify gists.\r\n */\r\nclass Gist extends Requestable {\r\n   /**\r\n    * Create a Gist.\r\n    * @param {string} id - the id of the gist (not required when creating a gist)\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(id, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__id = id;\r\n   }\r\n\r\n   /**\r\n    * Fetch a gist.\r\n    * @see https://developer.github.com/v3/gists/#get-a-single-gist\r\n    * @param {Requestable.callback} [cb] - will receive the gist\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   read(cb) {\r\n      return this._request('GET', `/gists/${this.__id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new gist.\r\n    * @see https://developer.github.com/v3/gists/#create-a-gist\r\n    * @param {Object} gist - the data for the new gist\r\n    * @param {Requestable.callback} [cb] - will receive the new gist upon creation\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   create(gist, cb) {\r\n      return this._request('POST', '/gists', gist, cb)\r\n         .then((response) => {\r\n            this.__id = response.data.id;\r\n            return response;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Delete a gist.\r\n    * @see https://developer.github.com/v3/gists/#delete-a-gist\r\n    * @param {Requestable.callback} [cb] - will receive true if the request succeeds\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   delete(cb) {\r\n      return this._request('DELETE', `/gists/${this.__id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Fork a gist.\r\n    * @see https://developer.github.com/v3/gists/#fork-a-gist\r\n    * @param {Requestable.callback} [cb] - the function that will receive the gist\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   fork(cb) {\r\n      return this._request('POST', `/gists/${this.__id}/forks`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Update a gist.\r\n    * @see https://developer.github.com/v3/gists/#edit-a-gist\r\n    * @param {Object} gist - the new data for the gist\r\n    * @param {Requestable.callback} [cb] - the function that receives the API result\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   update(gist, cb) {\r\n      return this._request('PATCH', `/gists/${this.__id}`, gist, cb);\r\n   }\r\n\r\n   /**\r\n    * Star a gist.\r\n    * @see https://developer.github.com/v3/gists/#star-a-gist\r\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   star(cb) {\r\n      return this._request('PUT', `/gists/${this.__id}/star`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Unstar a gist.\r\n    * @see https://developer.github.com/v3/gists/#unstar-a-gist\r\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   unstar(cb) {\r\n      return this._request('DELETE', `/gists/${this.__id}/star`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Check if a gist is starred by the user.\r\n    * @see https://developer.github.com/v3/gists/#check-if-a-gist-is-starred\r\n    * @param {Requestable.callback} [cb] - will receive true if the gist is starred and false if the gist is not starred\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   isStarred(cb) {\r\n      return this._request204or404(`/gists/${this.__id}/star`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the gist's commits\r\n    * @see https://developer.github.com/v3/gists/#list-gist-commits\r\n    * @param {Requestable.callback} [cb] - will receive the array of commits\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   listCommits(cb) {\r\n      return this._requestAllPages(`/gists/${this.__id}/commits`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Fetch one of the gist's revision.\r\n    * @see https://developer.github.com/v3/gists/#get-a-specific-revision-of-a-gist\r\n    * @param {string} revision - the id of the revision\r\n    * @param {Requestable.callback} [cb] - will receive the revision\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   getRevision(revision, cb) {\r\n      return this._request('GET', `/gists/${this.__id}/${revision}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the gist's comments\r\n    * @see https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist\r\n    * @param {Requestable.callback} [cb] - will receive the array of comments\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listComments(cb) {\r\n      return this._requestAllPages(`/gists/${this.__id}/comments`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Fetch one of the gist's comments\r\n    * @see https://developer.github.com/v3/gists/comments/#get-a-single-comment\r\n    * @param {number} comment - the id of the comment\r\n    * @param {Requestable.callback} [cb] - will receive the comment\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   getComment(comment, cb) {\r\n      return this._request('GET', `/gists/${this.__id}/comments/${comment}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Comment on a gist\r\n    * @see https://developer.github.com/v3/gists/comments/#create-a-comment\r\n    * @param {string} comment - the comment to add\r\n    * @param {Requestable.callback} [cb] - the function that receives the API result\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   createComment(comment, cb) {\r\n      return this._request('POST', `/gists/${this.__id}/comments`, {body: comment}, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a comment on the gist\r\n    * @see https://developer.github.com/v3/gists/comments/#edit-a-comment\r\n    * @param {number} comment - the id of the comment\r\n    * @param {string} body - the new comment\r\n    * @param {Requestable.callback} [cb] - will receive the modified comment\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   editComment(comment, body, cb) {\r\n      return this._request('PATCH', `/gists/${this.__id}/comments/${comment}`, {body: body}, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a comment on the gist.\r\n    * @see https://developer.github.com/v3/gists/comments/#delete-a-comment\r\n    * @param {number} comment - the id of the comment\r\n    * @param {Requestable.callback} [cb] - will receive true if the request succeeds\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   deleteComment(comment, cb) {\r\n      return this._request('DELETE', `/gists/${this.__id}/comments/${comment}`, null, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = Gist;\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n/* eslint valid-jsdoc: [\"error\", {\"requireReturnDescription\": false}] */\r\n\r\nimport Gist from './Gist';\r\nimport User from './User';\r\nimport Issue from './Issue';\r\nimport Search from './Search';\r\nimport RateLimit from './RateLimit';\r\nimport Repository from './Repository';\r\nimport Organization from './Organization';\r\nimport Team from './Team';\r\nimport Markdown from './Markdown';\r\nimport Project from './Project';\r\n\r\n/**\r\n * GitHub encapsulates the functionality to create various API wrapper objects.\r\n */\r\nclass GitHub {\r\n   /**\r\n    * Create a new GitHub.\r\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to Github. If auth is\r\n    *                                  not provided requests will be made unauthenticated\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(auth, apiBase = 'https://api.github.com') {\r\n      this.__apiBase = apiBase;\r\n      this.__auth = auth || {};\r\n   }\r\n\r\n   /**\r\n    * Create a new Gist wrapper\r\n    * @param {number} [id] - the id for the gist, leave undefined when creating a new gist\r\n    * @return {Gist}\r\n    */\r\n   getGist(id) {\r\n      return new Gist(id, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new User wrapper\r\n    * @param {string} [user] - the name of the user to get information about\r\n    *                        leave undefined for the authenticated user\r\n    * @return {User}\r\n    */\r\n   getUser(user) {\r\n      return new User(user, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Organization wrapper\r\n    * @param {string} organization - the name of the organization\r\n    * @return {Organization}\r\n    */\r\n   getOrganization(organization) {\r\n      return new Organization(organization, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * create a new Team wrapper\r\n    * @param {string} teamId - the name of the team\r\n    * @return {team}\r\n    */\r\n   getTeam(teamId) {\r\n      return new Team(teamId, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Repository wrapper\r\n    * @param {string} user - the user who owns the respository\r\n    * @param {string} repo - the name of the repository\r\n    * @return {Repository}\r\n    */\r\n   getRepo(user, repo) {\r\n      return new Repository(this._getFullName(user, repo), this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Issue wrapper\r\n    * @param {string} user - the user who owns the respository\r\n    * @param {string} repo - the name of the repository\r\n    * @return {Issue}\r\n    */\r\n   getIssues(user, repo) {\r\n      return new Issue(this._getFullName(user, repo), this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Search wrapper\r\n    * @param {string} query - the query to search for\r\n    * @return {Search}\r\n    */\r\n   search(query) {\r\n      return new Search(query, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new RateLimit wrapper\r\n    * @return {RateLimit}\r\n    */\r\n   getRateLimit() {\r\n      return new RateLimit(this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Markdown wrapper\r\n    * @return {Markdown}\r\n    */\r\n   getMarkdown() {\r\n      return new Markdown(this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Create a new Project wrapper\r\n    * @param {string} id - the id of the project\r\n    * @return {Project}\r\n    */\r\n   getProject(id) {\r\n      return new Project(id, this.__auth, this.__apiBase);\r\n   }\r\n\r\n   /**\r\n    * Computes the full repository name\r\n    * @param {string} user - the username (or the full name)\r\n    * @param {string} repo - the repository name, must not be passed if `user` is the full name\r\n    * @return {string} the repository's full name\r\n    */\r\n   _getFullName(user, repo) {\r\n      let fullname = user;\r\n\r\n      if (repo) {\r\n         fullname = `${user}/${repo}`;\r\n      }\r\n\r\n      return fullname;\r\n   }\r\n}\r\n\r\nmodule.exports = GitHub;\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\n\r\n/**\r\n * Issue wraps the functionality to get issues for repositories\r\n */\r\nclass Issue extends Requestable {\r\n   /**\r\n    * Create a new Issue\r\n    * @param {string} repository - the full name of the repository (`:user/:repo`) to get issues for\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(repository, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__repository = repository;\r\n   }\r\n\r\n   /**\r\n    * Create a new issue\r\n    * @see https://developer.github.com/v3/issues/#create-an-issue\r\n    * @param {Object} issueData - the issue to create\r\n    * @param {Requestable.callback} [cb] - will receive the created issue\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createIssue(issueData, cb) {\r\n      return this._request('POST', `/repos/${this.__repository}/issues`, issueData, cb);\r\n   }\r\n\r\n   /**\r\n    * List the issues for the repository\r\n    * @see https://developer.github.com/v3/issues/#list-issues-for-a-repository\r\n    * @param {Object} options - filtering options\r\n    * @param {Requestable.callback} [cb] - will receive the array of issues\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listIssues(options, cb) {\r\n      return this._requestAllPages(`/repos/${this.__repository}/issues`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * List the events for an issue\r\n    * @see https://developer.github.com/v3/issues/events/#list-events-for-an-issue\r\n    * @param {number} issue - the issue to get events for\r\n    * @param {Requestable.callback} [cb] - will receive the list of events\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listIssueEvents(issue, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/issues/${issue}/events`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List comments on an issue\r\n    * @see https://developer.github.com/v3/issues/comments/#list-comments-on-an-issue\r\n    * @param {number} issue - the id of the issue to get comments from\r\n    * @param {Requestable.callback} [cb] - will receive the comments\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listIssueComments(issue, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/issues/${issue}/comments`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a single comment on an issue\r\n    * @see https://developer.github.com/v3/issues/comments/#get-a-single-comment\r\n    * @param {number} id - the comment id to get\r\n    * @param {Requestable.callback} [cb] - will receive the comment\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getIssueComment(id, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/issues/comments/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Comment on an issue\r\n    * @see https://developer.github.com/v3/issues/comments/#create-a-comment\r\n    * @param {number} issue - the id of the issue to comment on\r\n    * @param {string} comment - the comment to add\r\n    * @param {Requestable.callback} [cb] - will receive the created comment\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createIssueComment(issue, comment, cb) {\r\n      return this._request('POST', `/repos/${this.__repository}/issues/${issue}/comments`, {body: comment}, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a comment on an issue\r\n    * @see https://developer.github.com/v3/issues/comments/#edit-a-comment\r\n    * @param {number} id - the comment id to edit\r\n    * @param {string} comment - the comment to edit\r\n    * @param {Requestable.callback} [cb] - will receive the edited comment\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   editIssueComment(id, comment, cb) {\r\n      return this._request('PATCH', `/repos/${this.__repository}/issues/comments/${id}`, {body: comment}, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a comment on an issue\r\n    * @see https://developer.github.com/v3/issues/comments/#delete-a-comment\r\n    * @param {number} id - the comment id to delete\r\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteIssueComment(id, cb) {\r\n      return this._request('DELETE', `/repos/${this.__repository}/issues/comments/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit an issue\r\n    * @see https://developer.github.com/v3/issues/#edit-an-issue\r\n    * @param {number} issue - the issue number to edit\r\n    * @param {Object} issueData - the new issue data\r\n    * @param {Requestable.callback} [cb] - will receive the modified issue\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   editIssue(issue, issueData, cb) {\r\n      return this._request('PATCH', `/repos/${this.__repository}/issues/${issue}`, issueData, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a particular issue\r\n    * @see https://developer.github.com/v3/issues/#get-a-single-issue\r\n    * @param {number} issue - the issue number to fetch\r\n    * @param {Requestable.callback} [cb] - will receive the issue\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getIssue(issue, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/issues/${issue}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the milestones for the repository\r\n    * @see https://developer.github.com/v3/issues/milestones/#list-milestones-for-a-repository\r\n    * @param {Object} options - filtering options\r\n    * @param {Requestable.callback} [cb] - will receive the array of milestones\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listMilestones(options, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/milestones`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a milestone\r\n    * @see https://developer.github.com/v3/issues/milestones/#get-a-single-milestone\r\n    * @param {string} milestone - the id of the milestone to fetch\r\n    * @param {Requestable.callback} [cb] - will receive the milestone\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getMilestone(milestone, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/milestones/${milestone}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new milestone\r\n    * @see https://developer.github.com/v3/issues/milestones/#create-a-milestone\r\n    * @param {Object} milestoneData - the milestone definition\r\n    * @param {Requestable.callback} [cb] - will receive the milestone\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createMilestone(milestoneData, cb) {\r\n      return this._request('POST', `/repos/${this.__repository}/milestones`, milestoneData, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a milestone\r\n    * @see https://developer.github.com/v3/issues/milestones/#update-a-milestone\r\n    * @param {string} milestone - the id of the milestone to edit\r\n    * @param {Object} milestoneData - the updates to make to the milestone\r\n    * @param {Requestable.callback} [cb] - will receive the updated milestone\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   editMilestone(milestone, milestoneData, cb) {\r\n      return this._request('PATCH', `/repos/${this.__repository}/milestones/${milestone}`, milestoneData, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a milestone (this is distinct from closing a milestone)\r\n    * @see https://developer.github.com/v3/issues/milestones/#delete-a-milestone\r\n    * @param {string} milestone - the id of the milestone to delete\r\n    * @param {Requestable.callback} [cb] - will receive the status\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteMilestone(milestone, cb) {\r\n      return this._request('DELETE', `/repos/${this.__repository}/milestones/${milestone}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new label\r\n    * @see https://developer.github.com/v3/issues/labels/#create-a-label\r\n    * @param {Object} labelData - the label definition\r\n    * @param {Requestable.callback} [cb] - will receive the object representing the label\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createLabel(labelData, cb) {\r\n      return this._request('POST', `/repos/${this.__repository}/labels`, labelData, cb);\r\n   }\r\n\r\n  /**\r\n   * List the labels for the repository\r\n   * @see https://developer.github.com/v3/issues/labels/#list-all-labels-for-this-repository\r\n   * @param {Object} options - filtering options\r\n   * @param {Requestable.callback} [cb] - will receive the array of labels\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   listLabels(options, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/labels`, options, cb);\r\n   }\r\n\r\n  /**\r\n   * Get a label\r\n   * @see https://developer.github.com/v3/issues/labels/#get-a-single-label\r\n   * @param {string} label - the name of the label to fetch\r\n   * @param {Requestable.callback} [cb] - will receive the label\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   getLabel(label, cb) {\r\n      return this._request('GET', `/repos/${this.__repository}/labels/${label}`, null, cb);\r\n   }\r\n\r\n  /**\r\n   * Edit a label\r\n   * @see https://developer.github.com/v3/issues/labels/#update-a-label\r\n   * @param {string} label - the name of the label to edit\r\n   * @param {Object} labelData - the updates to make to the label\r\n   * @param {Requestable.callback} [cb] - will receive the updated label\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   editLabel(label, labelData, cb) {\r\n      return this._request('PATCH', `/repos/${this.__repository}/labels/${label}`, labelData, cb);\r\n   }\r\n\r\n  /**\r\n   * Delete a label\r\n   * @see https://developer.github.com/v3/issues/labels/#delete-a-label\r\n   * @param {string} label - the name of the label to delete\r\n   * @param {Requestable.callback} [cb] - will receive the status\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   deleteLabel(label, cb) {\r\n      return this._request('DELETE', `/repos/${this.__repository}/labels/${label}`, null, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = Issue;\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\n\r\n/**\r\n * Renders html from Markdown text\r\n */\r\nclass Markdown extends Requestable {\r\n   /**\r\n    * construct a Markdown\r\n    * @param {Requestable.auth} auth - the credentials to authenticate to GitHub\r\n    * @param {string} [apiBase] - the base Github API URL\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   constructor(auth, apiBase) {\r\n      super(auth, apiBase);\r\n   }\r\n\r\n   /**\r\n    * Render html from Markdown text.\r\n    * @see https://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document\r\n    * @param {Object} options - conversion options\r\n    * @param {string} [options.text] - the markdown text to convert\r\n    * @param {string} [options.mode=markdown] - can be either `markdown` or `gfm`\r\n    * @param {string} [options.context] - repository name if mode is gfm\r\n    * @param {Requestable.callback} [cb] - will receive the converted html\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   render(options, cb) {\r\n      return this._request('POST', '/markdown', options, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = Markdown;\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\n\r\n/**\r\n * Organization encapsulates the functionality to create repositories in organizations\r\n */\r\nclass Organization extends Requestable {\r\n   /**\r\n    * Create a new Organization\r\n    * @param {string} organization - the name of the organization\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(organization, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__name = organization;\r\n   }\r\n\r\n   /**\r\n    * Create a repository in an organization\r\n    * @see https://developer.github.com/v3/repos/#create\r\n    * @param {Object} options - the repository definition\r\n    * @param {Requestable.callback} [cb] - will receive the created repository\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createRepo(options, cb) {\r\n      return this._request('POST', `/orgs/${this.__name}/repos`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * List the repositories in an organization\r\n    * @see https://developer.github.com/v3/repos/#list-organization-repositories\r\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getRepos(cb) {\r\n      let requestOptions = this._getOptionsWithDefaults({direction: 'desc'});\r\n\r\n      return this._requestAllPages(`/orgs/${this.__name}/repos`, requestOptions, cb);\r\n   }\r\n\r\n   /**\r\n    * Query if the user is a member or not\r\n    * @param {string} username - the user in question\r\n    * @param {Requestable.callback} [cb] - will receive true if the user is a member\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   isMember(username, cb) {\r\n      return this._request204or404(`/orgs/${this.__name}/members/${username}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the users who are members of the company\r\n    * @see https://developer.github.com/v3/orgs/members/#members-list\r\n    * @param {object} options - filtering options\r\n    * @param {string} [options.filter=all] - can be either `2fa_disabled` or `all`\r\n    * @param {string} [options.role=all] - can be one of: `all`, `admin`, or `member`\r\n    * @param {Requestable.callback} [cb] - will receive the list of users\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listMembers(options, cb) {\r\n      return this._request('GET', `/orgs/${this.__name}/members`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * List the Teams in the Organization\r\n    * @see https://developer.github.com/v3/orgs/teams/#list-teams\r\n    * @param {Requestable.callback} [cb] - will receive the list of teams\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getTeams(cb) {\r\n      return this._requestAllPages(`/orgs/${this.__name}/teams`, undefined, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a team\r\n    * @see https://developer.github.com/v3/orgs/teams/#create-team\r\n    * @param {object} options - Team creation parameters\r\n    * @param {string} options.name - The name of the team\r\n    * @param {string} [options.description] - Team description\r\n    * @param {string} [options.repo_names] - Repos to add the team to\r\n    * @param {string} [options.privacy=secret] - The level of privacy the team should have. Can be either one\r\n    * of: `secret`, or `closed`\r\n    * @param {Requestable.callback} [cb] - will receive the created team\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createTeam(options, cb) {\r\n      return this._request('POST', `/orgs/${this.__name}/teams`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about all projects\r\n    * @see https://developer.github.com/v3/projects/#list-organization-projects\r\n    * @param {Requestable.callback} [cb] - will receive the list of projects\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listProjects(cb) {\r\n      return this._requestAllPages(`/orgs/${this.__name}/projects`, {AcceptHeader: 'inertia-preview'}, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new project\r\n    * @see https://developer.github.com/v3/repos/projects/#create-a-project\r\n    * @param {Object} options - the description of the project\r\n    * @param {Requestable.callback} cb - will receive the newly created project\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createProject(options, cb) {\r\n      options = options || {};\r\n      options.AcceptHeader = 'inertia-preview';\r\n      return this._request('POST', `/orgs/${this.__name}/projects`, options, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = Organization;\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\n\r\n/**\r\n * Project encapsulates the functionality to create, query, and modify cards and columns.\r\n */\r\nclass Project extends Requestable {\r\n   /**\r\n    * Create a Project.\r\n    * @param {string} id - the id of the project\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(id, auth, apiBase) {\r\n      super(auth, apiBase, 'inertia-preview');\r\n      this.__id = id;\r\n   }\r\n\r\n   /**\r\n    * Get information about a project\r\n    * @see https://developer.github.com/v3/projects/#get-a-project\r\n    * @param {Requestable.callback} cb - will receive the project information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getProject(cb) {\r\n      return this._request('GET', `/projects/${this.__id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a project\r\n    * @see https://developer.github.com/v3/projects/#update-a-project\r\n    * @param {Object} options - the description of the project\r\n    * @param {Requestable.callback} cb - will receive the modified project\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateProject(options, cb) {\r\n      return this._request('PATCH', `/projects/${this.__id}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a project\r\n    * @see https://developer.github.com/v3/projects/#delete-a-project\r\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteProject(cb) {\r\n      return this._request('DELETE', `/projects/${this.__id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about all columns of a project\r\n    * @see https://developer.github.com/v3/projects/columns/#list-project-columns\r\n    * @param {Requestable.callback} [cb] - will receive the list of columns\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listProjectColumns(cb) {\r\n      return this._requestAllPages(`/projects/${this.__id}/columns`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about a column\r\n    * @see https://developer.github.com/v3/projects/columns/#get-a-project-column\r\n    * @param {string} colId - the id of the column\r\n    * @param {Requestable.callback} cb - will receive the column information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getProjectColumn(colId, cb) {\r\n      return this._request('GET', `/projects/columns/${colId}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new column\r\n    * @see https://developer.github.com/v3/projects/columns/#create-a-project-column\r\n    * @param {Object} options - the description of the column\r\n    * @param {Requestable.callback} cb - will receive the newly created column\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createProjectColumn(options, cb) {\r\n      return this._request('POST', `/projects/${this.__id}/columns`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a column\r\n    * @see https://developer.github.com/v3/projects/columns/#update-a-project-column\r\n    * @param {string} colId - the column id\r\n    * @param {Object} options - the description of the column\r\n    * @param {Requestable.callback} cb - will receive the modified column\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateProjectColumn(colId, options, cb) {\r\n      return this._request('PATCH', `/projects/columns/${colId}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a column\r\n    * @see https://developer.github.com/v3/projects/columns/#delete-a-project-column\r\n    * @param {string} colId - the column to be deleted\r\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteProjectColumn(colId, cb) {\r\n      return this._request('DELETE', `/projects/columns/${colId}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Move a column\r\n    * @see https://developer.github.com/v3/projects/columns/#move-a-project-column\r\n    * @param {string} colId - the column to be moved\r\n    * @param {string} position - can be one of first, last, or after:<column-id>,\r\n    * where <column-id> is the id value of a column in the same project.\r\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   moveProjectColumn(colId, position, cb) {\r\n      return this._request(\r\n         'POST',\r\n         `/projects/columns/${colId}/moves`,\r\n         {position: position},\r\n         cb\r\n      );\r\n   }\r\n\r\n  /**\r\n   * Get information about all cards of a project\r\n   * @see https://developer.github.com/v3/projects/cards/#list-project-cards\r\n   * @param {Requestable.callback} [cb] - will receive the list of cards\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   listProjectCards(cb) {\r\n      return this.listProjectColumns()\r\n        .then(({data}) => {\r\n           return Promise.all(data.map((column) => {\r\n              return this._requestAllPages(`/projects/columns/${column.id}/cards`, null);\r\n           }));\r\n        }).then((cardsInColumns) => {\r\n           const cards = cardsInColumns.reduce((prev, {data}) => {\r\n              prev.push(...data);\r\n              return prev;\r\n           }, []);\r\n           if (cb) {\r\n              cb(null, cards);\r\n           }\r\n           return cards;\r\n        }).catch((err) => {\r\n           if (cb) {\r\n              cb(err);\r\n              return;\r\n           }\r\n           throw err;\r\n        });\r\n   }\r\n\r\n   /**\r\n   * Get information about all cards of a column\r\n   * @see https://developer.github.com/v3/projects/cards/#list-project-cards\r\n   * @param {string} colId - the id of the column\r\n   * @param {Requestable.callback} [cb] - will receive the list of cards\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   listColumnCards(colId, cb) {\r\n      return this._requestAllPages(`/projects/columns/${colId}/cards`, null, cb);\r\n   }\r\n\r\n   /**\r\n   * Get information about a card\r\n   * @see https://developer.github.com/v3/projects/cards/#get-a-project-card\r\n   * @param {string} cardId - the id of the card\r\n   * @param {Requestable.callback} cb - will receive the card information\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   getProjectCard(cardId, cb) {\r\n      return this._request('GET', `/projects/columns/cards/${cardId}`, null, cb);\r\n   }\r\n\r\n   /**\r\n   * Create a new card\r\n   * @see https://developer.github.com/v3/projects/cards/#create-a-project-card\r\n   * @param {string} colId - the column id\r\n   * @param {Object} options - the description of the card\r\n   * @param {Requestable.callback} cb - will receive the newly created card\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   createProjectCard(colId, options, cb) {\r\n      return this._request('POST', `/projects/columns/${colId}/cards`, options, cb);\r\n   }\r\n\r\n   /**\r\n   * Edit a card\r\n   * @see https://developer.github.com/v3/projects/cards/#update-a-project-card\r\n   * @param {string} cardId - the card id\r\n   * @param {Object} options - the description of the card\r\n   * @param {Requestable.callback} cb - will receive the modified card\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   updateProjectCard(cardId, options, cb) {\r\n      return this._request('PATCH', `/projects/columns/cards/${cardId}`, options, cb);\r\n   }\r\n\r\n   /**\r\n   * Delete a card\r\n   * @see https://developer.github.com/v3/projects/cards/#delete-a-project-card\r\n   * @param {string} cardId - the card to be deleted\r\n   * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   deleteProjectCard(cardId, cb) {\r\n      return this._request('DELETE', `/projects/columns/cards/${cardId}`, null, cb);\r\n   }\r\n\r\n   /**\r\n   * Move a card\r\n   * @see https://developer.github.com/v3/projects/cards/#move-a-project-card\r\n   * @param {string} cardId - the card to be moved\r\n   * @param {string} position - can be one of top, bottom, or after:<card-id>,\r\n   * where <card-id> is the id value of a card in the same project.\r\n   * @param {string} colId - the id value of a column in the same project.\r\n   * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n   * @return {Promise} - the promise for the http request\r\n   */\r\n   moveProjectCard(cardId, position, colId, cb) {\r\n      return this._request(\r\n         'POST',\r\n         `/projects/columns/cards/${cardId}/moves`,\r\n         {position: position, column_id: colId}, // eslint-disable-line camelcase\r\n         cb\r\n      );\r\n   }\r\n}\r\n\r\nmodule.exports = Project;\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\n\r\n/**\r\n * RateLimit allows users to query their rate-limit status\r\n */\r\nclass RateLimit extends Requestable {\r\n   /**\r\n    * construct a RateLimit\r\n    * @param {Requestable.auth} auth - the credentials to authenticate to GitHub\r\n    * @param {string} [apiBase] - the base Github API URL\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   constructor(auth, apiBase) {\r\n      super(auth, apiBase);\r\n   }\r\n\r\n   /**\r\n    * Query the current rate limit\r\n    * @see https://developer.github.com/v3/rate_limit/\r\n    * @param {Requestable.callback} [cb] - will receive the rate-limit data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getRateLimit(cb) {\r\n      return this._request('GET', '/rate_limit', null, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = RateLimit;\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\nimport Utf8 from 'utf8';\r\nimport {\r\n   Base64,\r\n} from 'js-base64';\r\nimport debug from 'debug';\r\nconst log = debug('github:repository');\r\n\r\n/**\r\n * Respository encapsulates the functionality to create, query, and modify files.\r\n */\r\nclass Repository extends Requestable {\r\n   /**\r\n    * Create a Repository.\r\n    * @param {string} fullname - the full name of the repository\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(fullname, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__fullname = fullname;\r\n      this.__currentTree = {\r\n         branch: null,\r\n         sha: null,\r\n      };\r\n   }\r\n\r\n   /**\r\n    * Get a reference\r\n    * @see https://developer.github.com/v3/git/refs/#get-a-reference\r\n    * @param {string} ref - the reference to get\r\n    * @param {Requestable.callback} [cb] - will receive the reference's refSpec or a list of refSpecs that match `ref`\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getRef(ref, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/git/refs/${ref}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a reference\r\n    * @see https://developer.github.com/v3/git/refs/#create-a-reference\r\n    * @param {Object} options - the object describing the ref\r\n    * @param {Requestable.callback} [cb] - will receive the ref\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createRef(options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/git/refs`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a reference\r\n    * @see https://developer.github.com/v3/git/refs/#delete-a-reference\r\n    * @param {string} ref - the name of the ref to delte\r\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteRef(ref, cb) {\r\n      return this._request('DELETE', `/repos/${this.__fullname}/git/refs/${ref}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a repository\r\n    * @see https://developer.github.com/v3/repos/#delete-a-repository\r\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteRepo(cb) {\r\n      return this._request('DELETE', `/repos/${this.__fullname}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the tags on a repository\r\n    * @see https://developer.github.com/v3/repos/#list-tags\r\n    * @param {Requestable.callback} [cb] - will receive the tag data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listTags(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/tags`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the open pull requests on the repository\r\n    * @see https://developer.github.com/v3/pulls/#list-pull-requests\r\n    * @param {Object} options - options to filter the search\r\n    * @param {Requestable.callback} [cb] - will receive the list of PRs\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listPullRequests(options, cb) {\r\n      options = options || {};\r\n      return this._request('GET', `/repos/${this.__fullname}/pulls`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about a specific pull request\r\n    * @see https://developer.github.com/v3/pulls/#get-a-single-pull-request\r\n    * @param {number} number - the PR you wish to fetch\r\n    * @param {Requestable.callback} [cb] - will receive the PR from the API\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getPullRequest(number, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/pulls/${number}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the files of a specific pull request\r\n    * @see https://developer.github.com/v3/pulls/#list-pull-requests-files\r\n    * @param {number|string} number - the PR you wish to fetch\r\n    * @param {Requestable.callback} [cb] - will receive the list of files from the API\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listPullRequestFiles(number, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/pulls/${number}/files`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Compare two branches/commits/repositories\r\n    * @see https://developer.github.com/v3/repos/commits/#compare-two-commits\r\n    * @param {string} base - the base commit\r\n    * @param {string} head - the head commit\r\n    * @param {Requestable.callback} cb - will receive the comparison\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   compareBranches(base, head, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/compare/${base}...${head}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List all the branches for the repository\r\n    * @see https://developer.github.com/v3/repos/#list-branches\r\n    * @param {Requestable.callback} cb - will receive the list of branches\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listBranches(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/branches`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a raw blob from the repository\r\n    * @see https://developer.github.com/v3/git/blobs/#get-a-blob\r\n    * @param {string} sha - the sha of the blob to fetch\r\n    * @param {Requestable.callback} cb - will receive the blob from the API\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getBlob(sha, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/git/blobs/${sha}`, null, cb, 'raw');\r\n   }\r\n\r\n   /**\r\n    * Get a single branch\r\n    * @see https://developer.github.com/v3/repos/branches/#get-branch\r\n    * @param {string} branch - the name of the branch to fetch\r\n    * @param {Requestable.callback} cb - will receive the branch from the API\r\n    * @returns {Promise} - the promise for the http request\r\n    */\r\n   getBranch(branch, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/branches/${branch}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a commit from the repository\r\n    * @see https://developer.github.com/v3/repos/commits/#get-a-single-commit\r\n    * @param {string} sha - the sha for the commit to fetch\r\n    * @param {Requestable.callback} cb - will receive the commit data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getCommit(sha, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/git/commits/${sha}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the commits on a repository, optionally filtering by path, author or time range\r\n    * @see https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository\r\n    * @param {Object} [options] - the filtering options for commits\r\n    * @param {string} [options.sha] - the SHA or branch to start from\r\n    * @param {string} [options.path] - the path to search on\r\n    * @param {string} [options.author] - the commit author\r\n    * @param {(Date|string)} [options.since] - only commits after this date will be returned\r\n    * @param {(Date|string)} [options.until] - only commits before this date will be returned\r\n    * @param {Requestable.callback} cb - will receive the list of commits found matching the criteria\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listCommits(options, cb) {\r\n      options = options || {};\r\n\r\n      options.since = this._dateToISO(options.since);\r\n      options.until = this._dateToISO(options.until);\r\n\r\n      return this._request('GET', `/repos/${this.__fullname}/commits`, options, cb);\r\n   }\r\n\r\n    /**\r\n     * Gets a single commit information for a repository\r\n     * @see https://developer.github.com/v3/repos/commits/#get-a-single-commit\r\n     * @param {string} ref - the reference for the commit-ish\r\n     * @param {Requestable.callback} cb - will receive the commit information\r\n     * @return {Promise} - the promise for the http request\r\n     */\r\n   getSingleCommit(ref, cb) {\r\n      ref = ref || '';\r\n      return this._request('GET', `/repos/${this.__fullname}/commits/${ref}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get tha sha for a particular object in the repository. This is a convenience function\r\n    * @see https://developer.github.com/v3/repos/contents/#get-contents\r\n    * @param {string} [branch] - the branch to look in, or the repository's default branch if omitted\r\n    * @param {string} path - the path of the file or directory\r\n    * @param {Requestable.callback} cb - will receive a description of the requested object, including a `SHA` property\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getSha(branch, path, cb) {\r\n      branch = branch ? `?ref=${branch}` : '';\r\n      return this._request('GET', `/repos/${this.__fullname}/contents/${path}${branch}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the commit statuses for a particular sha, branch, or tag\r\n    * @see https://developer.github.com/v3/repos/statuses/#list-statuses-for-a-specific-ref\r\n    * @param {string} sha - the sha, branch, or tag to get statuses for\r\n    * @param {Requestable.callback} cb - will receive the list of statuses\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listStatuses(sha, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/commits/${sha}/statuses`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a description of a git tree\r\n    * @see https://developer.github.com/v3/git/trees/#get-a-tree\r\n    * @param {string} treeSHA - the SHA of the tree to fetch\r\n    * @param {Requestable.callback} cb - will receive the callback data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getTree(treeSHA, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/git/trees/${treeSHA}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a blob\r\n    * @see https://developer.github.com/v3/git/blobs/#create-a-blob\r\n    * @param {(string|Buffer|Blob)} content - the content to add to the repository\r\n    * @param {Requestable.callback} cb - will receive the details of the created blob\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createBlob(content, cb) {\r\n      let postBody = this._getContentObject(content);\r\n\r\n      log('sending content', postBody);\r\n      return this._request('POST', `/repos/${this.__fullname}/git/blobs`, postBody, cb);\r\n   }\r\n\r\n   /**\r\n    * Get the object that represents the provided content\r\n    * @param {string|Buffer|Blob} content - the content to send to the server\r\n    * @return {Object} the representation of `content` for the GitHub API\r\n    */\r\n   _getContentObject(content) {\r\n      if (typeof content === 'string') {\r\n         log('contet is a string');\r\n         return {\r\n            content: Utf8.encode(content),\r\n            encoding: 'utf-8',\r\n         };\r\n\r\n      } else if (typeof Buffer !== 'undefined' && content instanceof Buffer) {\r\n         log('We appear to be in Node');\r\n         return {\r\n            content: content.toString('base64'),\r\n            encoding: 'base64',\r\n         };\r\n\r\n      } else if (typeof Blob !== 'undefined' && content instanceof Blob) {\r\n         log('We appear to be in the browser');\r\n         return {\r\n            content: Base64.encode(content),\r\n            encoding: 'base64',\r\n         };\r\n\r\n      } else { // eslint-disable-line\r\n         log(`Not sure what this content is: ${typeof content}, ${JSON.stringify(content)}`);\r\n         throw new Error('Unknown content passed to postBlob. Must be string or Buffer (node) or Blob (web)');\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Update a tree in Git\r\n    * @see https://developer.github.com/v3/git/trees/#create-a-tree\r\n    * @param {string} baseTreeSHA - the SHA of the tree to update\r\n    * @param {string} path - the path for the new file\r\n    * @param {string} blobSHA - the SHA for the blob to put at `path`\r\n    * @param {Requestable.callback} cb - will receive the new tree that is created\r\n    * @return {Promise} - the promise for the http request\r\n    * @deprecated use {@link Repository#createTree} instead\r\n    */\r\n   updateTree(baseTreeSHA, path, blobSHA, cb) {\r\n      let newTree = {\r\n         base_tree: baseTreeSHA, // eslint-disable-line\r\n         tree: [{\r\n            path: path,\r\n            sha: blobSHA,\r\n            mode: '100644',\r\n            type: 'blob',\r\n         }],\r\n      };\r\n\r\n      return this._request('POST', `/repos/${this.__fullname}/git/trees`, newTree, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new tree in git\r\n    * @see https://developer.github.com/v3/git/trees/#create-a-tree\r\n    * @param {Object} tree - the tree to create\r\n    * @param {string} baseSHA - the root sha of the tree\r\n    * @param {Requestable.callback} cb - will receive the new tree that is created\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createTree(tree, baseSHA, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/git/trees`, {\r\n         tree,\r\n         base_tree: baseSHA, // eslint-disable-line camelcase\r\n      }, cb);\r\n   }\r\n\r\n   /**\r\n    * Add a commit to the repository\r\n    * @see https://developer.github.com/v3/git/commits/#create-a-commit\r\n    * @param {string} parent - the SHA of the parent commit\r\n    * @param {string} tree - the SHA of the tree for this commit\r\n    * @param {string} message - the commit message\r\n    * @param {Requestable.callback} cb - will receive the commit that is created\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   commit(parent, tree, message, cb) {\r\n      let data = {\r\n         message,\r\n         tree,\r\n         parents: [parent],\r\n      };\r\n\r\n      return this._request('POST', `/repos/${this.__fullname}/git/commits`, data, cb)\r\n         .then((response) => {\r\n            this.__currentTree.sha = response.data.sha; // Update latest commit\r\n            return response;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Update a ref\r\n    * @see https://developer.github.com/v3/git/refs/#update-a-reference\r\n    * @param {string} ref - the ref to update\r\n    * @param {string} commitSHA - the SHA to point the reference to\r\n    * @param {boolean} force - indicates whether to force or ensure a fast-forward update\r\n    * @param {Requestable.callback} cb - will receive the updated ref back\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateHead(ref, commitSHA, force, cb) {\r\n      return this._request('PATCH', `/repos/${this.__fullname}/git/refs/${ref}`, {\r\n         sha: commitSHA,\r\n         force: force,\r\n      }, cb);\r\n   }\r\n\r\n   /**\r\n    * Update commit status\r\n    * @see https://developer.github.com/v3/repos/statuses/\r\n    * @param {string} commitSHA - the SHA of the commit that should be updated\r\n    * @param {object} options - Commit status parameters\r\n    * @param {string} options.state - The state of the status. Can be one of: pending, success, error, or failure.\r\n    * @param {string} [options.target_url] - The target URL to associate with this status.\r\n    * @param {string} [options.description] - A short description of the status.\r\n    * @param {string} [options.context] - A string label to differentiate this status among CI systems.\r\n    * @param {Requestable.callback} cb - will receive the updated commit back\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateStatus(commitSHA, options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/statuses/${commitSHA}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Update repository information\r\n    * @see https://developer.github.com/v3/repos/#edit\r\n    * @param {object} options - New parameters that will be set to the repository\r\n    * @param {string} options.name - Name of the repository\r\n    * @param {string} [options.description] - A short description of the repository\r\n    * @param {string} [options.homepage] - A URL with more information about the repository\r\n    * @param {boolean} [options.private] - Either true to make the repository private, or false to make it public.\r\n    * @param {boolean} [options.has_issues] - Either true to enable issues for this repository, false to disable them.\r\n    * @param {boolean} [options.has_wiki] - Either true to enable the wiki for this repository, false to disable it.\r\n    * @param {boolean} [options.has_downloads] - Either true to enable downloads, false to disable them.\r\n    * @param {string} [options.default_branch] - Updates the default branch for this repository.\r\n    * @param {Requestable.callback} cb - will receive the updated repository back\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateRepository(options, cb) {\r\n      return this._request('PATCH', `/repos/${this.__fullname}`, options, cb);\r\n   }\r\n\r\n  /**\r\n    * Get information about the repository\r\n    * @see https://developer.github.com/v3/repos/#get\r\n    * @param {Requestable.callback} cb - will receive the information about the repository\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getDetails(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the contributors to the repository\r\n    * @see https://developer.github.com/v3/repos/#list-contributors\r\n    * @param {Requestable.callback} cb - will receive the list of contributors\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getContributors(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/contributors`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the contributor stats to the repository\r\n    * @see https://developer.github.com/v3/repos/#list-contributors\r\n    * @param {Requestable.callback} cb - will receive the list of contributors\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getContributorStats(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/stats/contributors`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the users who are collaborators on the repository. The currently authenticated user must have\r\n    * push access to use this method\r\n    * @see https://developer.github.com/v3/repos/collaborators/#list-collaborators\r\n    * @param {Requestable.callback} cb - will receive the list of collaborators\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getCollaborators(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/collaborators`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Check if a user is a collaborator on the repository\r\n    * @see https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-collaborator\r\n    * @param {string} username - the user to check\r\n    * @param {Requestable.callback} cb - will receive true if the user is a collaborator and false if they are not\r\n    * @return {Promise} - the promise for the http request {Boolean} [description]\r\n    */\r\n   isCollaborator(username, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/collaborators/${username}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get the contents of a repository\r\n    * @see https://developer.github.com/v3/repos/contents/#get-contents\r\n    * @param {string} ref - the ref to check\r\n    * @param {string} path - the path containing the content to fetch\r\n    * @param {boolean} raw - `true` if the results should be returned raw instead of GitHub's normalized format\r\n    * @param {Requestable.callback} cb - will receive the fetched data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getContents(ref, path, raw, cb) {\r\n      path = path ? `${encodeURI(path)}` : '';\r\n      return this._request('GET', `/repos/${this.__fullname}/contents/${path}`, {\r\n         ref,\r\n      }, cb, raw);\r\n   }\r\n\r\n   /**\r\n    * Get the README of a repository\r\n    * @see https://developer.github.com/v3/repos/contents/#get-the-readme\r\n    * @param {string} ref - the ref to check\r\n    * @param {boolean} raw - `true` if the results should be returned raw instead of GitHub's normalized format\r\n    * @param {Requestable.callback} cb - will receive the fetched data\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getReadme(ref, raw, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/readme`, {\r\n         ref,\r\n      }, cb, raw);\r\n   }\r\n\r\n   /**\r\n    * Fork a repository\r\n    * @see https://developer.github.com/v3/repos/forks/#create-a-fork\r\n    * @param {Requestable.callback} cb - will receive the information about the newly created fork\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   fork(cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/forks`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List a repository's forks\r\n    * @see https://developer.github.com/v3/repos/forks/#list-forks\r\n    * @param {Requestable.callback} cb - will receive the list of repositories forked from this one\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listForks(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/forks`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new branch from an existing branch.\r\n    * @param {string} [oldBranch=master] - the name of the existing branch\r\n    * @param {string} newBranch - the name of the new branch\r\n    * @param {Requestable.callback} cb - will receive the commit data for the head of the new branch\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createBranch(oldBranch, newBranch, cb) {\r\n      if (typeof newBranch === 'function') {\r\n         cb = newBranch;\r\n         newBranch = oldBranch;\r\n         oldBranch = 'master';\r\n      }\r\n\r\n      return this.getRef(`heads/${oldBranch}`)\r\n         .then((response) => {\r\n            let sha = response.data.object.sha;\r\n            return this.createRef({\r\n               sha,\r\n               ref: `refs/heads/${newBranch}`,\r\n            }, cb);\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Create a new pull request\r\n    * @see https://developer.github.com/v3/pulls/#create-a-pull-request\r\n    * @param {Object} options - the pull request description\r\n    * @param {Requestable.callback} cb - will receive the new pull request\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createPullRequest(options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/pulls`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Update a pull request\r\n    * @see https://developer.github.com/v3/pulls/#update-a-pull-request\r\n    * @param {number|string} number - the number of the pull request to update\r\n    * @param {Object} options - the pull request description\r\n    * @param {Requestable.callback} [cb] - will receive the pull request information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updatePullRequest(number, options, cb) {\r\n      return this._request('PATCH', `/repos/${this.__fullname}/pulls/${number}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * List the hooks for the repository\r\n    * @see https://developer.github.com/v3/repos/hooks/#list-hooks\r\n    * @param {Requestable.callback} cb - will receive the list of hooks\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listHooks(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/hooks`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a hook for the repository\r\n    * @see https://developer.github.com/v3/repos/hooks/#get-single-hook\r\n    * @param {number} id - the id of the webook\r\n    * @param {Requestable.callback} cb - will receive the details of the webook\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getHook(id, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/hooks/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Add a new hook to the repository\r\n    * @see https://developer.github.com/v3/repos/hooks/#create-a-hook\r\n    * @param {Object} options - the configuration describing the new hook\r\n    * @param {Requestable.callback} cb - will receive the new webhook\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createHook(options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/hooks`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit an existing webhook\r\n    * @see https://developer.github.com/v3/repos/hooks/#edit-a-hook\r\n    * @param {number} id - the id of the webhook\r\n    * @param {Object} options - the new description of the webhook\r\n    * @param {Requestable.callback} cb - will receive the updated webhook\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateHook(id, options, cb) {\r\n      return this._request('PATCH', `/repos/${this.__fullname}/hooks/${id}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a webhook\r\n    * @see https://developer.github.com/v3/repos/hooks/#delete-a-hook\r\n    * @param {number} id - the id of the webhook to be deleted\r\n    * @param {Requestable.callback} cb - will receive true if the call is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteHook(id, cb) {\r\n      return this._request('DELETE', `/repos/${this.__fullname}/hooks/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the deploy keys for the repository\r\n    * @see https://developer.github.com/v3/repos/keys/#list-deploy-keys\r\n    * @param {Requestable.callback} cb - will receive the list of deploy keys\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listKeys(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/keys`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get a deploy key for the repository\r\n    * @see https://developer.github.com/v3/repos/keys/#get-a-deploy-key\r\n    * @param {number} id - the id of the deploy key\r\n    * @param {Requestable.callback} cb - will receive the details of the deploy key\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getKey(id, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/keys/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Add a new deploy key to the repository\r\n    * @see https://developer.github.com/v3/repos/keys/#add-a-new-deploy-key\r\n    * @param {Object} options - the configuration describing the new deploy key\r\n    * @param {Requestable.callback} cb - will receive the new deploy key\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createKey(options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/keys`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a deploy key\r\n    * @see https://developer.github.com/v3/repos/keys/#remove-a-deploy-key\r\n    * @param {number} id - the id of the deploy key to be deleted\r\n    * @param {Requestable.callback} cb - will receive true if the call is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteKey(id, cb) {\r\n      return this._request('DELETE', `/repos/${this.__fullname}/keys/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a file from a branch\r\n    * @see https://developer.github.com/v3/repos/contents/#delete-a-file\r\n    * @param {string} branch - the branch to delete from, or the default branch if not specified\r\n    * @param {string} path - the path of the file to remove\r\n    * @param {Requestable.callback} cb - will receive the commit in which the delete occurred\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteFile(branch, path, cb) {\r\n      return this.getSha(branch, path)\r\n         .then((response) => {\r\n            const deleteCommit = {\r\n               message: `Delete the file at '${path}'`,\r\n               sha: response.data.sha,\r\n               branch,\r\n            };\r\n            return this._request('DELETE', `/repos/${this.__fullname}/contents/${path}`, deleteCommit, cb);\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Change all references in a repo from oldPath to new_path\r\n    * @param {string} branch - the branch to carry out the reference change, or the default branch if not specified\r\n    * @param {string} oldPath - original path\r\n    * @param {string} newPath - new reference path\r\n    * @param {Requestable.callback} cb - will receive the commit in which the move occurred\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   move(branch, oldPath, newPath, cb) {\r\n      let oldSha;\r\n      return this.getRef(`heads/${branch}`)\r\n         .then(({data: {object}}) => this.getTree(`${object.sha}?recursive=true`))\r\n         .then(({data: {tree, sha}}) => {\r\n            oldSha = sha;\r\n            let newTree = tree.map((ref) => {\r\n               if (ref.path === oldPath) {\r\n                  ref.path = newPath;\r\n               }\r\n               if (ref.type === 'tree') {\r\n                  delete ref.sha;\r\n               }\r\n               return ref;\r\n            });\r\n            return this.createTree(newTree);\r\n         })\r\n         .then(({data: tree}) => this.commit(oldSha, tree.sha, `Renamed '${oldPath}' to '${newPath}'`))\r\n         .then(({data: commit}) => this.updateHead(`heads/${branch}`, commit.sha, true, cb));\r\n   }\r\n\r\n   /**\r\n    * Write a file to the repository\r\n    * @see https://developer.github.com/v3/repos/contents/#update-a-file\r\n    * @param {string} branch - the name of the branch\r\n    * @param {string} path - the path for the file\r\n    * @param {string} content - the contents of the file\r\n    * @param {string} message - the commit message\r\n    * @param {Object} [options] - commit options\r\n    * @param {Object} [options.author] - the author of the commit\r\n    * @param {Object} [options.commiter] - the committer\r\n    * @param {boolean} [options.encode] - true if the content should be base64 encoded\r\n    * @param {Requestable.callback} cb - will receive the new commit\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   writeFile(branch, path, content, message, options, cb) {\r\n      if (typeof options === 'function') {\r\n         cb = options;\r\n         options = {};\r\n      }\r\n      let filePath = path ? encodeURI(path) : '';\r\n      let shouldEncode = options.encode !== false;\r\n      let commit = {\r\n         branch,\r\n         message,\r\n         author: options.author,\r\n         committer: options.committer,\r\n         content: shouldEncode ? Base64.encode(content) : content,\r\n      };\r\n\r\n      return this.getSha(branch, filePath)\r\n         .then((response) => {\r\n            commit.sha = response.data.sha;\r\n            return this._request('PUT', `/repos/${this.__fullname}/contents/${filePath}`, commit, cb);\r\n         }, () => {\r\n            return this._request('PUT', `/repos/${this.__fullname}/contents/${filePath}`, commit, cb);\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Check if a repository is starred by you\r\n    * @see https://developer.github.com/v3/activity/starring/#check-if-you-are-starring-a-repository\r\n    * @param {Requestable.callback} cb - will receive true if the repository is starred and false if the repository\r\n    *                                  is not starred\r\n    * @return {Promise} - the promise for the http request {Boolean} [description]\r\n    */\r\n   isStarred(cb) {\r\n      return this._request204or404(`/user/starred/${this.__fullname}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Star a repository\r\n    * @see https://developer.github.com/v3/activity/starring/#star-a-repository\r\n    * @param {Requestable.callback} cb - will receive true if the repository is starred\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   star(cb) {\r\n      return this._request('PUT', `/user/starred/${this.__fullname}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Unstar a repository\r\n    * @see https://developer.github.com/v3/activity/starring/#unstar-a-repository\r\n    * @param {Requestable.callback} cb - will receive true if the repository is unstarred\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   unstar(cb) {\r\n      return this._request('DELETE', `/user/starred/${this.__fullname}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new release\r\n    * @see https://developer.github.com/v3/repos/releases/#create-a-release\r\n    * @param {Object} options - the description of the release\r\n    * @param {Requestable.callback} cb - will receive the newly created release\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createRelease(options, cb) {\r\n      return this._request('POST', `/repos/${this.__fullname}/releases`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit a release\r\n    * @see https://developer.github.com/v3/repos/releases/#edit-a-release\r\n    * @param {string} id - the id of the release\r\n    * @param {Object} options - the description of the release\r\n    * @param {Requestable.callback} cb - will receive the modified release\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   updateRelease(id, options, cb) {\r\n      return this._request('PATCH', `/repos/${this.__fullname}/releases/${id}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about all releases\r\n    * @see https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository\r\n    * @param {Requestable.callback} cb - will receive the release information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listReleases(cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/releases`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about a release\r\n    * @see https://developer.github.com/v3/repos/releases/#get-a-single-release\r\n    * @param {string} id - the id of the release\r\n    * @param {Requestable.callback} cb - will receive the release information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getRelease(id, cb) {\r\n      return this._request('GET', `/repos/${this.__fullname}/releases/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Delete a release\r\n    * @see https://developer.github.com/v3/repos/releases/#delete-a-release\r\n    * @param {string} id - the release to be deleted\r\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteRelease(id, cb) {\r\n      return this._request('DELETE', `/repos/${this.__fullname}/releases/${id}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Merge a pull request\r\n    * @see https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button\r\n    * @param {number|string} number - the number of the pull request to merge\r\n    * @param {Object} options - the merge options for the pull request\r\n    * @param {Requestable.callback} [cb] - will receive the merge information if the operation is successful\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   mergePullRequest(number, options, cb) {\r\n      return this._request('PUT', `/repos/${this.__fullname}/pulls/${number}/merge`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get information about all projects\r\n    * @see https://developer.github.com/v3/projects/#list-repository-projects\r\n    * @param {Requestable.callback} [cb] - will receive the list of projects\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listProjects(cb) {\r\n      return this._requestAllPages(`/repos/${this.__fullname}/projects`, {AcceptHeader: 'inertia-preview'}, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new project\r\n    * @see https://developer.github.com/v3/projects/#create-a-repository-project\r\n    * @param {Object} options - the description of the project\r\n    * @param {Requestable.callback} cb - will receive the newly created project\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createProject(options, cb) {\r\n      options = options || {};\r\n      options.AcceptHeader = 'inertia-preview';\r\n      return this._request('POST', `/repos/${this.__fullname}/projects`, options, cb);\r\n   }\r\n\r\n}\r\n\r\nmodule.exports = Repository;\r\n","/**\r\n * @file\r\n * @copyright  2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport axios from 'axios';\r\nimport debug from 'debug';\r\nimport {Base64} from 'js-base64';\r\n\r\nconst log = debug('github:request');\r\n\r\n/**\r\n * The error structure returned when a network call fails\r\n */\r\nclass ResponseError extends Error {\r\n   /**\r\n    * Construct a new ResponseError\r\n    * @param {string} message - an message to return instead of the the default error message\r\n    * @param {string} path - the requested path\r\n    * @param {Object} response - the object returned by Axios\r\n    */\r\n   constructor(message, path, response) {\r\n      super(message);\r\n      this.path = path;\r\n      this.request = response.config;\r\n      this.response = (response || {}).response || response;\r\n      this.status = response.status;\r\n   }\r\n}\r\n\r\n/**\r\n * Requestable wraps the logic for making http requests to the API\r\n */\r\nclass Requestable {\r\n   /**\r\n    * Either a username and password or an oauth token for Github\r\n    * @typedef {Object} Requestable.auth\r\n    * @prop {string} [username] - the Github username\r\n    * @prop {string} [password] - the user's password\r\n    * @prop {token} [token] - an OAuth token\r\n    */\r\n   /**\r\n    * Initialize the http internals.\r\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to Github. If auth is\r\n    *                                  not provided request will be made unauthenticated\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    * @param {string} [AcceptHeader=v3] - the accept header for the requests\r\n    */\r\n   constructor(auth, apiBase, AcceptHeader) {\r\n      this.__apiBase = apiBase || 'https://api.github.com';\r\n      this.__auth = {\r\n         token: auth.token,\r\n         username: auth.username,\r\n         password: auth.password,\r\n      };\r\n      this.__AcceptHeader = AcceptHeader || 'v3';\r\n\r\n      if (auth.token) {\r\n         this.__authorizationHeader = 'token ' + auth.token;\r\n      } else if (auth.username && auth.password) {\r\n         this.__authorizationHeader = 'Basic ' + Base64.encode(auth.username + ':' + auth.password);\r\n      }\r\n   }\r\n\r\n   /**\r\n    * Compute the URL to use to make a request.\r\n    * @private\r\n    * @param {string} path - either a URL relative to the API base or an absolute URL\r\n    * @return {string} - the URL to use\r\n    */\r\n   __getURL(path) {\r\n      let url = path;\r\n\r\n      if (path.indexOf('//') === -1) {\r\n         url = this.__apiBase + path;\r\n      }\r\n\r\n      let newCacheBuster = 'timestamp=' + new Date().getTime();\r\n      return url.replace(/(timestamp=\\d+)/, newCacheBuster);\r\n   }\r\n\r\n   /**\r\n    * Compute the headers required for an API request.\r\n    * @private\r\n    * @param {boolean} raw - if the request should be treated as JSON or as a raw request\r\n    * @param {string} AcceptHeader - the accept header for the request\r\n    * @return {Object} - the headers to use in the request\r\n    */\r\n   __getRequestHeaders(raw, AcceptHeader) {\r\n      let headers = {\r\n         'Content-Type': 'application/json;charset=UTF-8',\r\n         'Accept': 'application/vnd.github.' + (AcceptHeader || this.__AcceptHeader),\r\n      };\r\n\r\n      if (raw) {\r\n         headers.Accept += '.raw';\r\n      }\r\n      headers.Accept += '+json';\r\n\r\n      if (this.__authorizationHeader) {\r\n         headers.Authorization = this.__authorizationHeader;\r\n      }\r\n\r\n      return headers;\r\n   }\r\n\r\n   /**\r\n    * Sets the default options for API requests\r\n    * @protected\r\n    * @param {Object} [requestOptions={}] - the current options for the request\r\n    * @return {Object} - the options to pass to the request\r\n    */\r\n   _getOptionsWithDefaults(requestOptions = {}) {\r\n      if (!(requestOptions.visibility || requestOptions.affiliation)) {\r\n         requestOptions.type = requestOptions.type || 'all';\r\n      }\r\n      requestOptions.sort = requestOptions.sort || 'updated';\r\n      requestOptions.per_page = requestOptions.per_page || '100'; // eslint-disable-line\r\n\r\n      return requestOptions;\r\n   }\r\n\r\n   /**\r\n    * if a `Date` is passed to this function it will be converted to an ISO string\r\n    * @param {*} date - the object to attempt to cooerce into an ISO date string\r\n    * @return {string} - the ISO representation of `date` or whatever was passed in if it was not a date\r\n    */\r\n   _dateToISO(date) {\r\n      if (date && (date instanceof Date)) {\r\n         date = date.toISOString();\r\n      }\r\n\r\n      return date;\r\n   }\r\n\r\n   /**\r\n    * A function that receives the result of the API request.\r\n    * @callback Requestable.callback\r\n    * @param {Requestable.Error} error - the error returned by the API or `null`\r\n    * @param {(Object|true)} result - the data returned by the API or `true` if the API returns `204 No Content`\r\n    * @param {Object} request - the raw {@linkcode https://github.com/mzabriskie/axios#response-schema Response}\r\n    */\r\n   /**\r\n    * Make a request.\r\n    * @param {string} method - the method for the request (GET, PUT, POST, DELETE)\r\n    * @param {string} path - the path for the request\r\n    * @param {*} [data] - the data to send to the server. For HTTP methods that don't have a body the data\r\n    *                   will be sent as query parameters\r\n    * @param {Requestable.callback} [cb] - the callback for the request\r\n    * @param {boolean} [raw=false] - if the request should be sent as raw. If this is a falsy value then the\r\n    *                              request will be made as JSON\r\n    * @return {Promise} - the Promise for the http request\r\n    */\r\n   _request(method, path, data, cb, raw) {\r\n      const url = this.__getURL(path);\r\n\r\n      const AcceptHeader = (data || {}).AcceptHeader;\r\n      if (AcceptHeader) {\r\n         delete data.AcceptHeader;\r\n      }\r\n      const headers = this.__getRequestHeaders(raw, AcceptHeader);\r\n\r\n      let queryParams = {};\r\n\r\n      const shouldUseDataAsParams = data && (typeof data === 'object') && methodHasNoBody(method);\r\n      if (shouldUseDataAsParams) {\r\n         queryParams = data;\r\n         data = undefined;\r\n      }\r\n\r\n      const config = {\r\n         url: url,\r\n         method: method,\r\n         headers: headers,\r\n         params: queryParams,\r\n         data: data,\r\n         responseType: raw ? 'text' : 'json',\r\n      };\r\n\r\n      log(`${config.method} to ${config.url}`);\r\n      const requestPromise = axios(config).catch(callbackErrorOrThrow(cb, path));\r\n\r\n      if (cb) {\r\n         requestPromise.then((response) => {\r\n            if (response.data && Object.keys(response.data).length > 0) {\r\n               // When data has results\r\n               cb(null, response.data, response);\r\n            } else if (config.method !== 'GET' && Object.keys(response.data).length < 1) {\r\n               // True when successful submit a request and receive a empty object\r\n               cb(null, (response.status < 300), response);\r\n            } else {\r\n               cb(null, response.data, response);\r\n            }\r\n         });\r\n      }\r\n\r\n      return requestPromise;\r\n   }\r\n\r\n   /**\r\n    * Make a request to an endpoint the returns 204 when true and 404 when false\r\n    * @param {string} path - the path to request\r\n    * @param {Object} data - any query parameters for the request\r\n    * @param {Requestable.callback} cb - the callback that will receive `true` or `false`\r\n    * @param {method} [method=GET] - HTTP Method to use\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   _request204or404(path, data, cb, method = 'GET') {\r\n      return this._request(method, path, data)\r\n         .then(function success(response) {\r\n            if (cb) {\r\n               cb(null, true, response);\r\n            }\r\n            return true;\r\n         }, function failure(response) {\r\n            if (response.response.status === 404) {\r\n               if (cb) {\r\n                  cb(null, false, response);\r\n               }\r\n               return false;\r\n            }\r\n\r\n            if (cb) {\r\n               cb(response);\r\n            }\r\n            throw response;\r\n         });\r\n   }\r\n\r\n   /**\r\n    * Make a request and fetch all the available data. Github will paginate responses so for queries\r\n    * that might span multiple pages this method is preferred to {@link Requestable#request}\r\n    * @param {string} path - the path to request\r\n    * @param {Object} options - the query parameters to include\r\n    * @param {Requestable.callback} [cb] - the function to receive the data. The returned data will always be an array.\r\n    * @param {Object[]} results - the partial results. This argument is intended for interal use only.\r\n    * @return {Promise} - a promise which will resolve when all pages have been fetched\r\n    * @deprecated This will be folded into {@link Requestable#_request} in the 2.0 release.\r\n    */\r\n   _requestAllPages(path, options, cb, results) {\r\n      results = results || [];\r\n\r\n      return this._request('GET', path, options)\r\n         .then((response) => {\r\n            let thisGroup;\r\n            if (response.data instanceof Array) {\r\n               thisGroup = response.data;\r\n            } else if (response.data.items instanceof Array) {\r\n               thisGroup = response.data.items;\r\n            } else {\r\n               let message = `cannot figure out how to append ${response.data} to the result set`;\r\n               throw new ResponseError(message, path, response);\r\n            }\r\n            results.push(...thisGroup);\r\n\r\n            const nextUrl = getNextPage(response.headers.link);\r\n            if (nextUrl && typeof options.page !== 'number') {\r\n               log(`getting next page: ${nextUrl}`);\r\n               return this._requestAllPages(nextUrl, options, cb, results);\r\n            }\r\n\r\n            if (cb) {\r\n               cb(null, results, response);\r\n            }\r\n\r\n            response.data = results;\r\n            return response;\r\n         }).catch(callbackErrorOrThrow(cb, path));\r\n   }\r\n}\r\n\r\nmodule.exports = Requestable;\r\n\r\n// ////////////////////////// //\r\n//  Private helper functions  //\r\n// ////////////////////////// //\r\nconst METHODS_WITH_NO_BODY = ['GET', 'HEAD', 'DELETE'];\r\nfunction methodHasNoBody(method) {\r\n   return METHODS_WITH_NO_BODY.indexOf(method) !== -1;\r\n}\r\n\r\nfunction getNextPage(linksHeader = '') {\r\n   const links = linksHeader.split(/\\s*,\\s*/); // splits and strips the urls\r\n   return links.reduce(function(nextUrl, link) {\r\n      if (link.search(/rel=\"next\"/) !== -1) {\r\n         return (link.match(/<(.*)>/) || [])[1];\r\n      }\r\n\r\n      return nextUrl;\r\n   }, undefined);\r\n}\r\n\r\nfunction callbackErrorOrThrow(cb, path) {\r\n   return function handler(object) {\r\n      let error;\r\n      if (object.hasOwnProperty('config')) {\r\n         const {response: {status, statusText}, config: {method, url}} = object;\r\n         let message = (`${status} error making request ${method} ${url}: \"${statusText}\"`);\r\n         error = new ResponseError(message, path, object);\r\n         log(`${message} ${JSON.stringify(object.data)}`);\r\n      } else {\r\n         error = object;\r\n      }\r\n      if (cb) {\r\n         log('going to error callback');\r\n         cb(error);\r\n      } else {\r\n         log('throwing error');\r\n         throw error;\r\n      }\r\n   };\r\n}\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\nimport debug from 'debug';\r\nconst log = debug('github:search');\r\n\r\n/**\r\n * Wrap the Search API\r\n */\r\nclass Search extends Requestable {\r\n   /**\r\n    * Create a Search\r\n    * @param {Object} defaults - defaults for the search\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(defaults, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__defaults = this._getOptionsWithDefaults(defaults);\r\n   }\r\n\r\n   /**\r\n    * Available search options\r\n    * @see https://developer.github.com/v3/search/#parameters\r\n    * @typedef {Object} Search.Params\r\n    * @param {string} q - the query to make\r\n    * @param {string} sort - the sort field, one of `stars`, `forks`, or `updated`.\r\n    *                      Default is [best match](https://developer.github.com/v3/search/#ranking-search-results)\r\n    * @param {string} order - the ordering, either `asc` or `desc`\r\n    */\r\n   /**\r\n    * Perform a search on the GitHub API\r\n    * @private\r\n    * @param {string} path - the scope of the search\r\n    * @param {Search.Params} [withOptions] - additional parameters for the search\r\n    * @param {Requestable.callback} [cb] - will receive the results of the search\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   _search(path, withOptions = {}, cb = undefined) {\r\n      let requestOptions = {};\r\n      Object.keys(this.__defaults).forEach((prop) => {\r\n         requestOptions[prop] = this.__defaults[prop];\r\n      });\r\n      Object.keys(withOptions).forEach((prop) => {\r\n         requestOptions[prop] = withOptions[prop];\r\n      });\r\n\r\n      log(`searching ${path} with options:`, requestOptions);\r\n      return this._requestAllPages(`/search/${path}`, requestOptions, cb);\r\n   }\r\n\r\n   /**\r\n    * Search for repositories\r\n    * @see https://developer.github.com/v3/search/#search-repositories\r\n    * @param {Search.Params} [options] - additional parameters for the search\r\n    * @param {Requestable.callback} [cb] - will receive the results of the search\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   forRepositories(options, cb) {\r\n      return this._search('repositories', options, cb);\r\n   }\r\n\r\n   /**\r\n    * Search for code\r\n    * @see https://developer.github.com/v3/search/#search-code\r\n    * @param {Search.Params} [options] - additional parameters for the search\r\n    * @param {Requestable.callback} [cb] - will receive the results of the search\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   forCode(options, cb) {\r\n      return this._search('code', options, cb);\r\n   }\r\n\r\n   /**\r\n    * Search for issues\r\n    * @see https://developer.github.com/v3/search/#search-issues\r\n    * @param {Search.Params} [options] - additional parameters for the search\r\n    * @param {Requestable.callback} [cb] - will receive the results of the search\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   forIssues(options, cb) {\r\n      return this._search('issues', options, cb);\r\n   }\r\n\r\n   /**\r\n    * Search for users\r\n    * @see https://developer.github.com/v3/search/#search-users\r\n    * @param {Search.Params} [options] - additional parameters for the search\r\n    * @param {Requestable.callback} [cb] - will receive the results of the search\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   forUsers(options, cb) {\r\n      return this._search('users', options, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = Search;\r\n","/**\r\n * @file\r\n * @copyright  2016 Matt Smith (Development Seed)\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\nimport debug from 'debug';\r\nconst log = debug('github:team');\r\n\r\n/**\r\n * A Team allows scoping of API requests to a particular Github Organization Team.\r\n */\r\nclass Team extends Requestable {\r\n   /**\r\n    * Create a Team.\r\n    * @param {string} [teamId] - the id for the team\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(teamId, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__teamId = teamId;\r\n   }\r\n\r\n   /**\r\n    * Get Team information\r\n    * @see https://developer.github.com/v3/orgs/teams/#get-team\r\n    * @param {Requestable.callback} [cb] - will receive the team\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getTeam(cb) {\r\n      log(`Fetching Team ${this.__teamId}`);\r\n      return this._request('Get', `/teams/${this.__teamId}`, undefined, cb);\r\n   }\r\n\r\n   /**\r\n    * List the Team's repositories\r\n    * @see https://developer.github.com/v3/orgs/teams/#list-team-repos\r\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listRepos(cb) {\r\n      log(`Fetching repositories for Team ${this.__teamId}`);\r\n      return this._requestAllPages(`/teams/${this.__teamId}/repos`, undefined, cb);\r\n   }\r\n\r\n   /**\r\n    * Edit Team information\r\n    * @see https://developer.github.com/v3/orgs/teams/#edit-team\r\n    * @param {object} options - Parameters for team edit\r\n    * @param {string} options.name - The name of the team\r\n    * @param {string} [options.description] - Team description\r\n    * @param {string} [options.repo_names] - Repos to add the team to\r\n    * @param {string} [options.privacy=secret] - The level of privacy the team should have. Can be either one\r\n    * of: `secret`, or `closed`\r\n    * @param {Requestable.callback} [cb] - will receive the updated team\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   editTeam(options, cb) {\r\n      log(`Editing Team ${this.__teamId}`);\r\n      return this._request('PATCH', `/teams/${this.__teamId}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * List the users who are members of the Team\r\n    * @see https://developer.github.com/v3/orgs/teams/#list-team-members\r\n    * @param {object} options - Parameters for listing team users\r\n    * @param {string} [options.role=all] - can be one of: `all`, `maintainer`, or `member`\r\n    * @param {Requestable.callback} [cb] - will receive the list of users\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listMembers(options, cb) {\r\n      log(`Getting members of Team ${this.__teamId}`);\r\n      return this._requestAllPages(`/teams/${this.__teamId}/members`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get Team membership status for a user\r\n    * @see https://developer.github.com/v3/orgs/teams/#get-team-membership\r\n    * @param {string} username - can be one of: `all`, `maintainer`, or `member`\r\n    * @param {Requestable.callback} [cb] - will receive the membership status of a user\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getMembership(username, cb) {\r\n      log(`Getting membership of user ${username} in Team ${this.__teamId}`);\r\n      return this._request('GET', `/teams/${this.__teamId}/memberships/${username}`, undefined, cb);\r\n   }\r\n\r\n   /**\r\n    * Add a member to the Team\r\n    * @see https://developer.github.com/v3/orgs/teams/#add-team-membership\r\n    * @param {string} username - can be one of: `all`, `maintainer`, or `member`\r\n    * @param {object} options - Parameters for adding a team member\r\n    * @param {string} [options.role=member] - The role that this user should have in the team. Can be one\r\n    * of: `member`, or `maintainer`\r\n    * @param {Requestable.callback} [cb] - will receive the membership status of added user\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   addMembership(username, options, cb) {\r\n      log(`Adding user ${username} to Team ${this.__teamId}`);\r\n      return this._request('PUT', `/teams/${this.__teamId}/memberships/${username}`, options, cb);\r\n   }\r\n\r\n   /**\r\n    * Get repo management status for team\r\n    * @see https://developer.github.com/v3/orgs/teams/#remove-team-membership\r\n    * @param {string} owner - Organization name\r\n    * @param {string} repo - Repo name\r\n    * @param {Requestable.callback} [cb] - will receive the membership status of added user\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   isManagedRepo(owner, repo, cb) {\r\n      log(`Getting repo management by Team ${this.__teamId} for repo ${owner}/${repo}`);\r\n      return this._request204or404(`/teams/${this.__teamId}/repos/${owner}/${repo}`, undefined, cb);\r\n   }\r\n\r\n   /**\r\n    * Add or Update repo management status for team\r\n    * @see https://developer.github.com/v3/orgs/teams/#add-or-update-team-repository\r\n    * @param {string} owner - Organization name\r\n    * @param {string} repo - Repo name\r\n    * @param {object} options - Parameters for adding or updating repo management for the team\r\n    * @param {string} [options.permission] - The permission to grant the team on this repository. Can be one\r\n    * of: `pull`, `push`, or `admin`\r\n    * @param {Requestable.callback} [cb] - will receive the membership status of added user\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   manageRepo(owner, repo, options, cb) {\r\n      log(`Adding or Updating repo management by Team ${this.__teamId} for repo ${owner}/${repo}`);\r\n      return this._request204or404(`/teams/${this.__teamId}/repos/${owner}/${repo}`, options, cb, 'PUT');\r\n   }\r\n\r\n   /**\r\n    * Remove repo management status for team\r\n    * @see https://developer.github.com/v3/orgs/teams/#remove-team-repository\r\n    * @param {string} owner - Organization name\r\n    * @param {string} repo - Repo name\r\n    * @param {Requestable.callback} [cb] - will receive the membership status of added user\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   unmanageRepo(owner, repo, cb) {\r\n      log(`Remove repo management by Team ${this.__teamId} for repo ${owner}/${repo}`);\r\n      return this._request204or404(`/teams/${this.__teamId}/repos/${owner}/${repo}`, undefined, cb, 'DELETE');\r\n   }\r\n\r\n   /**\r\n    * Delete Team\r\n    * @see https://developer.github.com/v3/orgs/teams/#delete-team\r\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   deleteTeam(cb) {\r\n      log(`Deleting Team ${this.__teamId}`);\r\n      return this._request204or404(`/teams/${this.__teamId}`, undefined, cb, 'DELETE');\r\n   }\r\n}\r\n\r\nmodule.exports = Team;\r\n","/**\r\n * @file\r\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\r\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\r\n *             Github.js is freely distributable.\r\n */\r\n\r\nimport Requestable from './Requestable';\r\nimport debug from 'debug';\r\nconst log = debug('github:user');\r\n\r\n/**\r\n * A User allows scoping of API requests to a particular Github user.\r\n */\r\nclass User extends Requestable {\r\n   /**\r\n    * Create a User.\r\n    * @param {string} [username] - the user to use for user-scoped queries\r\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\r\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\r\n    */\r\n   constructor(username, auth, apiBase) {\r\n      super(auth, apiBase);\r\n      this.__user = username;\r\n   }\r\n\r\n   /**\r\n    * Get the url for the request. (dependent on if we're requesting for the authenticated user or not)\r\n    * @private\r\n    * @param {string} endpoint - the endpoint being requested\r\n    * @return {string} - the resolved endpoint\r\n    */\r\n   __getScopedUrl(endpoint) {\r\n      if (this.__user) {\r\n         return endpoint ?\r\n            `/users/${this.__user}/${endpoint}` :\r\n            `/users/${this.__user}`\r\n            ;\r\n\r\n      } else { // eslint-disable-line\r\n         switch (endpoint) {\r\n            case '':\r\n               return '/user';\r\n\r\n            case 'notifications':\r\n            case 'gists':\r\n               return `/${endpoint}`;\r\n\r\n            default:\r\n               return `/user/${endpoint}`;\r\n         }\r\n      }\r\n   }\r\n\r\n   /**\r\n    * List the user's repositories\r\n    * @see https://developer.github.com/v3/repos/#list-user-repositories\r\n    * @param {Object} [options={}] - any options to refine the search\r\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listRepos(options, cb) {\r\n      if (typeof options === 'function') {\r\n         cb = options;\r\n         options = {};\r\n      }\r\n\r\n      options = this._getOptionsWithDefaults(options);\r\n\r\n      log(`Fetching repositories with options: ${JSON.stringify(options)}`);\r\n      return this._requestAllPages(this.__getScopedUrl('repos'), options, cb);\r\n   }\r\n\r\n   /**\r\n    * List the orgs that the user belongs to\r\n    * @see https://developer.github.com/v3/orgs/#list-user-organizations\r\n    * @param {Requestable.callback} [cb] - will receive the list of organizations\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listOrgs(cb) {\r\n      return this._request('GET', this.__getScopedUrl('orgs'), null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the user's gists\r\n    * @see https://developer.github.com/v3/gists/#list-a-users-gists\r\n    * @param {Requestable.callback} [cb] - will receive the list of gists\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listGists(cb) {\r\n      return this._request('GET', this.__getScopedUrl('gists'), null, cb);\r\n   }\r\n\r\n   /**\r\n    * List the user's notifications\r\n    * @see https://developer.github.com/v3/activity/notifications/#list-your-notifications\r\n    * @param {Object} [options={}] - any options to refine the search\r\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listNotifications(options, cb) {\r\n      options = options || {};\r\n      if (typeof options === 'function') {\r\n         cb = options;\r\n         options = {};\r\n      }\r\n\r\n      options.since = this._dateToISO(options.since);\r\n      options.before = this._dateToISO(options.before);\r\n\r\n      return this._request('GET', this.__getScopedUrl('notifications'), options, cb);\r\n   }\r\n\r\n   /**\r\n    * Show the user's profile\r\n    * @see https://developer.github.com/v3/users/#get-a-single-user\r\n    * @param {Requestable.callback} [cb] - will receive the user's information\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getProfile(cb) {\r\n      return this._request('GET', this.__getScopedUrl(''), null, cb);\r\n   }\r\n\r\n   /**\r\n    * Gets the list of starred repositories for the user\r\n    * @see https://developer.github.com/v3/activity/starring/#list-repositories-being-starred\r\n    * @param {Requestable.callback} [cb] - will receive the list of starred repositories\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   listStarredRepos(cb) {\r\n      let requestOptions = this._getOptionsWithDefaults();\r\n      return this._requestAllPages(this.__getScopedUrl('starred'), requestOptions, cb);\r\n   }\r\n\r\n   /**\r\n    * List email addresses for a user\r\n    * @see https://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user\r\n    * @param {Requestable.callback} [cb] - will receive the list of emails\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   getEmails(cb) {\r\n      return this._request('GET', '/user/emails', null, cb);\r\n   }\r\n\r\n   /**\r\n    * Have the authenticated user follow this user\r\n    * @see https://developer.github.com/v3/users/followers/#follow-a-user\r\n    * @param {string} username - the user to follow\r\n    * @param {Requestable.callback} [cb] - will receive true if the request succeeds\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   follow(username, cb) {\r\n      return this._request('PUT', `/user/following/${this.__user}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Have the currently authenticated user unfollow this user\r\n    * @see https://developer.github.com/v3/users/followers/#follow-a-user\r\n    * @param {string} username - the user to unfollow\r\n    * @param {Requestable.callback} [cb] - receives true if the request succeeds\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   unfollow(username, cb) {\r\n      return this._request('DELETE', `/user/following/${this.__user}`, null, cb);\r\n   }\r\n\r\n   /**\r\n    * Create a new repository for the currently authenticated user\r\n    * @see https://developer.github.com/v3/repos/#create\r\n    * @param {object} options - the repository definition\r\n    * @param {Requestable.callback} [cb] - will receive the API response\r\n    * @return {Promise} - the promise for the http request\r\n    */\r\n   createRepo(options, cb) {\r\n      return this._request('POST', '/user/repos', options, cb);\r\n   }\r\n}\r\n\r\nmodule.exports = User;\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}